// Generated by tools/packets_db/main.rs
// Auto generated file do not edit manually

#![allow(dead_code)]

use crate::packets::*;
use std::fmt::{Formatter, Debug, Display};
use crate::print::PrettyOutput;

impl Debug for PacketCaLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd[30, 54]", &format!("{:02X?}", &self.passwd_raw))
            .field("client_type[54, 55]", &format!("{:02X?}", &self.client_type_raw))
        .finish()
    }
}

impl Display for PacketCaLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd(char[] as char[])[30, 54]: {}", &self.passwd.pretty_output()));
        fields.push(format!("client_type(unsigned char as u8)[54, 55]: {}", &self.client_type));
        write!(f, "PacketCaLogin\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("auth_code[6, 10]", &format!("{:02X?}", &self.auth_code_raw))
            .field("user_level[10, 14]", &format!("{:02X?}", &self.user_level_raw))
            .field("client_type[14, 16]", &format!("{:02X?}", &self.client_type_raw))
            .field("sex[16, 17]", &format!("{:02X?}", &self.sex_raw))
        .finish()
    }
}

impl Display for PacketChEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("auth_code(int as i32)[6, 10]: {}", &self.auth_code));
        fields.push(format!("user_level(unsigned long as u32)[10, 14]: {}", &self.user_level));
        fields.push(format!("client_type(unsigned short as u16)[14, 16]: {}", &self.client_type));
        fields.push(format!("sex(unsigned char as u8)[16, 17]: {}", &self.sex));
        write!(f, "PacketChEnter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChSelectChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectChar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_num[2, 3]", &format!("{:02X?}", &self.char_num_raw))
        .finish()
    }
}

impl Display for PacketChSelectChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_num(unsigned char as u8)[2, 3]: {}", &self.char_num));
        write!(f, "PacketChSelectChar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChMakeChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChMakeChar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("str[26, 27]", &format!("{:02X?}", &self.str_raw))
            .field("agi[27, 28]", &format!("{:02X?}", &self.agi_raw))
            .field("vit[28, 29]", &format!("{:02X?}", &self.vit_raw))
            .field("int[29, 30]", &format!("{:02X?}", &self.int_raw))
            .field("dex[30, 31]", &format!("{:02X?}", &self.dex_raw))
            .field("luk[31, 32]", &format!("{:02X?}", &self.luk_raw))
            .field("char_num[32, 33]", &format!("{:02X?}", &self.char_num_raw))
            .field("head_pal[33, 35]", &format!("{:02X?}", &self.head_pal_raw))
            .field("head[35, 37]", &format!("{:02X?}", &self.head_raw))
        .finish()
    }
}

impl Display for PacketChMakeChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("str(unsigned char as u8)[26, 27]: {}", &self.str));
        fields.push(format!("agi(unsigned char as u8)[27, 28]: {}", &self.agi));
        fields.push(format!("vit(unsigned char as u8)[28, 29]: {}", &self.vit));
        fields.push(format!("int(unsigned char as u8)[29, 30]: {}", &self.int));
        fields.push(format!("dex(unsigned char as u8)[30, 31]: {}", &self.dex));
        fields.push(format!("luk(unsigned char as u8)[31, 32]: {}", &self.luk));
        fields.push(format!("char_num(unsigned char as u8)[32, 33]: {}", &self.char_num));
        fields.push(format!("head_pal(short as i16)[33, 35]: {}", &self.head_pal));
        fields.push(format!("head(short as i16)[35, 37]: {}", &self.head));
        write!(f, "PacketChMakeChar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChMakeChar2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChMakeChar2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("char_num[26, 27]", &format!("{:02X?}", &self.char_num_raw))
            .field("head_pal[27, 29]", &format!("{:02X?}", &self.head_pal_raw))
            .field("head[29, 31]", &format!("{:02X?}", &self.head_raw))
        .finish()
    }
}

impl Display for PacketChMakeChar2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("char_num(unsigned char as u8)[26, 27]: {}", &self.char_num));
        fields.push(format!("head_pal(short as i16)[27, 29]: {}", &self.head_pal));
        fields.push(format!("head(short as i16)[29, 31]: {}", &self.head));
        write!(f, "PacketChMakeChar2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("key[6, 46]", &format!("{:02X?}", &self.key_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("key(char[] as char[])[6, 46]: {}", &self.key.pretty_output()));
        write!(f, "PacketChDeleteChar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAcceptLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAcceptLogin")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("auth_code[4, 8]", &format!("{:02X?}", &self.auth_code_raw))
            .field("aid[8, 12]", &format!("{:02X?}", &self.aid_raw))
            .field("user_level[12, 16]", &format!("{:02X?}", &self.user_level_raw))
            .field("last_login_ip[16, 20]", &format!("{:02X?}", &self.last_login_ip_raw))
            .field("last_login_time[20, 46]", &format!("{:02X?}", &self.last_login_time_raw))
            .field("sex[46, 47]", &format!("{:02X?}", &self.sex_raw))
            .field("server_list[47, 79]", &format!("{:02X?}", &self.server_list_raw))
        .finish()
    }
}

impl Display for PacketAcAcceptLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("auth_code(int as i32)[4, 8]: {}", &self.auth_code));
        fields.push(format!("aid(unsigned long as u32)[8, 12]: {}", &self.aid));
        fields.push(format!("user_level(unsigned long as u32)[12, 16]: {}", &self.user_level));
        fields.push(format!("last_login_ip(unsigned long as u32)[16, 20]: {}", &self.last_login_ip));
        fields.push(format!("last_login_time(char[] as char[])[20, 46]: {}", &self.last_login_time.pretty_output()));
        fields.push(format!("sex(unsigned char as u8)[46, 47]: {}", &self.sex));
        fields.push(format!("server_list([] as Vec)[47, 79]: {}", &self.server_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketAcAcceptLogin\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAcceptLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAcceptLogin2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("auth_code[4, 8]", &format!("{:02X?}", &self.auth_code_raw))
            .field("aid[8, 12]", &format!("{:02X?}", &self.aid_raw))
            .field("user_level[12, 16]", &format!("{:02X?}", &self.user_level_raw))
            .field("last_login_ip[16, 20]", &format!("{:02X?}", &self.last_login_ip_raw))
            .field("last_login_time[20, 46]", &format!("{:02X?}", &self.last_login_time_raw))
            .field("sex[46, 47]", &format!("{:02X?}", &self.sex_raw))
            .field("twitter_auth_token[47, 63]", &format!("{:02X?}", &self.twitter_auth_token_raw))
            .field("twitter_flag[63, 64]", &format!("{:02X?}", &self.twitter_flag_raw))
            .field("server_list[64, 224]", &format!("{:02X?}", &self.server_list_raw))
        .finish()
    }
}

impl Display for PacketAcAcceptLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("auth_code(int as i32)[4, 8]: {}", &self.auth_code));
        fields.push(format!("aid(unsigned long as u32)[8, 12]: {}", &self.aid));
        fields.push(format!("user_level(unsigned long as u32)[12, 16]: {}", &self.user_level));
        fields.push(format!("last_login_ip(unsigned long as u32)[16, 20]: {}", &self.last_login_ip));
        fields.push(format!("last_login_time(char[] as char[])[20, 46]: {}", &self.last_login_time.pretty_output()));
        fields.push(format!("sex(unsigned char as u8)[46, 47]: {}", &self.sex));
        fields.push(format!("twitter_auth_token(char[] as char[])[47, 63]: {}", &self.twitter_auth_token.pretty_output()));
        fields.push(format!("twitter_flag(unsigned char as u8)[63, 64]: {}", &self.twitter_flag));
        fields.push(format!("server_list([] as Vec)[64, 224]: {}", &self.server_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketAcAcceptLogin2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcRefuseLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRefuseLogin")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
            .field("block_date[3, 23]", &format!("{:02X?}", &self.block_date_raw))
        .finish()
    }
}

impl Display for PacketAcRefuseLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        fields.push(format!("block_date(char[] as char[])[3, 23]: {}", &self.block_date.pretty_output()));
        write!(f, "PacketAcRefuseLogin\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAcceptEnterNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptEnterNeoUnion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("total_slot_num[4, 5]", &format!("{:02X?}", &self.total_slot_num_raw))
            .field("premium_start_slot[5, 6]", &format!("{:02X?}", &self.premium_start_slot_raw))
            .field("premium_end_slot[6, 7]", &format!("{:02X?}", &self.premium_end_slot_raw))
            .field("dummy1_beginbilling[7, 8]", &format!("{:02X?}", &self.dummy1_beginbilling_raw))
            .field("code[8, 12]", &format!("{:02X?}", &self.code_raw))
            .field("time1[12, 16]", &format!("{:02X?}", &self.time1_raw))
            .field("time2[16, 20]", &format!("{:02X?}", &self.time2_raw))
            .field("dummy2_endbilling[20, 27]", &format!("{:02X?}", &self.dummy2_endbilling_raw))
            .field("char_info[27, 182]", &format!("{:02X?}", &self.char_info_raw))
        .finish()
    }
}

impl Display for PacketHcAcceptEnterNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("total_slot_num(unsigned char as u8)[4, 5]: {}", &self.total_slot_num));
        fields.push(format!("premium_start_slot(unsigned char as u8)[5, 6]: {}", &self.premium_start_slot));
        fields.push(format!("premium_end_slot(unsigned char as u8)[6, 7]: {}", &self.premium_end_slot));
        fields.push(format!("dummy1_beginbilling(char as i8)[7, 8]: {}", &self.dummy1_beginbilling));
        fields.push(format!("code(unsigned long as u32)[8, 12]: {}", &self.code));
        fields.push(format!("time1(unsigned long as u32)[12, 16]: {}", &self.time1));
        fields.push(format!("time2(unsigned long as u32)[16, 20]: {}", &self.time2));
        fields.push(format!("dummy2_endbilling(char[] as char[])[20, 27]: {}", &self.dummy2_endbilling.pretty_output()));
        fields.push(format!("char_info([] as Vec)[27, 182]: {}", &self.char_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketHcAcceptEnterNeoUnion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseEnter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketHcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketHcRefuseEnter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAcceptMakecharNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptMakecharNeoUnion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("charinfo[2, ?]", &format!("{:02X?}", &self.charinfo_raw))
        .finish()
    }
}

impl Display for PacketHcAcceptMakecharNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("charinfo(struct as Struct)[2, ?]: {}", &self.charinfo));
        write!(f, "PacketHcAcceptMakecharNeoUnion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcRefuseMakechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseMakechar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketHcRefuseMakechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketHcRefuseMakechar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAcceptDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptDeletechar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketHcAcceptDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketHcAcceptDeletechar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcRefuseDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseDeletechar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketHcRefuseDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketHcRefuseDeletechar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcNotifyZonesvr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcNotifyZonesvr")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("map_name[6, 22]", &format!("{:02X?}", &self.map_name_raw))
            .field("addr[22, ?]", &format!("{:02X?}", &self.addr_raw))
        .finish()
    }
}

impl Display for PacketHcNotifyZonesvr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("map_name(char[] as char[])[6, 22]: {}", &self.map_name.pretty_output()));
        fields.push(format!("addr(struct as Struct)[22, ?]: {}", &self.addr));
        write!(f, "PacketHcNotifyZonesvr\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEnter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("auth_code[10, 14]", &format!("{:02X?}", &self.auth_code_raw))
            .field("client_time[14, 18]", &format!("{:02X?}", &self.client_time_raw))
            .field("sex[18, 19]", &format!("{:02X?}", &self.sex_raw))
        .finish()
    }
}

impl Display for PacketCzEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("auth_code(int as i32)[10, 14]: {}", &self.auth_code));
        fields.push(format!("client_time(unsigned long as u32)[14, 18]: {}", &self.client_time));
        fields.push(format!("sex(unsigned char as u8)[18, 19]: {}", &self.sex));
        write!(f, "PacketCzEnter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAcceptEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptEnter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("start_time[2, 6]", &format!("{:02X?}", &self.start_time_raw))
            .field("pos_dir[6, 9]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[9, 10]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[10, 11]", &format!("{:02X?}", &self.y_size_raw))
        .finish()
    }
}

impl Display for PacketZcAcceptEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("start_time(unsigned long as u32)[2, 6]: {}", &self.start_time));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[6, 9]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[9, 10]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[10, 11]: {}", &self.y_size));
        write!(f, "PacketZcAcceptEnter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseEnter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketZcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketZcRefuseEnter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyInitchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyInitchar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("style[8, 10]", &format!("{:02X?}", &self.style_raw))
            .field("item[10, 11]", &format!("{:02X?}", &self.item_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyInitchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("gid(unsigned long as u32)[4, 8]: {}", &self.gid));
        fields.push(format!("style(short as i16)[8, 10]: {}", &self.style));
        fields.push(format!("item(unsigned char as u8)[10, 11]: {}", &self.item));
        write!(f, "PacketZcNotifyInitchar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyUpdatechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyUpdatechar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("style[6, 8]", &format!("{:02X?}", &self.style_raw))
            .field("item[8, 9]", &format!("{:02X?}", &self.item_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyUpdatechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("style(short as i16)[6, 8]: {}", &self.style));
        fields.push(format!("item(unsigned char as u8)[8, 9]: {}", &self.item));
        write!(f, "PacketZcNotifyUpdatechar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyUpdateplayer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyUpdateplayer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("style[2, 4]", &format!("{:02X?}", &self.style_raw))
            .field("item[4, 5]", &format!("{:02X?}", &self.item_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyUpdateplayer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("style(short as i16)[2, 4]: {}", &self.style));
        fields.push(format!("item(unsigned char as u8)[4, 5]: {}", &self.item));
        write!(f, "PacketZcNotifyUpdateplayer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("objecttype[2, 3]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[7, 9]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[9, 11]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[11, 13]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[13, 15]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[15, 17]", &format!("{:02X?}", &self.job_raw))
            .field("head[17, 19]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[19, 21]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[21, 23]", &format!("{:02X?}", &self.accessory_raw))
            .field("shield[23, 25]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[25, 27]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[27, 29]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[29, 31]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[31, 33]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[33, 35]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[35, 39]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[39, 41]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[41, 43]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[43, 45]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[45, 46]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[46, 47]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[47, 50]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[50, 51]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[51, 52]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[52, 53]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[53, 55]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("objecttype(unsigned char as u8)[2, 3]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[3, 7]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[7, 9]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[9, 11]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[11, 13]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[13, 15]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[15, 17]: {}", &self.job));
        fields.push(format!("head(short as i16)[17, 19]: {}", &self.head));
        fields.push(format!("weapon(short as i16)[19, 21]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[21, 23]: {}", &self.accessory));
        fields.push(format!("shield(short as i16)[23, 25]: {}", &self.shield));
        fields.push(format!("accessory2(short as i16)[25, 27]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[27, 29]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[29, 31]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[31, 33]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[33, 35]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[35, 39]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[39, 41]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[41, 43]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[43, 45]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[45, 46]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[46, 47]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[47, 50]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[50, 51]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[51, 52]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[52, 53]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[53, 55]: {}", &self.clevel));
        write!(f, "PacketZcNotifyStandentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 20]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[20, 22]", &format!("{:02X?}", &self.accessory_raw))
            .field("shield[22, 24]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[24, 26]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[26, 28]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[28, 30]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[30, 32]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[32, 34]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[34, 38]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[38, 40]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[40, 42]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[42, 44]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[44, 45]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[45, 46]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[46, 49]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[49, 50]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[50, 51]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[51, 53]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(short as i16)[18, 20]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[20, 22]: {}", &self.accessory));
        fields.push(format!("shield(short as i16)[22, 24]: {}", &self.shield));
        fields.push(format!("accessory2(short as i16)[24, 26]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[26, 28]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[28, 30]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[30, 32]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[32, 34]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[34, 38]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[38, 40]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[40, 42]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[42, 44]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[44, 45]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[45, 46]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[46, 49]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[49, 50]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[50, 51]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[51, 53]: {}", &self.clevel));
        write!(f, "PacketZcNotifyNewentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyActentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyActentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 20]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[20, 22]", &format!("{:02X?}", &self.accessory_raw))
            .field("shield[22, 24]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[24, 26]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[26, 28]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[28, 30]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[30, 32]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[32, 34]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[34, 38]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[38, 40]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[40, 42]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[42, 44]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[44, 45]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[45, 46]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[46, 49]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[49, 50]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[50, 51]", &format!("{:02X?}", &self.y_size_raw))
            .field("action[51, 52]", &format!("{:02X?}", &self.action_raw))
            .field("act_start_time[52, 56]", &format!("{:02X?}", &self.act_start_time_raw))
            .field("clevel[56, 58]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyActentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(short as i16)[18, 20]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[20, 22]: {}", &self.accessory));
        fields.push(format!("shield(short as i16)[22, 24]: {}", &self.shield));
        fields.push(format!("accessory2(short as i16)[24, 26]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[26, 28]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[28, 30]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[30, 32]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[32, 34]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[34, 38]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[38, 40]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[40, 42]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[42, 44]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[44, 45]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[45, 46]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[46, 49]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[49, 50]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[50, 51]: {}", &self.y_size));
        fields.push(format!("action(unsigned char as u8)[51, 52]: {}", &self.action));
        fields.push(format!("act_start_time(unsigned long as u32)[52, 56]: {}", &self.act_start_time));
        fields.push(format!("clevel(short as i16)[56, 58]: {}", &self.clevel));
        write!(f, "PacketZcNotifyActentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 20]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[20, 22]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[22, 26]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("shield[26, 28]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[28, 30]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[30, 32]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[32, 34]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[34, 36]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[36, 38]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[38, 42]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[42, 44]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[44, 46]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[46, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("move_data[50, 56]", &format!("{:02X?}", &self.move_data_raw))
            .field("x_size[56, 57]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[57, 58]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[58, 60]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(short as i16)[18, 20]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[20, 22]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned long as u32)[22, 26]: {}", &self.move_start_time));
        fields.push(format!("shield(short as i16)[26, 28]: {}", &self.shield));
        fields.push(format!("accessory2(short as i16)[28, 30]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[30, 32]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[32, 34]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[34, 36]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[36, 38]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[38, 42]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[42, 44]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[44, 46]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[46, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("move_data(unsigned short[] as u16[])[50, 56]: {}", &self.move_data.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[56, 57]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[57, 58]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[58, 60]: {}", &self.clevel));
        write!(f, "PacketZcNotifyMoveentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentryNpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentryNpc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("objecttype[2, 3]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[7, 9]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[9, 11]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[11, 13]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[13, 15]", &format!("{:02X?}", &self.effect_state_raw))
            .field("head[15, 17]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[17, 19]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[19, 21]", &format!("{:02X?}", &self.accessory_raw))
            .field("job[21, 23]", &format!("{:02X?}", &self.job_raw))
            .field("shield[23, 25]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[25, 27]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[27, 29]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[29, 31]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[31, 33]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[33, 35]", &format!("{:02X?}", &self.head_dir_raw))
            .field("is_pkmode_on[35, 36]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[36, 37]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[37, 40]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[40, 41]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[41, 42]", &format!("{:02X?}", &self.y_size_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentryNpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("objecttype(unsigned char as u8)[2, 3]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[3, 7]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[7, 9]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[9, 11]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[11, 13]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[13, 15]: {}", &self.effect_state));
        fields.push(format!("head(short as i16)[15, 17]: {}", &self.head));
        fields.push(format!("weapon(short as i16)[17, 19]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[19, 21]: {}", &self.accessory));
        fields.push(format!("job(short as i16)[21, 23]: {}", &self.job));
        fields.push(format!("shield(short as i16)[23, 25]: {}", &self.shield));
        fields.push(format!("accessory2(short as i16)[25, 27]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[27, 29]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[29, 31]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[31, 33]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[33, 35]: {}", &self.head_dir));
        fields.push(format!("is_pkmode_on(bool as bool)[35, 36]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[36, 37]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[37, 40]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[40, 41]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[41, 42]: {}", &self.y_size));
        write!(f, "PacketZcNotifyStandentryNpc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzNotifyActorinit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzNotifyActorinit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzNotifyActorinit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzNotifyActorinit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestTime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("client_time[2, 6]", &format!("{:02X?}", &self.client_time_raw))
        .finish()
    }
}

impl Display for PacketCzRequestTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("client_time(unsigned long as u32)[2, 6]: {}", &self.client_time));
        write!(f, "PacketCzRequestTime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyTime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("time[2, 6]", &format!("{:02X?}", &self.time_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("time(unsigned long as u32)[2, 6]: {}", &self.time));
        write!(f, "PacketZcNotifyTime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyVanish {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyVanish")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyVanish {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        write!(f, "PacketZcNotifyVanish\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketScNotifyBan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScNotifyBan")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketScNotifyBan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketScNotifyBan\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestQuit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzRequestQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzRequestQuit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAcceptQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptQuit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcAcceptQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcAcceptQuit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRefuseQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseQuit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcRefuseQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcRefuseQuit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dest[2, 5]", &format!("{:02X?}", &self.dest_raw))
        .finish()
    }
}

impl Display for PacketCzRequestMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dest(unsigned char[] as u8[])[2, 5]: {}", &self.dest.pretty_output()));
        write!(f, "PacketCzRequestMove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("move_data[6, 12]", &format!("{:02X?}", &self.move_data_raw))
            .field("move_start_time[12, 16]", &format!("{:02X?}", &self.move_start_time_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("move_data(unsigned char[] as u8[])[6, 12]: {}", &self.move_data.pretty_output()));
        fields.push(format!("move_start_time(unsigned long as u32)[12, 16]: {}", &self.move_start_time));
        write!(f, "PacketZcNotifyMove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPlayermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPlayermove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("move_start_time[2, 6]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("move_data[6, 12]", &format!("{:02X?}", &self.move_data_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPlayermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("move_start_time(unsigned long as u32)[2, 6]: {}", &self.move_start_time));
        fields.push(format!("move_data(unsigned char[] as u8[])[6, 12]: {}", &self.move_data.pretty_output()));
        write!(f, "PacketZcNotifyPlayermove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStopmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStopmove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketZcStopmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        write!(f, "PacketZcStopmove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestAct")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("target_gid[2, 6]", &format!("{:02X?}", &self.target_gid_raw))
            .field("action[6, 7]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketCzRequestAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("target_gid(unsigned long as u32)[2, 6]: {}", &self.target_gid));
        fields.push(format!("action(unsigned char as u8)[6, 7]: {}", &self.action));
        write!(f, "PacketCzRequestAct\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyAct")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("target_gid[6, 10]", &format!("{:02X?}", &self.target_gid_raw))
            .field("start_time[10, 14]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[14, 18]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[18, 22]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("damage[22, 24]", &format!("{:02X?}", &self.damage_raw))
            .field("count[24, 26]", &format!("{:02X?}", &self.count_raw))
            .field("action[26, 27]", &format!("{:02X?}", &self.action_raw))
            .field("left_damage[27, 29]", &format!("{:02X?}", &self.left_damage_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("target_gid(unsigned long as u32)[6, 10]: {}", &self.target_gid));
        fields.push(format!("start_time(unsigned long as u32)[10, 14]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[14, 18]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[18, 22]: {}", &self.attacked_mt));
        fields.push(format!("damage(short as i16)[22, 24]: {}", &self.damage));
        fields.push(format!("count(short as i16)[24, 26]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[26, 27]: {}", &self.action));
        fields.push(format!("left_damage(short as i16)[27, 29]: {}", &self.left_damage));
        write!(f, "PacketZcNotifyAct\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyActPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyActPosition")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("target_gid[6, 10]", &format!("{:02X?}", &self.target_gid_raw))
            .field("start_time[10, 14]", &format!("{:02X?}", &self.start_time_raw))
            .field("x_pos[14, 16]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[16, 18]", &format!("{:02X?}", &self.y_pos_raw))
            .field("damage[18, 20]", &format!("{:02X?}", &self.damage_raw))
            .field("count[20, 22]", &format!("{:02X?}", &self.count_raw))
            .field("action[22, 23]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyActPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("target_gid(unsigned long as u32)[6, 10]: {}", &self.target_gid));
        fields.push(format!("start_time(unsigned long as u32)[10, 14]: {}", &self.start_time));
        fields.push(format!("x_pos(short as i16)[14, 16]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[16, 18]: {}", &self.y_pos));
        fields.push(format!("damage(short as i16)[18, 20]: {}", &self.damage));
        fields.push(format!("count(short as i16)[20, 22]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[22, 23]: {}", &self.action));
        write!(f, "PacketZcNotifyActPosition\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzRequestChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzRequestChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("msg[8, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("gid(unsigned long as u32)[4, 8]: {}", &self.gid));
        fields.push(format!("msg(char[] as String)[8, ?]: {}", &self.msg));
        write!(f, "PacketZcNotifyChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPlayerchat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPlayerchat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPlayerchat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketZcNotifyPlayerchat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketServerEntryAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketServerEntryAck")
            .field("header[0, 2]", &format!("{:02X?}", &self.header_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketServerEntryAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("header(short as i16)[0, 2]: {}", &self.header));
        fields.push(format!("aid(int as i32)[2, 6]: {}", &self.aid));
        write!(f, "PacketServerEntryAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzContactnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzContactnpc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzContactnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        write!(f, "PacketCzContactnpc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcackMapmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackMapmove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("map_name[2, 18]", &format!("{:02X?}", &self.map_name_raw))
            .field("x_pos[18, 20]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[20, 22]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketZcNpcackMapmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("map_name(char[] as char[])[2, 18]: {}", &self.map_name.pretty_output()));
        fields.push(format!("x_pos(short as i16)[18, 20]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[20, 22]: {}", &self.y_pos));
        write!(f, "PacketZcNpcackMapmove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcackServermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackServermove")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("map_name[2, 18]", &format!("{:02X?}", &self.map_name_raw))
            .field("x_pos[18, 20]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[20, 22]", &format!("{:02X?}", &self.y_pos_raw))
            .field("addr[22, ?]", &format!("{:02X?}", &self.addr_raw))
        .finish()
    }
}

impl Display for PacketZcNpcackServermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("map_name(char[] as char[])[2, 18]: {}", &self.map_name.pretty_output()));
        fields.push(format!("x_pos(short as i16)[18, 20]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[20, 22]: {}", &self.y_pos));
        fields.push(format!("addr(struct as Struct)[22, ?]: {}", &self.addr));
        write!(f, "PacketZcNpcackServermove\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcackEnable {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackEnable")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcNpcackEnable {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcNpcackEnable\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("cname[6, 30]", &format!("{:02X?}", &self.cname_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("cname(char[] as char[])[6, 30]: {}", &self.cname.pretty_output()));
        write!(f, "PacketZcAckReqname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzWhisper")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("receiver[4, 28]", &format!("{:02X?}", &self.receiver_raw))
            .field("msg[28, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("receiver(char[] as char[])[4, 28]: {}", &self.receiver.pretty_output()));
        fields.push(format!("msg(char[] as String)[28, ?]: {}", &self.msg));
        write!(f, "PacketCzWhisper\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWhisper")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("sender[4, 28]", &format!("{:02X?}", &self.sender_raw))
            .field("msg[28, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("sender(char[] as char[])[4, 28]: {}", &self.sender.pretty_output()));
        fields.push(format!("msg(char[] as String)[28, ?]: {}", &self.msg));
        write!(f, "PacketZcWhisper\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckWhisper")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckWhisper\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBroadcast")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzBroadcast\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketZcBroadcast\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeDirection")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("head_dir[2, 4]", &format!("{:02X?}", &self.head_dir_raw))
            .field("dir[4, 5]", &format!("{:02X?}", &self.dir_raw))
        .finish()
    }
}

impl Display for PacketCzChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("head_dir(short as i16)[2, 4]: {}", &self.head_dir));
        fields.push(format!("dir(unsigned char as u8)[4, 5]: {}", &self.dir));
        write!(f, "PacketCzChangeDirection\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeDirection")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("head_dir[6, 8]", &format!("{:02X?}", &self.head_dir_raw))
            .field("dir[8, 9]", &format!("{:02X?}", &self.dir_raw))
        .finish()
    }
}

impl Display for PacketZcChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("head_dir(short as i16)[6, 8]: {}", &self.head_dir));
        fields.push(format!("dir(unsigned char as u8)[8, 9]: {}", &self.dir));
        write!(f, "PacketZcChangeDirection\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itaid[2, 6]", &format!("{:02X?}", &self.itaid_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("x_pos[9, 11]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[11, 13]", &format!("{:02X?}", &self.y_pos_raw))
            .field("count[13, 15]", &format!("{:02X?}", &self.count_raw))
            .field("sub_x[15, 16]", &format!("{:02X?}", &self.sub_x_raw))
            .field("sub_y[16, 17]", &format!("{:02X?}", &self.sub_y_raw))
        .finish()
    }
}

impl Display for PacketZcItemEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itaid(unsigned long as u32)[2, 6]: {}", &self.itaid));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("x_pos(short as i16)[9, 11]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[11, 13]: {}", &self.y_pos));
        fields.push(format!("count(short as i16)[13, 15]: {}", &self.count));
        fields.push(format!("sub_x(unsigned char as u8)[15, 16]: {}", &self.sub_x));
        fields.push(format!("sub_y(unsigned char as u8)[16, 17]: {}", &self.sub_y));
        write!(f, "PacketZcItemEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemFallEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemFallEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itaid[2, 6]", &format!("{:02X?}", &self.itaid_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("x_pos[9, 11]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[11, 13]", &format!("{:02X?}", &self.y_pos_raw))
            .field("sub_x[13, 14]", &format!("{:02X?}", &self.sub_x_raw))
            .field("sub_y[14, 15]", &format!("{:02X?}", &self.sub_y_raw))
            .field("count[15, 17]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcItemFallEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itaid(unsigned long as u32)[2, 6]: {}", &self.itaid));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("x_pos(short as i16)[9, 11]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[11, 13]: {}", &self.y_pos));
        fields.push(format!("sub_x(unsigned char as u8)[13, 14]: {}", &self.sub_x));
        fields.push(format!("sub_y(unsigned char as u8)[14, 15]: {}", &self.sub_y));
        fields.push(format!("count(short as i16)[15, 17]: {}", &self.count));
        write!(f, "PacketZcItemFallEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzItemPickup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemPickup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itaid[2, 6]", &format!("{:02X?}", &self.itaid_raw))
        .finish()
    }
}

impl Display for PacketCzItemPickup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itaid(unsigned long as u32)[2, 6]: {}", &self.itaid));
        write!(f, "PacketCzItemPickup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemPickupAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[9, 10]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[10, 11]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[11, 19]", &format!("{:02X?}", &self.slot_raw))
            .field("location[11, 13]", &format!("{:02X?}", &self.location_raw))
            .field("atype[13, 14]", &format!("{:02X?}", &self.atype_raw))
            .field("result[14, 15]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcItemPickupAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(unsigned short as u16)[4, 6]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[9, 10]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[10, 11]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[11, 19]: {}", &self.slot));
        fields.push(format!("location(unsigned short as u16)[11, 13]: {}", &self.location));
        fields.push(format!("atype(unsigned char as u8)[13, 14]: {}", &self.atype));
        fields.push(format!("result(unsigned char as u8)[14, 15]: {}", &self.result));
        write!(f, "PacketZcItemPickupAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemDisappear")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itaid[2, 6]", &format!("{:02X?}", &self.itaid_raw))
        .finish()
    }
}

impl Display for PacketZcItemDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itaid(unsigned long as u32)[2, 6]: {}", &self.itaid));
        write!(f, "PacketZcItemDisappear\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzItemThrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemThrow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzItemThrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketCzItemThrow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 14]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 14]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcNormalItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 24]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 24]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcEquipmentItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 14]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 14]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreNormalItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 24]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 24]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreEquipmentItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzUseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        write!(f, "PacketCzUseItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUseItemAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseItemAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcUseItemAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("result(bool as bool)[6, 7]: {}", &self.result));
        write!(f, "PacketZcUseItemAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqWearEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWearEquip")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("wear_location[4, 6]", &format!("{:02X?}", &self.wear_location_raw))
        .finish()
    }
}

impl Display for PacketCzReqWearEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("wear_location(unsigned short as u16)[4, 6]: {}", &self.wear_location));
        write!(f, "PacketCzReqWearEquip\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqWearEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqWearEquipAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("wear_location[4, 6]", &format!("{:02X?}", &self.wear_location_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcReqWearEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("wear_location(unsigned short as u16)[4, 6]: {}", &self.wear_location));
        fields.push(format!("result(unsigned char as u8)[6, 7]: {}", &self.result));
        write!(f, "PacketZcReqWearEquipAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqWearEquipAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqWearEquipAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("wear_location[4, 6]", &format!("{:02X?}", &self.wear_location_raw))
            .field("view_id[6, 8]", &format!("{:02X?}", &self.view_id_raw))
            .field("result[8, 9]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcReqWearEquipAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("wear_location(unsigned short as u16)[4, 6]: {}", &self.wear_location));
        fields.push(format!("view_id(unsigned short as u16)[6, 8]: {}", &self.view_id));
        fields.push(format!("result(unsigned char as u8)[8, 9]: {}", &self.result));
        write!(f, "PacketZcReqWearEquipAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqTakeoffEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqTakeoffEquip")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketCzReqTakeoffEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        write!(f, "PacketCzReqTakeoffEquip\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqTakeoffEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqTakeoffEquipAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("wear_location[4, 6]", &format!("{:02X?}", &self.wear_location_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcReqTakeoffEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("wear_location(unsigned short as u16)[4, 6]: {}", &self.wear_location));
        fields.push(format!("result(unsigned char as u8)[6, 7]: {}", &self.result));
        write!(f, "PacketZcReqTakeoffEquipAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqTakeoffEquipAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqTakeoffEquipAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("wear_location[4, 6]", &format!("{:02X?}", &self.wear_location_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcReqTakeoffEquipAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("wear_location(unsigned short as u16)[4, 6]: {}", &self.wear_location));
        fields.push(format!("result(unsigned char as u8)[6, 7]: {}", &self.result));
        write!(f, "PacketZcReqTakeoffEquipAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemThrowAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemThrowAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcItemThrowAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketZcItemThrowAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcParChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var_id[2, 4]", &format!("{:02X?}", &self.var_id_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var_id(unsigned short as u16)[2, 4]: {}", &self.var_id));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketZcParChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcLongparChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcLongparChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var_id[2, 4]", &format!("{:02X?}", &self.var_id_raw))
            .field("amount[4, 8]", &format!("{:02X?}", &self.amount_raw))
        .finish()
    }
}

impl Display for PacketZcLongparChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var_id(unsigned short as u16)[2, 4]: {}", &self.var_id));
        fields.push(format!("amount(int as i32)[4, 8]: {}", &self.amount));
        write!(f, "PacketZcLongparChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRestart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRestart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzRestart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        write!(f, "PacketCzRestart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRestartAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRestartAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcRestartAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        write!(f, "PacketZcRestartAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSayDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSayDialog")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("naid[4, 8]", &format!("{:02X?}", &self.naid_raw))
            .field("msg[8, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcSayDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("naid(unsigned long as u32)[4, 8]: {}", &self.naid));
        fields.push(format!("msg(char[] as String)[8, ?]: {}", &self.msg));
        write!(f, "PacketZcSayDialog\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcWaitDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWaitDialog")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcWaitDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketZcWaitDialog\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCloseDialog")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketZcCloseDialog\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMenuList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMenuList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("naid[4, 8]", &format!("{:02X?}", &self.naid_raw))
            .field("msg[8, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcMenuList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("naid(unsigned long as u32)[4, 8]: {}", &self.naid));
        fields.push(format!("msg(char[] as String)[8, ?]: {}", &self.msg));
        write!(f, "PacketZcMenuList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChooseMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChooseMenu")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
            .field("num[6, 7]", &format!("{:02X?}", &self.num_raw))
        .finish()
    }
}

impl Display for PacketCzChooseMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        fields.push(format!("num(unsigned char as u8)[6, 7]: {}", &self.num));
        write!(f, "PacketCzChooseMenu\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqNextScript {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqNextScript")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketCzReqNextScript {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketCzReqNextScript\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqStatus")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqStatus\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzStatusChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("status_id[2, 4]", &format!("{:02X?}", &self.status_id_raw))
            .field("change_amount[4, 5]", &format!("{:02X?}", &self.change_amount_raw))
        .finish()
    }
}

impl Display for PacketCzStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("status_id(unsigned short as u16)[2, 4]: {}", &self.status_id));
        fields.push(format!("change_amount(unsigned char as u8)[4, 5]: {}", &self.change_amount));
        write!(f, "PacketCzStatusChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStatusChangeAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatusChangeAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("status_id[2, 4]", &format!("{:02X?}", &self.status_id_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
            .field("value[5, 6]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcStatusChangeAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("status_id(unsigned short as u16)[2, 4]: {}", &self.status_id));
        fields.push(format!("result(bool as bool)[4, 5]: {}", &self.result));
        fields.push(format!("value(unsigned char as u8)[5, 6]: {}", &self.value));
        write!(f, "PacketZcStatusChangeAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatus")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point[2, 4]", &format!("{:02X?}", &self.point_raw))
            .field("str[4, 5]", &format!("{:02X?}", &self.str_raw))
            .field("standard_str[5, 6]", &format!("{:02X?}", &self.standard_str_raw))
            .field("agi[6, 7]", &format!("{:02X?}", &self.agi_raw))
            .field("standard_agi[7, 8]", &format!("{:02X?}", &self.standard_agi_raw))
            .field("vit[8, 9]", &format!("{:02X?}", &self.vit_raw))
            .field("standard_vit[9, 10]", &format!("{:02X?}", &self.standard_vit_raw))
            .field("int[10, 11]", &format!("{:02X?}", &self.int_raw))
            .field("standard_int[11, 12]", &format!("{:02X?}", &self.standard_int_raw))
            .field("dex[12, 13]", &format!("{:02X?}", &self.dex_raw))
            .field("standard_dex[13, 14]", &format!("{:02X?}", &self.standard_dex_raw))
            .field("luk[14, 15]", &format!("{:02X?}", &self.luk_raw))
            .field("standard_luk[15, 16]", &format!("{:02X?}", &self.standard_luk_raw))
            .field("att_power[16, 18]", &format!("{:02X?}", &self.att_power_raw))
            .field("refining_power[18, 20]", &format!("{:02X?}", &self.refining_power_raw))
            .field("max_matt_power[20, 22]", &format!("{:02X?}", &self.max_matt_power_raw))
            .field("min_matt_power[22, 24]", &format!("{:02X?}", &self.min_matt_power_raw))
            .field("itemdef_power[24, 26]", &format!("{:02X?}", &self.itemdef_power_raw))
            .field("plusdef_power[26, 28]", &format!("{:02X?}", &self.plusdef_power_raw))
            .field("mdef_power[28, 30]", &format!("{:02X?}", &self.mdef_power_raw))
            .field("plusmdef_power[30, 32]", &format!("{:02X?}", &self.plusmdef_power_raw))
            .field("hit_success_value[32, 34]", &format!("{:02X?}", &self.hit_success_value_raw))
            .field("avoid_success_value[34, 36]", &format!("{:02X?}", &self.avoid_success_value_raw))
            .field("plus_avoid_success_value[36, 38]", &format!("{:02X?}", &self.plus_avoid_success_value_raw))
            .field("critical_success_value[38, 40]", &format!("{:02X?}", &self.critical_success_value_raw))
            .field("aspd[40, 42]", &format!("{:02X?}", &self.aspd_raw))
            .field("plus_aspd[42, 44]", &format!("{:02X?}", &self.plus_aspd_raw))
        .finish()
    }
}

impl Display for PacketZcStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point(short as i16)[2, 4]: {}", &self.point));
        fields.push(format!("str(unsigned char as u8)[4, 5]: {}", &self.str));
        fields.push(format!("standard_str(unsigned char as u8)[5, 6]: {}", &self.standard_str));
        fields.push(format!("agi(unsigned char as u8)[6, 7]: {}", &self.agi));
        fields.push(format!("standard_agi(unsigned char as u8)[7, 8]: {}", &self.standard_agi));
        fields.push(format!("vit(unsigned char as u8)[8, 9]: {}", &self.vit));
        fields.push(format!("standard_vit(unsigned char as u8)[9, 10]: {}", &self.standard_vit));
        fields.push(format!("int(unsigned char as u8)[10, 11]: {}", &self.int));
        fields.push(format!("standard_int(unsigned char as u8)[11, 12]: {}", &self.standard_int));
        fields.push(format!("dex(unsigned char as u8)[12, 13]: {}", &self.dex));
        fields.push(format!("standard_dex(unsigned char as u8)[13, 14]: {}", &self.standard_dex));
        fields.push(format!("luk(unsigned char as u8)[14, 15]: {}", &self.luk));
        fields.push(format!("standard_luk(unsigned char as u8)[15, 16]: {}", &self.standard_luk));
        fields.push(format!("att_power(short as i16)[16, 18]: {}", &self.att_power));
        fields.push(format!("refining_power(short as i16)[18, 20]: {}", &self.refining_power));
        fields.push(format!("max_matt_power(short as i16)[20, 22]: {}", &self.max_matt_power));
        fields.push(format!("min_matt_power(short as i16)[22, 24]: {}", &self.min_matt_power));
        fields.push(format!("itemdef_power(short as i16)[24, 26]: {}", &self.itemdef_power));
        fields.push(format!("plusdef_power(short as i16)[26, 28]: {}", &self.plusdef_power));
        fields.push(format!("mdef_power(short as i16)[28, 30]: {}", &self.mdef_power));
        fields.push(format!("plusmdef_power(short as i16)[30, 32]: {}", &self.plusmdef_power));
        fields.push(format!("hit_success_value(short as i16)[32, 34]: {}", &self.hit_success_value));
        fields.push(format!("avoid_success_value(short as i16)[34, 36]: {}", &self.avoid_success_value));
        fields.push(format!("plus_avoid_success_value(short as i16)[36, 38]: {}", &self.plus_avoid_success_value));
        fields.push(format!("critical_success_value(short as i16)[38, 40]: {}", &self.critical_success_value));
        fields.push(format!("aspd(short as i16)[40, 42]: {}", &self.aspd));
        fields.push(format!("plus_aspd(short as i16)[42, 44]: {}", &self.plus_aspd));
        write!(f, "PacketZcStatus\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatusChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("status_id[2, 4]", &format!("{:02X?}", &self.status_id_raw))
            .field("value[4, 5]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("status_id(unsigned short as u16)[2, 4]: {}", &self.status_id));
        fields.push(format!("value(unsigned char as u8)[4, 5]: {}", &self.value));
        write!(f, "PacketZcStatusChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqEmotion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzReqEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        write!(f, "PacketCzReqEmotion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEmotion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        write!(f, "PacketZcEmotion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqUserCount")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqUserCount\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUserCount")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("count[2, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("count(int as i32)[2, 6]: {}", &self.count));
        write!(f, "PacketZcUserCount\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpriteChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("value[7, 8]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("value(unsigned char as u8)[7, 8]: {}", &self.value));
        write!(f, "PacketZcSpriteChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSelectDealtype")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketZcSelectDealtype\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckSelectDealtype")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzAckSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        write!(f, "PacketCzAckSelectDealtype\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 15]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 15]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcPurchaseItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcSellItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 14]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 14]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcSellItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 8]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 8]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzPcPurchaseItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcSellItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 8]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 8]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzPcSellItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcPcPurchaseResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcSellResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcSellResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcPcSellResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcPcSellResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDisconnectCharacter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzDisconnectCharacter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisconnectCharacter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckDisconnectCharacter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzDisconnectAllCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDisconnectAllCharacter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzDisconnectAllCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzDisconnectAllCharacter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSettingWhisperPc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("atype[26, 27]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("atype(unsigned char as u8)[26, 27]: {}", &self.atype));
        write!(f, "PacketCzSettingWhisperPc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSettingWhisperState")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        write!(f, "PacketCzSettingWhisperState\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSettingWhisperPc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("result[3, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        fields.push(format!("result(unsigned char as u8)[3, 4]: {}", &self.result));
        write!(f, "PacketZcSettingWhisperPc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSettingWhisperState")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("result[3, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        fields.push(format!("result(unsigned char as u8)[3, 4]: {}", &self.result));
        write!(f, "PacketZcSettingWhisperState\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWhisperList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqWhisperList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWhisperList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("wisper_list[4, 28]", &format!("{:02X?}", &self.wisper_list_raw))
        .finish()
    }
}

impl Display for PacketZcWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("wisper_list([] as Vec)[4, 28]: {}", &self.wisper_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcWhisperList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCreateChatroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("size[4, 6]", &format!("{:02X?}", &self.size_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("passwd[7, 15]", &format!("{:02X?}", &self.passwd_raw))
            .field("title[15, ?]", &format!("{:02X?}", &self.title_raw))
        .finish()
    }
}

impl Display for PacketCzCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("size(short as i16)[4, 6]: {}", &self.size));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("passwd(char[] as char[])[7, 15]: {}", &self.passwd.pretty_output()));
        fields.push(format!("title(char[] as String)[15, ?]: {}", &self.title));
        write!(f, "PacketCzCreateChatroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckCreateChatroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckCreateChatroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRoomNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRoomNewentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("room_id[8, 12]", &format!("{:02X?}", &self.room_id_raw))
            .field("maxcount[12, 14]", &format!("{:02X?}", &self.maxcount_raw))
            .field("curcount[14, 16]", &format!("{:02X?}", &self.curcount_raw))
            .field("atype[16, 17]", &format!("{:02X?}", &self.atype_raw))
            .field("title[17, ?]", &format!("{:02X?}", &self.title_raw))
        .finish()
    }
}

impl Display for PacketZcRoomNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("room_id(unsigned long as u32)[8, 12]: {}", &self.room_id));
        fields.push(format!("maxcount(short as i16)[12, 14]: {}", &self.maxcount));
        fields.push(format!("curcount(short as i16)[14, 16]: {}", &self.curcount));
        fields.push(format!("atype(unsigned char as u8)[16, 17]: {}", &self.atype));
        fields.push(format!("title(char[] as String)[17, ?]: {}", &self.title));
        write!(f, "PacketZcRoomNewentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDestroyRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDestroyRoom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("room_id[2, 6]", &format!("{:02X?}", &self.room_id_raw))
        .finish()
    }
}

impl Display for PacketZcDestroyRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("room_id(unsigned long as u32)[2, 6]: {}", &self.room_id));
        write!(f, "PacketZcDestroyRoom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqEnterRoom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("room_id[2, 6]", &format!("{:02X?}", &self.room_id_raw))
            .field("passwd[6, 14]", &format!("{:02X?}", &self.passwd_raw))
        .finish()
    }
}

impl Display for PacketCzReqEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("room_id(unsigned long as u32)[2, 6]: {}", &self.room_id));
        fields.push(format!("passwd(char[] as char[])[6, 14]: {}", &self.passwd.pretty_output()));
        write!(f, "PacketCzReqEnterRoom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRefuseEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseEnterRoom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcRefuseEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcRefuseEnterRoom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEnterRoom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("room_id[4, 8]", &format!("{:02X?}", &self.room_id_raw))
            .field("member_list[8, 36]", &format!("{:02X?}", &self.member_list_raw))
        .finish()
    }
}

impl Display for PacketZcEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("room_id(unsigned long as u32)[4, 8]: {}", &self.room_id));
        fields.push(format!("member_list([] as Vec)[8, 36]: {}", &self.member_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcEnterRoom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemberNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberNewentry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("curcount[2, 4]", &format!("{:02X?}", &self.curcount_raw))
            .field("name[4, 28]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcMemberNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("curcount(short as i16)[2, 4]: {}", &self.curcount));
        fields.push(format!("name(char[] as char[])[4, 28]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcMemberNewentry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemberExit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberExit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("curcount[2, 4]", &format!("{:02X?}", &self.curcount_raw))
            .field("name[4, 28]", &format!("{:02X?}", &self.name_raw))
            .field("atype[28, 29]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcMemberExit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("curcount(short as i16)[2, 4]: {}", &self.curcount));
        fields.push(format!("name(char[] as char[])[4, 28]: {}", &self.name.pretty_output()));
        fields.push(format!("atype(unsigned char as u8)[28, 29]: {}", &self.atype));
        write!(f, "PacketZcMemberExit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeChatroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("size[4, 6]", &format!("{:02X?}", &self.size_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("passwd[7, 15]", &format!("{:02X?}", &self.passwd_raw))
            .field("title[15, ?]", &format!("{:02X?}", &self.title_raw))
        .finish()
    }
}

impl Display for PacketCzChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("size(short as i16)[4, 6]: {}", &self.size));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("passwd(char[] as char[])[7, 15]: {}", &self.passwd.pretty_output()));
        fields.push(format!("title(char[] as String)[15, ?]: {}", &self.title));
        write!(f, "PacketCzChangeChatroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeChatroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("room_id[8, 12]", &format!("{:02X?}", &self.room_id_raw))
            .field("maxcount[12, 14]", &format!("{:02X?}", &self.maxcount_raw))
            .field("curcount[14, 16]", &format!("{:02X?}", &self.curcount_raw))
            .field("atype[16, 17]", &format!("{:02X?}", &self.atype_raw))
            .field("title[17, ?]", &format!("{:02X?}", &self.title_raw))
        .finish()
    }
}

impl Display for PacketZcChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("room_id(unsigned long as u32)[8, 12]: {}", &self.room_id));
        fields.push(format!("maxcount(short as i16)[12, 14]: {}", &self.maxcount));
        fields.push(format!("curcount(short as i16)[14, 16]: {}", &self.curcount));
        fields.push(format!("atype(unsigned char as u8)[16, 17]: {}", &self.atype));
        fields.push(format!("title(char[] as String)[17, ?]: {}", &self.title));
        write!(f, "PacketZcChangeChatroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqRoleChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("role[2, 6]", &format!("{:02X?}", &self.role_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketCzReqRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("role(unsigned long as u32)[2, 6]: {}", &self.role));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        write!(f, "PacketCzReqRoleChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRoleChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("role[2, 6]", &format!("{:02X?}", &self.role_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("role(unsigned long as u32)[2, 6]: {}", &self.role));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcRoleChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqExpelMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExpelMember")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketCzReqExpelMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        write!(f, "PacketCzReqExpelMember\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzExitRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExitRoom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzExitRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzExitRoom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcReqExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketCzAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketCzAckExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAddExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzAddExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("count[2, 6]", &format!("{:02X?}", &self.count_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[9, 10]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[10, 11]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[11, 19]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("count(int as i32)[2, 6]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[9, 10]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[10, 11]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[11, 19]: {}", &self.slot));
        write!(f, "PacketZcAddExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAddExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketZcAckAddExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzConcludeExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzConcludeExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConcludeExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("who[2, 3]", &format!("{:02X?}", &self.who_raw))
        .finish()
    }
}

impl Display for PacketZcConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("who(unsigned char as u8)[2, 3]: {}", &self.who));
        write!(f, "PacketZcConcludeExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCancelExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCancelExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcCancelExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExecExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzExecExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcExecExchangeItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcExecExchangeItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcExchangeitemUndo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcExchangeitemUndo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcExchangeitemUndo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcExchangeitemUndo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStoreitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStoreitemCountinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("cur_count[2, 4]", &format!("{:02X?}", &self.cur_count_raw))
            .field("max_count[4, 6]", &format!("{:02X?}", &self.max_count_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStoreitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("cur_count(short as i16)[2, 4]: {}", &self.cur_count));
        fields.push(format!("max_count(short as i16)[4, 6]: {}", &self.max_count));
        write!(f, "PacketZcNotifyStoreitemCountinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPlayerChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPlayerChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzPlayerChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzPlayerChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddItemToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
            .field("itid[8, 10]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[10, 11]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[11, 12]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[12, 13]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[13, 21]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddItemToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[8, 10]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[10, 11]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[11, 12]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[12, 13]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[13, 21]: {}", &self.slot));
        write!(f, "PacketZcAddItemToStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMoveItemFromStoreToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromStoreToBody")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMoveItemFromStoreToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMoveItemFromStoreToBody\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteItemFromStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteItemFromStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketZcDeleteItemFromStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCloseStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCloseStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcCloseStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMakeGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("group_name[2, 26]", &format!("{:02X?}", &self.group_name_raw))
        .finish()
    }
}

impl Display for PacketCzMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("group_name(char[] as char[])[2, 26]: {}", &self.group_name.pretty_output()));
        write!(f, "PacketCzMakeGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMakeGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckMakeGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGroupList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGroupList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("group_name[4, 28]", &format!("{:02X?}", &self.group_name_raw))
            .field("group_info[28, 74]", &format!("{:02X?}", &self.group_info_raw))
        .finish()
    }
}

impl Display for PacketZcGroupList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("group_name(char[] as char[])[4, 28]: {}", &self.group_name.pretty_output()));
        fields.push(format!("group_info([] as Vec)[28, 74]: {}", &self.group_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcGroupList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqJoinGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqJoinGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("character_name[2, 26]", &format!("{:02X?}", &self.character_name_raw))
            .field("answer[26, 27]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("character_name(char[] as char[])[2, 26]: {}", &self.character_name.pretty_output()));
        fields.push(format!("answer(unsigned char as u8)[26, 27]: {}", &self.answer));
        write!(f, "PacketZcAckReqJoinGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqJoinGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("grid[2, 6]", &format!("{:02X?}", &self.grid_raw))
            .field("group_name[6, 30]", &format!("{:02X?}", &self.group_name_raw))
        .finish()
    }
}

impl Display for PacketZcReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("grid(unsigned long as u32)[2, 6]: {}", &self.grid));
        fields.push(format!("group_name(char[] as char[])[6, 30]: {}", &self.group_name.pretty_output()));
        write!(f, "PacketZcReqJoinGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("grid[2, 6]", &format!("{:02X?}", &self.grid_raw))
            .field("answer[6, 10]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketCzJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("grid(unsigned long as u32)[2, 6]: {}", &self.grid));
        fields.push(format!("answer(int as i32)[6, 10]: {}", &self.answer));
        write!(f, "PacketCzJoinGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqLeaveGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqLeaveGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqLeaveGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqLeaveGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGroupinfoChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGroupinfoChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp_option[2, 6]", &format!("{:02X?}", &self.exp_option_raw))
        .finish()
    }
}

impl Display for PacketZcGroupinfoChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp_option(unsigned long as u32)[2, 6]: {}", &self.exp_option));
        write!(f, "PacketZcGroupinfoChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeGroupexpoption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeGroupexpoption")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp_option[2, 6]", &format!("{:02X?}", &self.exp_option_raw))
        .finish()
    }
}

impl Display for PacketCzChangeGroupexpoption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp_option(unsigned long as u32)[2, 6]: {}", &self.exp_option));
        write!(f, "PacketCzChangeGroupexpoption\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqExpelGroupMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExpelGroupMember")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("character_name[6, 30]", &format!("{:02X?}", &self.character_name_raw))
        .finish()
    }
}

impl Display for PacketCzReqExpelGroupMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("character_name(char[] as char[])[6, 30]: {}", &self.character_name.pretty_output()));
        write!(f, "PacketCzReqExpelGroupMember\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddMemberToGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddMemberToGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("role[6, 10]", &format!("{:02X?}", &self.role_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("state[14, 15]", &format!("{:02X?}", &self.state_raw))
            .field("group_name[15, 39]", &format!("{:02X?}", &self.group_name_raw))
            .field("character_name[39, 63]", &format!("{:02X?}", &self.character_name_raw))
            .field("map_name[63, 79]", &format!("{:02X?}", &self.map_name_raw))
        .finish()
    }
}

impl Display for PacketZcAddMemberToGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("role(unsigned long as u32)[6, 10]: {}", &self.role));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("state(unsigned char as u8)[14, 15]: {}", &self.state));
        fields.push(format!("group_name(char[] as char[])[15, 39]: {}", &self.group_name.pretty_output()));
        fields.push(format!("character_name(char[] as char[])[39, 63]: {}", &self.character_name.pretty_output()));
        fields.push(format!("map_name(char[] as char[])[63, 79]: {}", &self.map_name.pretty_output()));
        write!(f, "PacketZcAddMemberToGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteMemberFromGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteMemberFromGroup")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("character_name[6, 30]", &format!("{:02X?}", &self.character_name_raw))
            .field("result[30, 31]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteMemberFromGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("character_name(char[] as char[])[6, 30]: {}", &self.character_name.pretty_output()));
        fields.push(format!("result(unsigned char as u8)[30, 31]: {}", &self.result));
        write!(f, "PacketZcDeleteMemberFromGroup\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyHpToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyHpToGroupm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("hp[6, 8]", &format!("{:02X?}", &self.hp_raw))
            .field("maxhp[8, 10]", &format!("{:02X?}", &self.maxhp_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyHpToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("hp(short as i16)[6, 8]: {}", &self.hp));
        fields.push(format!("maxhp(short as i16)[8, 10]: {}", &self.maxhp));
        write!(f, "PacketZcNotifyHpToGroupm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPositionToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPositionToGroupm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPositionToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        write!(f, "PacketZcNotifyPositionToGroupm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestChatParty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzRequestChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzRequestChatParty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyChatParty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("msg[8, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("msg(char[] as String)[8, ?]: {}", &self.msg));
        write!(f, "PacketZcNotifyChatParty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMvpGettingItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvpGettingItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcMvpGettingItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        write!(f, "PacketZcMvpGettingItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMvpGettingSpecialExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvpGettingSpecialExp")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp[2, 6]", &format!("{:02X?}", &self.exp_raw))
        .finish()
    }
}

impl Display for PacketZcMvpGettingSpecialExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp(unsigned long as u32)[2, 6]: {}", &self.exp));
        write!(f, "PacketZcMvpGettingSpecialExp\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMvp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvp")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcMvp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcMvp\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcThrowMvpitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcThrowMvpitem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcThrowMvpitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcThrowMvpitem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("level[4, 6]", &format!("{:02X?}", &self.level_raw))
            .field("spcost[6, 8]", &format!("{:02X?}", &self.spcost_raw))
            .field("attack_range[8, 10]", &format!("{:02X?}", &self.attack_range_raw))
            .field("upgradable[10, 11]", &format!("{:02X?}", &self.upgradable_raw))
        .finish()
    }
}

impl Display for PacketZcSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("level(short as i16)[4, 6]: {}", &self.level));
        fields.push(format!("spcost(short as i16)[6, 8]: {}", &self.spcost));
        fields.push(format!("attack_range(short as i16)[8, 10]: {}", &self.attack_range));
        fields.push(format!("upgradable(bool as bool)[10, 11]: {}", &self.upgradable));
        write!(f, "PacketZcSkillinfoUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("skill_list[4, 41]", &format!("{:02X?}", &self.skill_list_raw))
        .finish()
    }
}

impl Display for PacketZcSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("skill_list([] as Vec)[4, 41]: {}", &self.skill_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcSkillinfoList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckTouseskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckTouseskill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("num[4, 8]", &format!("{:02X?}", &self.num_raw))
            .field("result[8, 9]", &format!("{:02X?}", &self.result_raw))
            .field("cause[9, 10]", &format!("{:02X?}", &self.cause_raw))
        .finish()
    }
}

impl Display for PacketZcAckTouseskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("num(unsigned long as u32)[4, 8]: {}", &self.num));
        fields.push(format!("result(bool as bool)[8, 9]: {}", &self.result));
        fields.push(format!("cause(unsigned char as u8)[9, 10]: {}", &self.cause));
        write!(f, "PacketZcAckTouseskill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("data[2, ?]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketZcAddSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("data(struct as Struct)[2, ?]: {}", &self.data));
        write!(f, "PacketZcAddSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUpgradeSkilllevel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for PacketCzUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        write!(f, "PacketCzUpgradeSkilllevel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("selected_level[2, 4]", &format!("{:02X?}", &self.selected_level_raw))
            .field("skid[4, 6]", &format!("{:02X?}", &self.skid_raw))
            .field("target_id[6, 10]", &format!("{:02X?}", &self.target_id_raw))
        .finish()
    }
}

impl Display for PacketCzUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("selected_level(short as i16)[2, 4]: {}", &self.selected_level));
        fields.push(format!("skid(unsigned short as u16)[4, 6]: {}", &self.skid));
        fields.push(format!("target_id(unsigned long as u32)[6, 10]: {}", &self.target_id));
        write!(f, "PacketCzUseSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifySkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("target_id[8, 12]", &format!("{:02X?}", &self.target_id_raw))
            .field("start_time[12, 16]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[16, 20]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[20, 24]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("damage[24, 26]", &format!("{:02X?}", &self.damage_raw))
            .field("level[26, 28]", &format!("{:02X?}", &self.level_raw))
            .field("count[28, 30]", &format!("{:02X?}", &self.count_raw))
            .field("action[30, 31]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketZcNotifySkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("target_id(unsigned long as u32)[8, 12]: {}", &self.target_id));
        fields.push(format!("start_time(unsigned long as u32)[12, 16]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[16, 20]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[20, 24]: {}", &self.attacked_mt));
        fields.push(format!("damage(short as i16)[24, 26]: {}", &self.damage));
        fields.push(format!("level(short as i16)[26, 28]: {}", &self.level));
        fields.push(format!("count(short as i16)[28, 30]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[30, 31]: {}", &self.action));
        write!(f, "PacketZcNotifySkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifySkillPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkillPosition")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("target_id[8, 12]", &format!("{:02X?}", &self.target_id_raw))
            .field("start_time[12, 16]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[16, 20]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[20, 24]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("x_pos[24, 26]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[26, 28]", &format!("{:02X?}", &self.y_pos_raw))
            .field("damage[28, 30]", &format!("{:02X?}", &self.damage_raw))
            .field("level[30, 32]", &format!("{:02X?}", &self.level_raw))
            .field("count[32, 34]", &format!("{:02X?}", &self.count_raw))
            .field("action[34, 35]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketZcNotifySkillPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("target_id(unsigned long as u32)[8, 12]: {}", &self.target_id));
        fields.push(format!("start_time(unsigned long as u32)[12, 16]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[16, 20]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[20, 24]: {}", &self.attacked_mt));
        fields.push(format!("x_pos(short as i16)[24, 26]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[26, 28]: {}", &self.y_pos));
        fields.push(format!("damage(short as i16)[28, 30]: {}", &self.damage));
        fields.push(format!("level(short as i16)[30, 32]: {}", &self.level));
        fields.push(format!("count(short as i16)[32, 34]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[34, 35]: {}", &self.action));
        write!(f, "PacketZcNotifySkillPosition\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseSkillToground {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkillToground")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("selected_level[2, 4]", &format!("{:02X?}", &self.selected_level_raw))
            .field("skid[4, 6]", &format!("{:02X?}", &self.skid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketCzUseSkillToground {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("selected_level(short as i16)[2, 4]: {}", &self.selected_level));
        fields.push(format!("skid(unsigned short as u16)[4, 6]: {}", &self.skid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        write!(f, "PacketCzUseSkillToground\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyGroundskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyGroundskill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("level[8, 10]", &format!("{:02X?}", &self.level_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("start_time[14, 18]", &format!("{:02X?}", &self.start_time_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyGroundskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("level(short as i16)[8, 10]: {}", &self.level));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("start_time(unsigned long as u32)[14, 18]: {}", &self.start_time));
        write!(f, "PacketZcNotifyGroundskill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCancelLockon {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelLockon")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCancelLockon {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCancelLockon\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStateChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("body_state[6, 8]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[8, 10]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[10, 12]", &format!("{:02X?}", &self.effect_state_raw))
            .field("is_pkmode_on[12, 13]", &format!("{:02X?}", &self.is_pkmode_on_raw))
        .finish()
    }
}

impl Display for PacketZcStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("body_state(short as i16)[6, 8]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[8, 10]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[10, 12]: {}", &self.effect_state));
        fields.push(format!("is_pkmode_on(bool as bool)[12, 13]: {}", &self.is_pkmode_on));
        write!(f, "PacketZcStateChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("level[4, 6]", &format!("{:02X?}", &self.level_raw))
            .field("target_aid[6, 10]", &format!("{:02X?}", &self.target_aid_raw))
            .field("src_aid[10, 14]", &format!("{:02X?}", &self.src_aid_raw))
            .field("result[14, 15]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("level(short as i16)[4, 6]: {}", &self.level));
        fields.push(format!("target_aid(unsigned long as u32)[6, 10]: {}", &self.target_aid));
        fields.push(format!("src_aid(unsigned long as u32)[10, 14]: {}", &self.src_aid));
        fields.push(format!("result(bool as bool)[14, 15]: {}", &self.result));
        write!(f, "PacketZcUseSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSelectWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectWarppoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("map_name[4, 20]", &format!("{:02X?}", &self.map_name_raw))
        .finish()
    }
}

impl Display for PacketCzSelectWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("map_name(char[] as char[])[4, 20]: {}", &self.map_name.pretty_output()));
        write!(f, "PacketCzSelectWarppoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcWarplist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWarplist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("map_name[4, 8]", &format!("{:02X?}", &self.map_name_raw))
        .finish()
    }
}

impl Display for PacketZcWarplist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("map_name(char[] as char[])[4, 8]: {}", &self.map_name.pretty_output()));
        write!(f, "PacketZcWarplist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRememberWarppoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzRememberWarppoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckRememberWarppoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketZcAckRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketZcAckRememberWarppoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("creator_aid[6, 10]", &format!("{:02X?}", &self.creator_aid_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("job[14, 15]", &format!("{:02X?}", &self.job_raw))
            .field("is_visible[15, 16]", &format!("{:02X?}", &self.is_visible_raw))
        .finish()
    }
}

impl Display for PacketZcSkillEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("creator_aid(unsigned long as u32)[6, 10]: {}", &self.creator_aid));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("job(unsigned char as u8)[14, 15]: {}", &self.job));
        fields.push(format!("is_visible(bool as bool)[15, 16]: {}", &self.is_visible));
        write!(f, "PacketZcSkillEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillDisappear")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcSkillDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcSkillDisappear\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyCartitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyCartitemCountinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("cur_count[2, 4]", &format!("{:02X?}", &self.cur_count_raw))
            .field("max_count[4, 6]", &format!("{:02X?}", &self.max_count_raw))
            .field("cur_weight[6, 10]", &format!("{:02X?}", &self.cur_weight_raw))
            .field("max_weight[10, 14]", &format!("{:02X?}", &self.max_weight_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyCartitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("cur_count(short as i16)[2, 4]: {}", &self.cur_count));
        fields.push(format!("max_count(short as i16)[4, 6]: {}", &self.max_count));
        fields.push(format!("cur_weight(int as i32)[6, 10]: {}", &self.cur_weight));
        fields.push(format!("max_weight(int as i32)[10, 14]: {}", &self.max_weight));
        write!(f, "PacketZcNotifyCartitemCountinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 24]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 24]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartEquipmentItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 14]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 14]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartNormalItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddItemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToCart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
            .field("itid[8, 10]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[10, 11]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[11, 12]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[12, 13]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[13, 21]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddItemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[8, 10]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[10, 11]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[11, 12]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[12, 13]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[13, 21]: {}", &self.slot));
        write!(f, "PacketZcAddItemToCart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteItemFromCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromCart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteItemFromCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketZcDeleteItemFromCart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMoveItemFromBodyToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromBodyToCart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMoveItemFromBodyToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMoveItemFromBodyToCart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMoveItemFromCartToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromCartToBody")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMoveItemFromCartToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMoveItemFromCartToBody\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMoveItemFromStoreToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromStoreToCart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMoveItemFromStoreToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMoveItemFromStoreToCart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMoveItemFromCartToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromCartToStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMoveItemFromCartToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMoveItemFromCartToStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqCartoff")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqCartoff\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartoff")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcCartoff\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckAdditemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAdditemToCart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckAdditemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckAdditemToCart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenstore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itemcount[2, 4]", &format!("{:02X?}", &self.itemcount_raw))
        .finish()
    }
}

impl Display for PacketZcOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itemcount(short as i16)[2, 4]: {}", &self.itemcount));
        write!(f, "PacketZcOpenstore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqClosestore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqClosestore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqClosestore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqClosestore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenstore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("store_name[4, 84]", &format!("{:02X?}", &self.store_name_raw))
            .field("store_list[84, 92]", &format!("{:02X?}", &self.store_list_raw))
        .finish()
    }
}

impl Display for PacketCzReqOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("store_name(char[] as char[])[4, 84]: {}", &self.store_name.pretty_output()));
        fields.push(format!("store_list([] as Vec)[84, 92]: {}", &self.store_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzReqOpenstore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqBuyFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBuyFrommc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqBuyFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqBuyFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("maker_aid[2, 6]", &format!("{:02X?}", &self.maker_aid_raw))
            .field("store_name[6, 86]", &format!("{:02X?}", &self.store_name_raw))
        .finish()
    }
}

impl Display for PacketZcStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("maker_aid(unsigned long as u32)[2, 6]: {}", &self.maker_aid));
        fields.push(format!("store_name(char[] as char[])[6, 86]: {}", &self.store_name.pretty_output()));
        write!(f, "PacketZcStoreEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDisappearEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDisappearEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("maker_aid[2, 6]", &format!("{:02X?}", &self.maker_aid_raw))
        .finish()
    }
}

impl Display for PacketZcDisappearEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("maker_aid(unsigned long as u32)[2, 6]: {}", &self.maker_aid));
        write!(f, "PacketZcDisappearEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlistFrommc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("item_list[8, 30]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("item_list([] as Vec)[8, 30]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcPurchaseItemlistFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlistFrommc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("item_list[8, 12]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("item_list([] as Vec)[8, 12]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzPcPurchaseItemlistFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseResultFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseResultFrommc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("curcount[4, 6]", &format!("{:02X?}", &self.curcount_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseResultFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("curcount(short as i16)[4, 6]: {}", &self.curcount));
        fields.push(format!("result(unsigned char as u8)[6, 7]: {}", &self.result));
        write!(f, "PacketZcPcPurchaseResultFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseMyitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseMyitemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("item_list[8, 30]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseMyitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("item_list([] as Vec)[8, 30]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcPurchaseMyitemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteitemFromMcstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteitemFromMcstore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteitemFromMcstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketZcDeleteitemFromMcstore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPkmodeChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPkmodeChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("is_turn_on[2, 3]", &format!("{:02X?}", &self.is_turn_on_raw))
        .finish()
    }
}

impl Display for PacketCzPkmodeChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("is_turn_on(bool as bool)[2, 3]: {}", &self.is_turn_on));
        write!(f, "PacketCzPkmodeChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAttackFailureForDistance {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAttackFailureForDistance")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("target_aid[2, 6]", &format!("{:02X?}", &self.target_aid_raw))
            .field("target_xpos[6, 8]", &format!("{:02X?}", &self.target_xpos_raw))
            .field("target_ypos[8, 10]", &format!("{:02X?}", &self.target_ypos_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("current_att_range[14, 16]", &format!("{:02X?}", &self.current_att_range_raw))
        .finish()
    }
}

impl Display for PacketZcAttackFailureForDistance {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("target_aid(unsigned long as u32)[2, 6]: {}", &self.target_aid));
        fields.push(format!("target_xpos(short as i16)[6, 8]: {}", &self.target_xpos));
        fields.push(format!("target_ypos(short as i16)[8, 10]: {}", &self.target_ypos));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("current_att_range(short as i16)[14, 16]: {}", &self.current_att_range));
        write!(f, "PacketZcAttackFailureForDistance\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAttackRange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAttackRange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("current_att_range[2, 4]", &format!("{:02X?}", &self.current_att_range_raw))
        .finish()
    }
}

impl Display for PacketZcAttackRange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("current_att_range(short as i16)[2, 4]: {}", &self.current_att_range));
        write!(f, "PacketZcAttackRange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcActionFailure {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcActionFailure")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketZcActionFailure {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketZcActionFailure\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipArrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipArrow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketZcEquipArrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        write!(f, "PacketZcEquipArrow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRecovery {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRecovery")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var_id[2, 4]", &format!("{:02X?}", &self.var_id_raw))
            .field("amount[4, 6]", &format!("{:02X?}", &self.amount_raw))
        .finish()
    }
}

impl Display for PacketZcRecovery {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var_id(short as i16)[2, 4]: {}", &self.var_id));
        fields.push(format!("amount(short as i16)[4, 6]: {}", &self.amount));
        write!(f, "PacketZcRecovery\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUseskillAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseskillAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("target_id[6, 10]", &format!("{:02X?}", &self.target_id_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("skid[14, 16]", &format!("{:02X?}", &self.skid_raw))
            .field("property[16, 20]", &format!("{:02X?}", &self.property_raw))
            .field("delay_time[20, 24]", &format!("{:02X?}", &self.delay_time_raw))
        .finish()
    }
}

impl Display for PacketZcUseskillAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("target_id(unsigned long as u32)[6, 10]: {}", &self.target_id));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("skid(unsigned short as u16)[14, 16]: {}", &self.skid));
        fields.push(format!("property(unsigned long as u32)[16, 20]: {}", &self.property));
        fields.push(format!("delay_time(unsigned long as u32)[20, 24]: {}", &self.delay_time));
        write!(f, "PacketZcUseskillAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzItemCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemCreate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("item_name[2, 26]", &format!("{:02X?}", &self.item_name_raw))
        .finish()
    }
}

impl Display for PacketCzItemCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("item_name(char[] as char[])[2, 26]: {}", &self.item_name.pretty_output()));
        write!(f, "PacketCzItemCreate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMovetoMap {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMovetoMap")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("map_name[2, 18]", &format!("{:02X?}", &self.map_name_raw))
            .field("x_pos[18, 20]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[20, 22]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketCzMovetoMap {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("map_name(char[] as char[])[2, 18]: {}", &self.map_name.pretty_output()));
        fields.push(format!("x_pos(short as i16)[18, 20]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[20, 22]: {}", &self.y_pos));
        write!(f, "PacketCzMovetoMap\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStatusValues {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatusValues")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("status_type[2, 6]", &format!("{:02X?}", &self.status_type_raw))
            .field("default_status[6, 10]", &format!("{:02X?}", &self.default_status_raw))
            .field("plus_status[10, 14]", &format!("{:02X?}", &self.plus_status_raw))
        .finish()
    }
}

impl Display for PacketZcStatusValues {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("status_type(unsigned long as u32)[2, 6]: {}", &self.status_type));
        fields.push(format!("default_status(int as i32)[6, 10]: {}", &self.default_status));
        fields.push(format!("plus_status(int as i32)[10, 14]: {}", &self.plus_status));
        write!(f, "PacketZcStatusValues\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOpenEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenEditdlg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcOpenEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketZcOpenEditdlg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzInputEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzInputEditdlg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
            .field("value[6, 10]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketCzInputEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        fields.push(format!("value(int as i32)[6, 10]: {}", &self.value));
        write!(f, "PacketCzInputEditdlg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCompass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCompass")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
            .field("atype[6, 10]", &format!("{:02X?}", &self.atype_raw))
            .field("x_pos[10, 14]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[14, 18]", &format!("{:02X?}", &self.y_pos_raw))
            .field("id[18, 19]", &format!("{:02X?}", &self.id_raw))
            .field("color[19, 23]", &format!("{:02X?}", &self.color_raw))
        .finish()
    }
}

impl Display for PacketZcCompass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        fields.push(format!("atype(int as i32)[6, 10]: {}", &self.atype));
        fields.push(format!("x_pos(int as i32)[10, 14]: {}", &self.x_pos));
        fields.push(format!("y_pos(int as i32)[14, 18]: {}", &self.y_pos));
        fields.push(format!("id(unsigned char as u8)[18, 19]: {}", &self.id));
        fields.push(format!("color(unsigned long as u32)[19, 23]: {}", &self.color));
        write!(f, "PacketZcCompass\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShowImage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowImage")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("image_name[2, 18]", &format!("{:02X?}", &self.image_name_raw))
            .field("atype[18, 19]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcShowImage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("image_name(char[] as char[])[2, 18]: {}", &self.image_name.pretty_output()));
        fields.push(format!("atype(unsigned char as u8)[18, 19]: {}", &self.atype));
        write!(f, "PacketZcShowImage\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseDialog")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketCzCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketCzCloseDialog\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAutorunSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAutorunSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("data[2, ?]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketZcAutorunSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("data(struct as Struct)[2, ?]: {}", &self.data));
        write!(f, "PacketZcAutorunSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResurrection")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("atype[6, 8]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("atype(short as i16)[6, 8]: {}", &self.atype));
        write!(f, "PacketZcResurrection\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGiveMannerPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("other_aid[2, 6]", &format!("{:02X?}", &self.other_aid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("point[7, 9]", &format!("{:02X?}", &self.point_raw))
        .finish()
    }
}

impl Display for PacketCzReqGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("other_aid(unsigned long as u32)[2, 6]: {}", &self.other_aid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("point(short as i16)[7, 9]: {}", &self.point));
        write!(f, "PacketCzReqGiveMannerPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGiveMannerPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 6]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned long as u32)[2, 6]: {}", &self.result));
        write!(f, "PacketZcAckGiveMannerPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMannerPointGiven {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMannerPointGiven")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("other_char_name[3, 27]", &format!("{:02X?}", &self.other_char_name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMannerPointGiven {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        fields.push(format!("other_char_name(char[] as char[])[3, 27]: {}", &self.other_char_name.pretty_output()));
        write!(f, "PacketZcNotifyMannerPointGiven\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMyguildBasicInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMyguildBasicInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("related_guild_list[4, 36]", &format!("{:02X?}", &self.related_guild_list_raw))
        .finish()
    }
}

impl Display for PacketZcMyguildBasicInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("related_guild_list([] as Vec)[4, 36]: {}", &self.related_guild_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMyguildBasicInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMenuinterface")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqGuildMenuinterface\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGuildMenuinterface")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("guild_memu_flag[2, 6]", &format!("{:02X?}", &self.guild_memu_flag_raw))
        .finish()
    }
}

impl Display for PacketZcAckGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("guild_memu_flag(int as i32)[2, 6]: {}", &self.guild_memu_flag));
        write!(f, "PacketZcAckGuildMenuinterface\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGuildMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMenu")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzReqGuildMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(int as i32)[2, 6]: {}", &self.atype));
        write!(f, "PacketCzReqGuildMenu\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("level[6, 10]", &format!("{:02X?}", &self.level_raw))
            .field("user_num[10, 14]", &format!("{:02X?}", &self.user_num_raw))
            .field("max_user_num[14, 18]", &format!("{:02X?}", &self.max_user_num_raw))
            .field("user_average_level[18, 22]", &format!("{:02X?}", &self.user_average_level_raw))
            .field("exp[22, 26]", &format!("{:02X?}", &self.exp_raw))
            .field("max_exp[26, 30]", &format!("{:02X?}", &self.max_exp_raw))
            .field("point[30, 34]", &format!("{:02X?}", &self.point_raw))
            .field("honor[34, 38]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[38, 42]", &format!("{:02X?}", &self.virtue_raw))
            .field("emblem_version[42, 46]", &format!("{:02X?}", &self.emblem_version_raw))
            .field("guildname[46, 70]", &format!("{:02X?}", &self.guildname_raw))
            .field("master_name[70, 94]", &format!("{:02X?}", &self.master_name_raw))
            .field("manage_land[94, 110]", &format!("{:02X?}", &self.manage_land_raw))
        .finish()
    }
}

impl Display for PacketZcGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(int as i32)[2, 6]: {}", &self.gdid));
        fields.push(format!("level(int as i32)[6, 10]: {}", &self.level));
        fields.push(format!("user_num(int as i32)[10, 14]: {}", &self.user_num));
        fields.push(format!("max_user_num(int as i32)[14, 18]: {}", &self.max_user_num));
        fields.push(format!("user_average_level(int as i32)[18, 22]: {}", &self.user_average_level));
        fields.push(format!("exp(int as i32)[22, 26]: {}", &self.exp));
        fields.push(format!("max_exp(int as i32)[26, 30]: {}", &self.max_exp));
        fields.push(format!("point(int as i32)[30, 34]: {}", &self.point));
        fields.push(format!("honor(int as i32)[34, 38]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[38, 42]: {}", &self.virtue));
        fields.push(format!("emblem_version(int as i32)[42, 46]: {}", &self.emblem_version));
        fields.push(format!("guildname(char[] as char[])[46, 70]: {}", &self.guildname.pretty_output()));
        fields.push(format!("master_name(char[] as char[])[70, 94]: {}", &self.master_name.pretty_output()));
        fields.push(format!("manage_land(char[] as char[])[94, 110]: {}", &self.manage_land.pretty_output()));
        write!(f, "PacketZcGuildInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildEmblemImg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
        .finish()
    }
}

impl Display for PacketCzReqGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(int as i32)[2, 6]: {}", &self.gdid));
        write!(f, "PacketCzReqGuildEmblemImg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildEmblemImg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("gdid[4, 8]", &format!("{:02X?}", &self.gdid_raw))
            .field("emblem_version[8, 12]", &format!("{:02X?}", &self.emblem_version_raw))
            .field("img[12, ?]", &format!("{:02X?}", &self.img_raw))
        .finish()
    }
}

impl Display for PacketZcGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("gdid(int as i32)[4, 8]: {}", &self.gdid));
        fields.push(format!("emblem_version(int as i32)[8, 12]: {}", &self.emblem_version));
        fields.push(format!("img(char[] as String)[12, ?]: {}", &self.img));
        write!(f, "PacketZcGuildEmblemImg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRegisterGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRegisterGuildEmblemImg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("img[4, ?]", &format!("{:02X?}", &self.img_raw))
        .finish()
    }
}

impl Display for PacketCzRegisterGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("img(char[] as String)[4, ?]: {}", &self.img));
        write!(f, "PacketCzRegisterGuildEmblemImg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMembermgrInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_info[4, 108]", &format!("{:02X?}", &self.member_info_raw))
        .finish()
    }
}

impl Display for PacketZcMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_info([] as Vec)[4, 108]: {}", &self.member_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMembermgrInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqChangeMemberpos {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqChangeMemberpos")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_info[4, 16]", &format!("{:02X?}", &self.member_info_raw))
        .finish()
    }
}

impl Display for PacketCzReqChangeMemberpos {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_info([] as Vec)[4, 16]: {}", &self.member_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzReqChangeMemberpos\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqChangeMembers {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqChangeMembers")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_info[4, 16]", &format!("{:02X?}", &self.member_info_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqChangeMembers {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_info([] as Vec)[4, 16]: {}", &self.member_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAckReqChangeMembers\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenMemberInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(int as i32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqOpenMemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckOpenMemberInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcAckOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcAckOpenMemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqLeaveGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("aid[6, 10]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[10, 14]", &format!("{:02X?}", &self.gid_raw))
            .field("reason_desc[14, 54]", &format!("{:02X?}", &self.reason_desc_raw))
        .finish()
    }
}

impl Display for PacketCzReqLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("aid(int as i32)[6, 10]: {}", &self.aid));
        fields.push(format!("gid(int as i32)[10, 14]: {}", &self.gid));
        fields.push(format!("reason_desc(char[] as char[])[14, 54]: {}", &self.reason_desc.pretty_output()));
        write!(f, "PacketCzReqLeaveGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckLeaveGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_name[2, 26]", &format!("{:02X?}", &self.char_name_raw))
            .field("reason_desc[26, 66]", &format!("{:02X?}", &self.reason_desc_raw))
        .finish()
    }
}

impl Display for PacketZcAckLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_name(char[] as char[])[2, 26]: {}", &self.char_name.pretty_output()));
        fields.push(format!("reason_desc(char[] as char[])[26, 66]: {}", &self.reason_desc.pretty_output()));
        write!(f, "PacketZcAckLeaveGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBanGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("aid[6, 10]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[10, 14]", &format!("{:02X?}", &self.gid_raw))
            .field("reason_desc[14, 54]", &format!("{:02X?}", &self.reason_desc_raw))
        .finish()
    }
}

impl Display for PacketCzReqBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("aid(int as i32)[6, 10]: {}", &self.aid));
        fields.push(format!("gid(int as i32)[10, 14]: {}", &self.gid));
        fields.push(format!("reason_desc(char[] as char[])[14, 54]: {}", &self.reason_desc.pretty_output()));
        write!(f, "PacketCzReqBanGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBanGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_name[2, 26]", &format!("{:02X?}", &self.char_name_raw))
            .field("reason_desc[26, 66]", &format!("{:02X?}", &self.reason_desc_raw))
            .field("account[66, 90]", &format!("{:02X?}", &self.account_raw))
        .finish()
    }
}

impl Display for PacketZcAckBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_name(char[] as char[])[2, 26]: {}", &self.char_name.pretty_output()));
        fields.push(format!("reason_desc(char[] as char[])[26, 66]: {}", &self.reason_desc.pretty_output()));
        fields.push(format!("account(char[] as char[])[66, 90]: {}", &self.account.pretty_output()));
        write!(f, "PacketZcAckBanGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDisorganizeGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("key[2, 42]", &format!("{:02X?}", &self.key_raw))
        .finish()
    }
}

impl Display for PacketCzReqDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("key(char[] as char[])[2, 42]: {}", &self.key.pretty_output()));
        write!(f, "PacketCzReqDisorganizeGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckDisorganizeGuildResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisorganizeGuildResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("reason[2, 6]", &format!("{:02X?}", &self.reason_raw))
        .finish()
    }
}

impl Display for PacketZcAckDisorganizeGuildResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("reason(int as i32)[2, 6]: {}", &self.reason));
        write!(f, "PacketZcAckDisorganizeGuildResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisorganizeGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("reason_desc[2, 42]", &format!("{:02X?}", &self.reason_desc_raw))
        .finish()
    }
}

impl Display for PacketZcAckDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("reason_desc(char[] as char[])[2, 42]: {}", &self.reason_desc.pretty_output()));
        write!(f, "PacketZcAckDisorganizeGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPositionInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_info[4, 20]", &format!("{:02X?}", &self.member_info_raw))
        .finish()
    }
}

impl Display for PacketZcPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_info([] as Vec)[4, 20]: {}", &self.member_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPositionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRegChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRegChangeGuildPositioninfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_list[4, 44]", &format!("{:02X?}", &self.member_list_raw))
        .finish()
    }
}

impl Display for PacketCzRegChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_list([] as Vec)[4, 44]: {}", &self.member_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzRegChangeGuildPositioninfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildSkillinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildSkillinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("skill_point[4, 6]", &format!("{:02X?}", &self.skill_point_raw))
            .field("skill_list[6, 43]", &format!("{:02X?}", &self.skill_list_raw))
        .finish()
    }
}

impl Display for PacketZcGuildSkillinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("skill_point(short as i16)[4, 6]: {}", &self.skill_point));
        fields.push(format!("skill_list([] as Vec)[6, 43]: {}", &self.skill_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcGuildSkillinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBanList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBanList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("ban_list[4, 92]", &format!("{:02X?}", &self.ban_list_raw))
        .finish()
    }
}

impl Display for PacketZcBanList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("ban_list([] as Vec)[4, 92]: {}", &self.ban_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcBanList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOtherGuildList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOtherGuildList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("guild_list[4, 40]", &format!("{:02X?}", &self.guild_list_raw))
        .finish()
    }
}

impl Display for PacketZcOtherGuildList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("guild_list([] as Vec)[4, 40]: {}", &self.guild_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcOtherGuildList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakeGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("gname[6, 30]", &format!("{:02X?}", &self.gname_raw))
        .finish()
    }
}

impl Display for PacketCzReqMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("gname(char[] as char[])[6, 30]: {}", &self.gname.pretty_output()));
        write!(f, "PacketCzReqMakeGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPositionIdNameInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_list[4, 32]", &format!("{:02X?}", &self.member_list_raw))
        .finish()
    }
}

impl Display for PacketZcPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_list([] as Vec)[4, 32]: {}", &self.member_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPositionIdNameInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcResultMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultMakeGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcResultMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcResultMakeGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("my_aid[6, 10]", &format!("{:02X?}", &self.my_aid_raw))
            .field("my_gid[10, 14]", &format!("{:02X?}", &self.my_gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("my_aid(unsigned long as u32)[6, 10]: {}", &self.my_aid));
        fields.push(format!("my_gid(unsigned long as u32)[10, 14]: {}", &self.my_gid));
        write!(f, "PacketCzReqJoinGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqJoinGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("answer[2, 3]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("answer(unsigned char as u8)[2, 3]: {}", &self.answer));
        write!(f, "PacketZcAckReqJoinGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqJoinGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("guild_name[6, 30]", &format!("{:02X?}", &self.guild_name_raw))
        .finish()
    }
}

impl Display for PacketZcReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("guild_name(char[] as char[])[6, 30]: {}", &self.guild_name.pretty_output()));
        write!(f, "PacketZcReqJoinGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("answer[6, 10]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketCzJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("answer(int as i32)[6, 10]: {}", &self.answer));
        write!(f, "PacketCzJoinGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateGdid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateGdid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("emblem_version[6, 10]", &format!("{:02X?}", &self.emblem_version_raw))
            .field("right[10, 14]", &format!("{:02X?}", &self.right_raw))
            .field("is_master[14, 15]", &format!("{:02X?}", &self.is_master_raw))
            .field("inter_sid[15, 19]", &format!("{:02X?}", &self.inter_sid_raw))
            .field("gname[19, 43]", &format!("{:02X?}", &self.gname_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateGdid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("emblem_version(int as i32)[6, 10]: {}", &self.emblem_version));
        fields.push(format!("right(int as i32)[10, 14]: {}", &self.right));
        fields.push(format!("is_master(bool as bool)[14, 15]: {}", &self.is_master));
        fields.push(format!("inter_sid(int as i32)[15, 19]: {}", &self.inter_sid));
        fields.push(format!("gname(char[] as char[])[19, 43]: {}", &self.gname.pretty_output()));
        write!(f, "PacketZcUpdateGdid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateCharstat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateCharstat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("status[10, 14]", &format!("{:02X?}", &self.status_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateCharstat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("status(int as i32)[10, 14]: {}", &self.status));
        write!(f, "PacketZcUpdateCharstat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildNotice")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("subject[6, 66]", &format!("{:02X?}", &self.subject_raw))
            .field("notice[66, 186]", &format!("{:02X?}", &self.notice_raw))
        .finish()
    }
}

impl Display for PacketCzGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("subject(char[] as char[])[6, 66]: {}", &self.subject.pretty_output()));
        fields.push(format!("notice(char[] as char[])[66, 186]: {}", &self.notice.pretty_output()));
        write!(f, "PacketCzGuildNotice\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildNotice")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("subject[2, 62]", &format!("{:02X?}", &self.subject_raw))
            .field("notice[62, 182]", &format!("{:02X?}", &self.notice_raw))
        .finish()
    }
}

impl Display for PacketZcGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("subject(char[] as char[])[2, 62]: {}", &self.subject.pretty_output()));
        fields.push(format!("notice(char[] as char[])[62, 182]: {}", &self.notice.pretty_output()));
        write!(f, "PacketZcGuildNotice\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqAllyGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("my_aid[6, 10]", &format!("{:02X?}", &self.my_aid_raw))
            .field("my_gid[10, 14]", &format!("{:02X?}", &self.my_gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("my_aid(unsigned long as u32)[6, 10]: {}", &self.my_aid));
        fields.push(format!("my_gid(unsigned long as u32)[10, 14]: {}", &self.my_gid));
        write!(f, "PacketCzReqAllyGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqAllyGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("other_aid[2, 6]", &format!("{:02X?}", &self.other_aid_raw))
            .field("guild_name[6, 30]", &format!("{:02X?}", &self.guild_name_raw))
        .finish()
    }
}

impl Display for PacketZcReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("other_aid(unsigned long as u32)[2, 6]: {}", &self.other_aid));
        fields.push(format!("guild_name(char[] as char[])[6, 30]: {}", &self.guild_name.pretty_output()));
        write!(f, "PacketZcReqAllyGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAllyGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("other_aid[2, 6]", &format!("{:02X?}", &self.other_aid_raw))
            .field("answer[6, 10]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketCzAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("other_aid(unsigned long as u32)[2, 6]: {}", &self.other_aid));
        fields.push(format!("answer(int as i32)[6, 10]: {}", &self.answer));
        write!(f, "PacketCzAllyGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqAllyGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("answer[2, 3]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("answer(unsigned char as u8)[2, 3]: {}", &self.answer));
        write!(f, "PacketZcAckReqAllyGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckChangeGuildPositioninfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("member_list[4, 34]", &format!("{:02X?}", &self.member_list_raw))
        .finish()
    }
}

impl Display for PacketZcAckChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("member_list([] as Vec)[4, 34]: {}", &self.member_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAckChangeGuildPositioninfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMemberInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(int as i32)[2, 6]: {}", &self.gid));
        write!(f, "PacketCzReqGuildMemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGuildMemberInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcAckGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(struct as Struct)[2, ?]: {}", &self.info));
        write!(f, "PacketZcAckGuildMemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemidentifyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemidentifyList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("itidlist[4, ?]", &format!("{:02X?}", &self.itidlist_raw))
        .finish()
    }
}

impl Display for PacketZcItemidentifyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("itidlist(unsigned short[] as u16[])[4, ?]: {}", &self.itidlist.pretty_output()));
        write!(f, "PacketZcItemidentifyList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemidentify")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketCzReqItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        write!(f, "PacketCzReqItemidentify\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemidentify")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketZcAckItemidentify\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemcompositionList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("card_index[2, 4]", &format!("{:02X?}", &self.card_index_raw))
        .finish()
    }
}

impl Display for PacketCzReqItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("card_index(short as i16)[2, 4]: {}", &self.card_index));
        write!(f, "PacketCzReqItemcompositionList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemcompositionList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("itidlist[4, ?]", &format!("{:02X?}", &self.itidlist_raw))
        .finish()
    }
}

impl Display for PacketZcItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("itidlist(unsigned short[] as u16[])[4, ?]: {}", &self.itidlist.pretty_output()));
        write!(f, "PacketZcItemcompositionList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemcomposition")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("card_index[2, 4]", &format!("{:02X?}", &self.card_index_raw))
            .field("equip_index[4, 6]", &format!("{:02X?}", &self.equip_index_raw))
        .finish()
    }
}

impl Display for PacketCzReqItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("card_index(short as i16)[2, 4]: {}", &self.card_index));
        fields.push(format!("equip_index(short as i16)[4, 6]: {}", &self.equip_index));
        write!(f, "PacketCzReqItemcomposition\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemcomposition")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("equip_index[2, 4]", &format!("{:02X?}", &self.equip_index_raw))
            .field("card_index[4, 6]", &format!("{:02X?}", &self.card_index_raw))
            .field("result[6, 7]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("equip_index(short as i16)[2, 4]: {}", &self.equip_index));
        fields.push(format!("card_index(short as i16)[4, 6]: {}", &self.card_index));
        fields.push(format!("result(unsigned char as u8)[6, 7]: {}", &self.result));
        write!(f, "PacketZcAckItemcomposition\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzGuildChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketZcGuildChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqHostileGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqHostileGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqHostileGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAckReqHostileGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemberAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberAdd")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcMemberAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(struct as Struct)[2, ?]: {}", &self.info));
        write!(f, "PacketZcMemberAdd\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDeleteRelatedGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("opponent_gdid[2, 6]", &format!("{:02X?}", &self.opponent_gdid_raw))
            .field("relation[6, 10]", &format!("{:02X?}", &self.relation_raw))
        .finish()
    }
}

impl Display for PacketCzReqDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("opponent_gdid(unsigned long as u32)[2, 6]: {}", &self.opponent_gdid));
        fields.push(format!("relation(int as i32)[6, 10]: {}", &self.relation));
        write!(f, "PacketCzReqDeleteRelatedGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteRelatedGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("opponent_gdid[2, 6]", &format!("{:02X?}", &self.opponent_gdid_raw))
            .field("relation[6, 10]", &format!("{:02X?}", &self.relation_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("opponent_gdid(unsigned long as u32)[2, 6]: {}", &self.opponent_gdid));
        fields.push(format!("relation(int as i32)[6, 10]: {}", &self.relation));
        write!(f, "PacketZcDeleteRelatedGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddRelatedGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcAddRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(struct as Struct)[2, ?]: {}", &self.info));
        write!(f, "PacketZcAddRelatedGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCollectordead {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCollectordead")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("server_id[2, 6]", &format!("{:02X?}", &self.server_id_raw))
        .finish()
    }
}

impl Display for PacketCollectordead {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("server_id(unsigned long as u32)[2, 6]: {}", &self.server_id));
        write!(f, "PacketCollectordead\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketPing {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketPing")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketPing {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketPing\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckItemrefining {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemrefining")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("item_index[4, 6]", &format!("{:02X?}", &self.item_index_raw))
            .field("refining_level[6, 8]", &format!("{:02X?}", &self.refining_level_raw))
        .finish()
    }
}

impl Display for PacketZcAckItemrefining {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("item_index(short as i16)[4, 6]: {}", &self.item_index));
        fields.push(format!("refining_level(short as i16)[6, 8]: {}", &self.refining_level));
        write!(f, "PacketZcAckItemrefining\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketZcNotifyMapinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDisconnect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketCzReqDisconnect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqDisconnect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        write!(f, "PacketZcAckReqDisconnect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMonsterInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMonsterInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("job[2, 4]", &format!("{:02X?}", &self.job_raw))
            .field("level[4, 6]", &format!("{:02X?}", &self.level_raw))
            .field("size[6, 8]", &format!("{:02X?}", &self.size_raw))
            .field("hp[8, 12]", &format!("{:02X?}", &self.hp_raw))
            .field("def[12, 14]", &format!("{:02X?}", &self.def_raw))
            .field("race_type[14, 16]", &format!("{:02X?}", &self.race_type_raw))
            .field("mdef_power[16, 18]", &format!("{:02X?}", &self.mdef_power_raw))
            .field("property[18, 20]", &format!("{:02X?}", &self.property_raw))
            .field("property_table[20, ?]", &format!("{:02X?}", &self.property_table_raw))
        .finish()
    }
}

impl Display for PacketZcMonsterInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("job(short as i16)[2, 4]: {}", &self.job));
        fields.push(format!("level(short as i16)[4, 6]: {}", &self.level));
        fields.push(format!("size(short as i16)[6, 8]: {}", &self.size));
        fields.push(format!("hp(int as i32)[8, 12]: {}", &self.hp));
        fields.push(format!("def(short as i16)[12, 14]: {}", &self.def));
        fields.push(format!("race_type(short as i16)[14, 16]: {}", &self.race_type));
        fields.push(format!("mdef_power(short as i16)[16, 18]: {}", &self.mdef_power));
        fields.push(format!("property(short as i16)[18, 20]: {}", &self.property));
        fields.push(format!("property_table(struct as Struct)[20, ?]: {}", &self.property_table));
        write!(f, "PacketZcMonsterInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMakableitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakableitemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("info[4, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcMakableitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("info(struct as Struct)[4, ?]: {}", &self.info));
        write!(f, "PacketZcMakableitemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqmakingitem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketCzReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(struct as Struct)[2, ?]: {}", &self.info));
        write!(f, "PacketCzReqmakingitem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqmakingitem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("itid[4, 6]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("itid(unsigned short as u16)[4, 6]: {}", &self.itid));
        write!(f, "PacketZcAckReqmakingitem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseSkillTogroundWithtalkbox {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkillTogroundWithtalkbox")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("selected_level[2, 4]", &format!("{:02X?}", &self.selected_level_raw))
            .field("skid[4, 6]", &format!("{:02X?}", &self.skid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
            .field("contents[10, 90]", &format!("{:02X?}", &self.contents_raw))
        .finish()
    }
}

impl Display for PacketCzUseSkillTogroundWithtalkbox {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("selected_level(short as i16)[2, 4]: {}", &self.selected_level));
        fields.push(format!("skid(unsigned short as u16)[4, 6]: {}", &self.skid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        fields.push(format!("contents(char[] as char[])[10, 90]: {}", &self.contents.pretty_output()));
        write!(f, "PacketCzUseSkillTogroundWithtalkbox\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcTalkboxChatcontents {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTalkboxChatcontents")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("contents[6, 86]", &format!("{:02X?}", &self.contents_raw))
        .finish()
    }
}

impl Display for PacketZcTalkboxChatcontents {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("contents(char[] as char[])[6, 86]: {}", &self.contents.pretty_output()));
        write!(f, "PacketZcTalkboxChatcontents\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateMapinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("x_pos[2, 4]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[4, 6]", &format!("{:02X?}", &self.y_pos_raw))
            .field("atype[6, 8]", &format!("{:02X?}", &self.atype_raw))
            .field("map_name[8, 24]", &format!("{:02X?}", &self.map_name_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("x_pos(short as i16)[2, 4]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[4, 6]: {}", &self.y_pos));
        fields.push(format!("atype(short as i16)[6, 8]: {}", &self.atype));
        fields.push(format!("map_name(char[] as char[])[8, 24]: {}", &self.map_name.pretty_output()));
        write!(f, "PacketZcUpdateMapinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqnameBygid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketCzReqnameBygid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqnameBygid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("cname[6, 30]", &format!("{:02X?}", &self.cname_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("cname(char[] as char[])[6, 30]: {}", &self.cname.pretty_output()));
        write!(f, "PacketZcAckReqnameBygid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqnameall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqnameall")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("cname[6, 30]", &format!("{:02X?}", &self.cname_raw))
            .field("pname[30, 54]", &format!("{:02X?}", &self.pname_raw))
            .field("gname[54, 78]", &format!("{:02X?}", &self.gname_raw))
            .field("rname[78, 102]", &format!("{:02X?}", &self.rname_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqnameall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("cname(char[] as char[])[6, 30]: {}", &self.cname.pretty_output()));
        fields.push(format!("pname(char[] as char[])[30, 54]: {}", &self.pname.pretty_output()));
        fields.push(format!("gname(char[] as char[])[54, 78]: {}", &self.gname.pretty_output()));
        fields.push(format!("rname(char[] as char[])[78, 102]: {}", &self.rname.pretty_output()));
        write!(f, "PacketZcAckReqnameall\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsgStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgStateChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("state[8, 9]", &format!("{:02X?}", &self.state_raw))
        .finish()
    }
}

impl Display for PacketZcMsgStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("state(bool as bool)[8, 9]: {}", &self.state));
        write!(f, "PacketZcMsgStateChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReset {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReset")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzReset {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketCzReset\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeMaptype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeMaptype")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("x_pos[2, 4]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[4, 6]", &format!("{:02X?}", &self.y_pos_raw))
            .field("atype[6, 8]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzChangeMaptype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("x_pos(short as i16)[2, 4]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[4, 6]: {}", &self.y_pos));
        fields.push(format!("atype(short as i16)[6, 8]: {}", &self.atype));
        write!(f, "PacketCzChangeMaptype\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapproperty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketZcNotifyMapproperty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyRanking {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyRanking")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("ranking[6, 10]", &format!("{:02X?}", &self.ranking_raw))
            .field("total[10, 14]", &format!("{:02X?}", &self.total_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyRanking {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("ranking(int as i32)[6, 10]: {}", &self.ranking));
        fields.push(format!("total(int as i32)[10, 14]: {}", &self.total));
        write!(f, "PacketZcNotifyRanking\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("effect_id[6, 10]", &format!("{:02X?}", &self.effect_id_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("effect_id(int as i32)[6, 10]: {}", &self.effect_id));
        write!(f, "PacketZcNotifyEffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeEffectstate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeEffectstate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("effect_state[2, 6]", &format!("{:02X?}", &self.effect_state_raw))
        .finish()
    }
}

impl Display for PacketCzChangeEffectstate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("effect_state(int as i32)[2, 6]: {}", &self.effect_state));
        write!(f, "PacketCzChangeEffectstate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStartCapture {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartCapture")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcStartCapture {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcStartCapture\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzTrycaptureMonster")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("target_aid[2, 6]", &format!("{:02X?}", &self.target_aid_raw))
        .finish()
    }
}

impl Display for PacketCzTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("target_aid(unsigned long as u32)[2, 6]: {}", &self.target_aid));
        write!(f, "PacketCzTrycaptureMonster\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTrycaptureMonster")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcTrycaptureMonster\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCommandPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCommandPet")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("c_sub[2, 3]", &format!("{:02X?}", &self.c_sub_raw))
        .finish()
    }
}

impl Display for PacketCzCommandPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("c_sub(char as i8)[2, 3]: {}", &self.c_sub));
        write!(f, "PacketCzCommandPet\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPropertyPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyPet")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("sz_name[2, 26]", &format!("{:02X?}", &self.sz_name_raw))
            .field("b_modified[26, 27]", &format!("{:02X?}", &self.b_modified_raw))
            .field("n_level[27, 29]", &format!("{:02X?}", &self.n_level_raw))
            .field("n_fullness[29, 31]", &format!("{:02X?}", &self.n_fullness_raw))
            .field("n_relationship[31, 33]", &format!("{:02X?}", &self.n_relationship_raw))
            .field("itid[33, 35]", &format!("{:02X?}", &self.itid_raw))
            .field("job[35, 37]", &format!("{:02X?}", &self.job_raw))
        .finish()
    }
}

impl Display for PacketZcPropertyPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("sz_name(char[] as char[])[2, 26]: {}", &self.sz_name.pretty_output()));
        fields.push(format!("b_modified(unsigned char as u8)[26, 27]: {}", &self.b_modified));
        fields.push(format!("n_level(short as i16)[27, 29]: {}", &self.n_level));
        fields.push(format!("n_fullness(short as i16)[29, 31]: {}", &self.n_fullness));
        fields.push(format!("n_relationship(short as i16)[31, 33]: {}", &self.n_relationship));
        fields.push(format!("itid(unsigned short as u16)[33, 35]: {}", &self.itid));
        fields.push(format!("job(short as i16)[35, 37]: {}", &self.job));
        write!(f, "PacketZcPropertyPet\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFeedPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFeedPet")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("c_ret[2, 3]", &format!("{:02X?}", &self.c_ret_raw))
            .field("itid[3, 5]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcFeedPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("c_ret(char as i8)[2, 3]: {}", &self.c_ret));
        fields.push(format!("itid(unsigned short as u16)[3, 5]: {}", &self.itid));
        write!(f, "PacketZcFeedPet\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangestatePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangestatePet")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("data[7, 11]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketZcChangestatePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(char as i8)[2, 3]: {}", &self.atype));
        fields.push(format!("gid(int as i32)[3, 7]: {}", &self.gid));
        fields.push(format!("data(int as i32)[7, 11]: {}", &self.data));
        write!(f, "PacketZcChangestatePet\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRenamePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRenamePet")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("sz_name[2, 26]", &format!("{:02X?}", &self.sz_name_raw))
        .finish()
    }
}

impl Display for PacketCzRenamePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("sz_name(char[] as char[])[2, 26]: {}", &self.sz_name.pretty_output()));
        write!(f, "PacketCzRenamePet\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPeteggList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPeteggList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("egg_list[4, 6]", &format!("{:02X?}", &self.egg_list_raw))
        .finish()
    }
}

impl Display for PacketZcPeteggList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("egg_list([] as Vec)[4, 6]: {}", &self.egg_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPeteggList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSelectPetegg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectPetegg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketCzSelectPetegg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        write!(f, "PacketCzSelectPetegg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPeteggInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPeteggInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketCzPeteggInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        write!(f, "PacketCzPeteggInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPetAct")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("data[2, 6]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketCzPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("data(int as i32)[2, 6]: {}", &self.data));
        write!(f, "PacketCzPetAct\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPetAct")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("data[6, 10]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketZcPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(int as i32)[2, 6]: {}", &self.gid));
        fields.push(format!("data(int as i32)[6, 10]: {}", &self.data));
        write!(f, "PacketZcPetAct\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcParChangeUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcParChangeUser")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("var_id[6, 8]", &format!("{:02X?}", &self.var_id_raw))
            .field("count[8, 12]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcParChangeUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("var_id(unsigned short as u16)[6, 8]: {}", &self.var_id));
        fields.push(format!("count(int as i32)[8, 12]: {}", &self.count));
        write!(f, "PacketZcParChangeUser\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcSkillUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcSkillUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMakingarrowList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakingarrowList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("arrow_list[4, 6]", &format!("{:02X?}", &self.arrow_list_raw))
        .finish()
    }
}

impl Display for PacketZcMakingarrowList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("arrow_list([] as Vec)[4, 6]: {}", &self.arrow_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMakingarrowList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqMakingarrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakingarrow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("id[2, 4]", &format!("{:02X?}", &self.id_raw))
        .finish()
    }
}

impl Display for PacketCzReqMakingarrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("id(unsigned short as u16)[2, 4]: {}", &self.id));
        write!(f, "PacketCzReqMakingarrow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqChangecart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqChangecart")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("num[2, 4]", &format!("{:02X?}", &self.num_raw))
        .finish()
    }
}

impl Display for PacketCzReqChangecart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("num(short as i16)[2, 4]: {}", &self.num));
        write!(f, "PacketCzReqChangecart\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcspriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcspriteChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("value[7, 11]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcNpcspriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("value(unsigned long as u32)[7, 11]: {}", &self.value));
        write!(f, "PacketZcNpcspriteChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShowdigit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowdigit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("value[3, 7]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcShowdigit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(unsigned char as u8)[2, 3]: {}", &self.atype));
        fields.push(format!("value(int as i32)[3, 7]: {}", &self.value));
        write!(f, "PacketZcShowdigit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqOpenstore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenstore2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("store_name[4, 84]", &format!("{:02X?}", &self.store_name_raw))
            .field("result[84, 85]", &format!("{:02X?}", &self.result_raw))
            .field("store_list[85, 93]", &format!("{:02X?}", &self.store_list_raw))
        .finish()
    }
}

impl Display for PacketCzReqOpenstore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("store_name(char[] as char[])[4, 84]: {}", &self.store_name.pretty_output()));
        fields.push(format!("result(bool as bool)[84, 85]: {}", &self.result));
        fields.push(format!("store_list([] as Vec)[85, 93]: {}", &self.store_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzReqOpenstore2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShowImage2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowImage2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("image_name[2, 66]", &format!("{:02X?}", &self.image_name_raw))
            .field("atype[66, 67]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcShowImage2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("image_name(char[] as char[])[2, 66]: {}", &self.image_name.pretty_output()));
        fields.push(format!("atype(unsigned char as u8)[66, 67]: {}", &self.atype));
        write!(f, "PacketZcShowImage2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeGuild")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gdid[6, 10]", &format!("{:02X?}", &self.gdid_raw))
            .field("emblem_version[10, 12]", &format!("{:02X?}", &self.emblem_version_raw))
        .finish()
    }
}

impl Display for PacketZcChangeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gdid(unsigned long as u32)[6, 10]: {}", &self.gdid));
        fields.push(format!("emblem_version(short as i16)[10, 12]: {}", &self.emblem_version));
        write!(f, "PacketZcChangeGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketScBillingInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScBillingInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dw_amount_remain[2, 6]", &format!("{:02X?}", &self.dw_amount_remain_raw))
            .field("dw_quantity_remain[6, 10]", &format!("{:02X?}", &self.dw_quantity_remain_raw))
            .field("dw_reserved1[10, 14]", &format!("{:02X?}", &self.dw_reserved1_raw))
            .field("dw_reserved2[14, 18]", &format!("{:02X?}", &self.dw_reserved2_raw))
        .finish()
    }
}

impl Display for PacketScBillingInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dw_amount_remain(unsigned long as u32)[2, 6]: {}", &self.dw_amount_remain));
        fields.push(format!("dw_quantity_remain(unsigned long as u32)[6, 10]: {}", &self.dw_quantity_remain));
        fields.push(format!("dw_reserved1(unsigned long as u32)[10, 14]: {}", &self.dw_reserved1));
        fields.push(format!("dw_reserved2(unsigned long as u32)[14, 18]: {}", &self.dw_reserved2));
        write!(f, "PacketScBillingInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildInfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildInfo2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("level[6, 10]", &format!("{:02X?}", &self.level_raw))
            .field("user_num[10, 14]", &format!("{:02X?}", &self.user_num_raw))
            .field("max_user_num[14, 18]", &format!("{:02X?}", &self.max_user_num_raw))
            .field("user_average_level[18, 22]", &format!("{:02X?}", &self.user_average_level_raw))
            .field("exp[22, 26]", &format!("{:02X?}", &self.exp_raw))
            .field("max_exp[26, 30]", &format!("{:02X?}", &self.max_exp_raw))
            .field("point[30, 34]", &format!("{:02X?}", &self.point_raw))
            .field("honor[34, 38]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[38, 42]", &format!("{:02X?}", &self.virtue_raw))
            .field("emblem_version[42, 46]", &format!("{:02X?}", &self.emblem_version_raw))
            .field("guildname[46, 70]", &format!("{:02X?}", &self.guildname_raw))
            .field("master_name[70, 94]", &format!("{:02X?}", &self.master_name_raw))
            .field("manage_land[94, 110]", &format!("{:02X?}", &self.manage_land_raw))
            .field("zeny[110, 114]", &format!("{:02X?}", &self.zeny_raw))
        .finish()
    }
}

impl Display for PacketZcGuildInfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(int as i32)[2, 6]: {}", &self.gdid));
        fields.push(format!("level(int as i32)[6, 10]: {}", &self.level));
        fields.push(format!("user_num(int as i32)[10, 14]: {}", &self.user_num));
        fields.push(format!("max_user_num(int as i32)[14, 18]: {}", &self.max_user_num));
        fields.push(format!("user_average_level(int as i32)[18, 22]: {}", &self.user_average_level));
        fields.push(format!("exp(int as i32)[22, 26]: {}", &self.exp));
        fields.push(format!("max_exp(int as i32)[26, 30]: {}", &self.max_exp));
        fields.push(format!("point(int as i32)[30, 34]: {}", &self.point));
        fields.push(format!("honor(int as i32)[34, 38]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[38, 42]: {}", &self.virtue));
        fields.push(format!("emblem_version(int as i32)[42, 46]: {}", &self.emblem_version));
        fields.push(format!("guildname(char[] as char[])[46, 70]: {}", &self.guildname.pretty_output()));
        fields.push(format!("master_name(char[] as char[])[70, 94]: {}", &self.master_name.pretty_output()));
        fields.push(format!("manage_land(char[] as char[])[94, 110]: {}", &self.manage_land.pretty_output()));
        fields.push(format!("zeny(int as i32)[110, 114]: {}", &self.zeny));
        write!(f, "PacketZcGuildInfo2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGuildZeny {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildZeny")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("zeny[2, 6]", &format!("{:02X?}", &self.zeny_raw))
        .finish()
    }
}

impl Display for PacketCzGuildZeny {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("zeny(int as i32)[2, 6]: {}", &self.zeny));
        write!(f, "PacketCzGuildZeny\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildZenyAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildZenyAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("ret[2, 3]", &format!("{:02X?}", &self.ret_raw))
        .finish()
    }
}

impl Display for PacketZcGuildZenyAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("ret(unsigned char as u8)[2, 3]: {}", &self.ret));
        write!(f, "PacketZcGuildZenyAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDispel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDispel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcDispel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcDispel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRemoveAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRemoveAid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_name[2, 26]", &format!("{:02X?}", &self.account_name_raw))
        .finish()
    }
}

impl Display for PacketCzRemoveAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_name(char[] as char[])[2, 26]: {}", &self.account_name.pretty_output()));
        write!(f, "PacketCzRemoveAid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzShift {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzShift")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("character_name[2, 26]", &format!("{:02X?}", &self.character_name_raw))
        .finish()
    }
}

impl Display for PacketCzShift {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("character_name(char[] as char[])[2, 26]: {}", &self.character_name.pretty_output()));
        write!(f, "PacketCzShift\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRecall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRecall")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_name[2, 26]", &format!("{:02X?}", &self.account_name_raw))
        .finish()
    }
}

impl Display for PacketCzRecall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_name(char[] as char[])[2, 26]: {}", &self.account_name.pretty_output()));
        write!(f, "PacketCzRecall\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRecallGid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRecallGid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("character_name[2, 26]", &format!("{:02X?}", &self.character_name_raw))
        .finish()
    }
}

impl Display for PacketCzRecallGid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("character_name(char[] as char[])[2, 26]: {}", &self.character_name.pretty_output()));
        write!(f, "PacketCzRecallGid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAskPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAskPngameroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketAcAskPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketAcAskPngameroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaReplyPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReplyPngameroom")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("permission[2, 3]", &format!("{:02X?}", &self.permission_raw))
        .finish()
    }
}

impl Display for PacketCaReplyPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("permission(unsigned char as u8)[2, 3]: {}", &self.permission));
        write!(f, "PacketCaReplyPngameroom\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqRemaintime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqRemaintime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReplyRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReplyRemaintime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 6]", &format!("{:02X?}", &self.result_raw))
            .field("expiration_date[6, 10]", &format!("{:02X?}", &self.expiration_date_raw))
            .field("remain_time[10, 14]", &format!("{:02X?}", &self.remain_time_raw))
        .finish()
    }
}

impl Display for PacketZcReplyRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(int as i32)[2, 6]: {}", &self.result));
        fields.push(format!("expiration_date(int as i32)[6, 10]: {}", &self.expiration_date));
        fields.push(format!("remain_time(int as i32)[10, 14]: {}", &self.remain_time));
        write!(f, "PacketZcReplyRemaintime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcInfoRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcInfoRemaintime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
            .field("remain_time[6, 10]", &format!("{:02X?}", &self.remain_time_raw))
        .finish()
    }
}

impl Display for PacketZcInfoRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(int as i32)[2, 6]: {}", &self.atype));
        fields.push(format!("remain_time(int as i32)[6, 10]: {}", &self.remain_time));
        write!(f, "PacketZcInfoRemaintime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBroadcast2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("font_color[4, 8]", &format!("{:02X?}", &self.font_color_raw))
            .field("font_type[8, 10]", &format!("{:02X?}", &self.font_type_raw))
            .field("font_size[10, 12]", &format!("{:02X?}", &self.font_size_raw))
            .field("font_align[12, 14]", &format!("{:02X?}", &self.font_align_raw))
            .field("font_y[14, 16]", &format!("{:02X?}", &self.font_y_raw))
            .field("msg[16, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcBroadcast2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("font_color(unsigned long as u32)[4, 8]: {}", &self.font_color));
        fields.push(format!("font_type(short as i16)[8, 10]: {}", &self.font_type));
        fields.push(format!("font_size(short as i16)[10, 12]: {}", &self.font_size));
        fields.push(format!("font_align(short as i16)[12, 14]: {}", &self.font_align));
        fields.push(format!("font_y(short as i16)[14, 16]: {}", &self.font_y));
        fields.push(format!("msg(char[] as String)[16, ?]: {}", &self.msg));
        write!(f, "PacketZcBroadcast2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddItemToStore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToStore2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
            .field("itid[8, 10]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[10, 11]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[11, 12]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[12, 13]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[13, 14]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[14, 22]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddItemToStore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[8, 10]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[10, 11]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[11, 12]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[12, 13]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[13, 14]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[14, 22]: {}", &self.slot));
        write!(f, "PacketZcAddItemToStore2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddItemToCart2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToCart2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
            .field("itid[8, 10]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[10, 11]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[11, 12]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[12, 13]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[13, 14]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[14, 22]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddItemToCart2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[8, 10]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[10, 11]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[11, 12]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[12, 13]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[13, 14]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[14, 22]: {}", &self.slot));
        write!(f, "PacketZcAddItemToCart2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCsReqEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCsReqEncryption")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("enc_count[2, 3]", &format!("{:02X?}", &self.enc_count_raw))
            .field("dec_count[3, 4]", &format!("{:02X?}", &self.dec_count_raw))
        .finish()
    }
}

impl Display for PacketCsReqEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("enc_count(char as i8)[2, 3]: {}", &self.enc_count));
        fields.push(format!("dec_count(char as i8)[3, 4]: {}", &self.dec_count));
        write!(f, "PacketCsReqEncryption\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketScAckEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScAckEncryption")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketScAckEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketScAckEncryption\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUseItemAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseItemAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("id[4, 6]", &format!("{:02X?}", &self.id_raw))
            .field("aid[6, 10]", &format!("{:02X?}", &self.aid_raw))
            .field("count[10, 12]", &format!("{:02X?}", &self.count_raw))
            .field("result[12, 13]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcUseItemAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("id(unsigned short as u16)[4, 6]: {}", &self.id));
        fields.push(format!("aid(unsigned long as u32)[6, 10]: {}", &self.aid));
        fields.push(format!("count(short as i16)[10, 12]: {}", &self.count));
        fields.push(format!("result(bool as bool)[12, 13]: {}", &self.result));
        write!(f, "PacketZcUseItemAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillEntry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillEntry2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("creator_aid[6, 10]", &format!("{:02X?}", &self.creator_aid_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("job[14, 15]", &format!("{:02X?}", &self.job_raw))
            .field("is_visible[15, 16]", &format!("{:02X?}", &self.is_visible_raw))
            .field("is_contens[16, 17]", &format!("{:02X?}", &self.is_contens_raw))
            .field("msg[17, 97]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcSkillEntry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("creator_aid(unsigned long as u32)[6, 10]: {}", &self.creator_aid));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("job(unsigned char as u8)[14, 15]: {}", &self.job));
        fields.push(format!("is_visible(bool as bool)[15, 16]: {}", &self.is_visible));
        fields.push(format!("is_contens(bool as bool)[16, 17]: {}", &self.is_contens));
        fields.push(format!("msg(char[] as char[])[17, 97]: {}", &self.msg.pretty_output()));
        write!(f, "PacketZcSkillEntry2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqmakinghomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqmakinghomun")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketCzReqmakinghomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(bool as bool)[2, 3]: {}", &self.result));
        write!(f, "PacketCzReqmakinghomun\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMonsterTalk")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("state_id[6, 7]", &format!("{:02X?}", &self.state_id_raw))
            .field("skill_id[7, 8]", &format!("{:02X?}", &self.skill_id_raw))
            .field("arg1[8, 9]", &format!("{:02X?}", &self.arg1_raw))
        .finish()
    }
}

impl Display for PacketCzMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("state_id(unsigned char as u8)[6, 7]: {}", &self.state_id));
        fields.push(format!("skill_id(unsigned char as u8)[7, 8]: {}", &self.skill_id));
        fields.push(format!("arg1(unsigned char as u8)[8, 9]: {}", &self.arg1));
        write!(f, "PacketCzMonsterTalk\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMonsterTalk")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("state_id[6, 7]", &format!("{:02X?}", &self.state_id_raw))
            .field("skill_id[7, 8]", &format!("{:02X?}", &self.skill_id_raw))
            .field("arg1[8, 9]", &format!("{:02X?}", &self.arg1_raw))
        .finish()
    }
}

impl Display for PacketZcMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("state_id(unsigned char as u8)[6, 7]: {}", &self.state_id));
        fields.push(format!("skill_id(unsigned char as u8)[7, 8]: {}", &self.skill_id));
        fields.push(format!("arg1(unsigned char as u8)[8, 9]: {}", &self.arg1));
        write!(f, "PacketZcMonsterTalk\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAutospelllist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAutospelllist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 9]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for PacketZcAutospelllist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(int[] as i32[])[2, 9]: {}", &self.skid.pretty_output()));
        write!(f, "PacketZcAutospelllist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSelectautospell {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectautospell")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 6]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for PacketCzSelectautospell {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(int as i32)[2, 6]: {}", &self.skid));
        write!(f, "PacketCzSelectautospell\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDevotionlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDevotionlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("my_aid[2, 6]", &format!("{:02X?}", &self.my_aid_raw))
            .field("aid[6, 11]", &format!("{:02X?}", &self.aid_raw))
            .field("range[11, 13]", &format!("{:02X?}", &self.range_raw))
        .finish()
    }
}

impl Display for PacketZcDevotionlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("my_aid(unsigned long as u32)[2, 6]: {}", &self.my_aid));
        fields.push(format!("aid(unsigned long[] as u32[])[6, 11]: {}", &self.aid.pretty_output()));
        fields.push(format!("range(short as i16)[11, 13]: {}", &self.range));
        write!(f, "PacketZcDevotionlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSpirits {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpirits")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("num[6, 8]", &format!("{:02X?}", &self.num_raw))
        .finish()
    }
}

impl Display for PacketZcSpirits {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("num(short as i16)[6, 8]: {}", &self.num));
        write!(f, "PacketZcSpirits\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBladestop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBladestop")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("src_aid[2, 6]", &format!("{:02X?}", &self.src_aid_raw))
            .field("dest_aid[6, 10]", &format!("{:02X?}", &self.dest_aid_raw))
            .field("flag[10, 14]", &format!("{:02X?}", &self.flag_raw))
        .finish()
    }
}

impl Display for PacketZcBladestop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("src_aid(unsigned long as u32)[2, 6]: {}", &self.src_aid));
        fields.push(format!("dest_aid(unsigned long as u32)[6, 10]: {}", &self.dest_aid));
        fields.push(format!("flag(int as i32)[10, 14]: {}", &self.flag));
        write!(f, "PacketZcBladestop\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCombodelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCombodelay")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("delay_time[6, 10]", &format!("{:02X?}", &self.delay_time_raw))
        .finish()
    }
}

impl Display for PacketZcCombodelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("delay_time(unsigned long as u32)[6, 10]: {}", &self.delay_time));
        write!(f, "PacketZcCombodelay\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSound {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSound")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("file_name[2, 26]", &format!("{:02X?}", &self.file_name_raw))
            .field("act[26, 27]", &format!("{:02X?}", &self.act_raw))
            .field("term[27, 31]", &format!("{:02X?}", &self.term_raw))
            .field("naid[31, 35]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcSound {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("file_name(char[] as char[])[2, 26]: {}", &self.file_name.pretty_output()));
        fields.push(format!("act(unsigned char as u8)[26, 27]: {}", &self.act));
        fields.push(format!("term(unsigned long as u32)[27, 31]: {}", &self.term));
        fields.push(format!("naid(unsigned long as u32)[31, 35]: {}", &self.naid));
        write!(f, "PacketZcSound\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOpenEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenEditdlgstr")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("naid[2, 6]", &format!("{:02X?}", &self.naid_raw))
        .finish()
    }
}

impl Display for PacketZcOpenEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("naid(unsigned long as u32)[2, 6]: {}", &self.naid));
        write!(f, "PacketZcOpenEditdlgstr\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzInputEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzInputEditdlgstr")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("naid[4, 8]", &format!("{:02X?}", &self.naid_raw))
            .field("msg[8, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzInputEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("naid(unsigned long as u32)[4, 8]: {}", &self.naid));
        fields.push(format!("msg(char[] as String)[8, ?]: {}", &self.msg));
        write!(f, "PacketCzInputEditdlgstr\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMaptypeproperty2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMaptypeproperty2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMaptypeproperty2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketZcNotifyMaptypeproperty2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSpriteChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpriteChange2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("value[7, 9]", &format!("{:02X?}", &self.value_raw))
            .field("value2[9, 11]", &format!("{:02X?}", &self.value2_raw))
        .finish()
    }
}

impl Display for PacketZcSpriteChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("value(unsigned short as u16)[7, 9]: {}", &self.value));
        fields.push(format!("value2(unsigned short as u16)[9, 11]: {}", &self.value2));
        write!(f, "PacketZcSpriteChange2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 22]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[22, 24]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[24, 26]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[26, 28]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[28, 30]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[30, 32]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[32, 34]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[34, 38]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[38, 40]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[40, 42]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[42, 44]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[44, 45]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[45, 46]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[46, 49]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[49, 50]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[50, 51]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[51, 52]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[52, 54]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[18, 22]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[22, 24]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[24, 26]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[26, 28]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[28, 30]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[30, 32]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[32, 34]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[34, 38]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[38, 40]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[40, 42]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[42, 44]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[44, 45]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[45, 46]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[46, 49]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[49, 50]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[50, 51]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[51, 52]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[52, 54]: {}", &self.clevel));
        write!(f, "PacketZcNotifyStandentry2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyNewentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 22]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[22, 24]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[24, 26]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[26, 28]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[28, 30]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[30, 32]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[32, 34]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[34, 38]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[38, 40]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[40, 42]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[42, 44]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[44, 45]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[45, 46]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[46, 49]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[49, 50]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[50, 51]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[51, 53]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyNewentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[18, 22]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[22, 24]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[24, 26]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[26, 28]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[28, 30]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[30, 32]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[32, 34]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[34, 38]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[38, 40]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[40, 42]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[42, 44]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[44, 45]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[45, 46]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[46, 49]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[49, 50]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[50, 51]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[51, 53]: {}", &self.clevel));
        write!(f, "PacketZcNotifyNewentry2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[18, 22]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[22, 24]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[24, 28]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("accessory2[28, 30]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[30, 32]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[32, 34]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[34, 36]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[36, 38]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[38, 42]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[42, 44]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[44, 46]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[46, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("move_data[50, 56]", &format!("{:02X?}", &self.move_data_raw))
            .field("x_size[56, 57]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[57, 58]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[58, 60]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(short as i16)[12, 14]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[18, 22]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[22, 24]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned long as u32)[24, 28]: {}", &self.move_start_time));
        fields.push(format!("accessory2(short as i16)[28, 30]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[30, 32]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[32, 34]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[34, 36]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[36, 38]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[38, 42]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[42, 44]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[44, 46]: {}", &self.honor));
        fields.push(format!("virtue(short as i16)[46, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("move_data(unsigned short[] as u16[])[50, 56]: {}", &self.move_data.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[56, 57]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[57, 58]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[58, 60]: {}", &self.clevel));
        write!(f, "PacketZcNotifyMoveentry2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaReqHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReqHash")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCaReqHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCaReqHash\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckHash")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("secret[4, ?]", &format!("{:02X?}", &self.secret_raw))
        .finish()
    }
}

impl Display for PacketAcAckHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("secret(char[] as String)[4, ?]: {}", &self.secret));
        write!(f, "PacketAcAckHash\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd_md5[30, 46]", &format!("{:02X?}", &self.passwd_md5_raw))
            .field("clienttype[46, 47]", &format!("{:02X?}", &self.clienttype_raw))
        .finish()
    }
}

impl Display for PacketCaLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd_md5(char[] as char[])[30, 46]: {}", &self.passwd_md5.pretty_output()));
        fields.push(format!("clienttype(unsigned char as u8)[46, 47]: {}", &self.clienttype));
        write!(f, "PacketCaLogin2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifySkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkill2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("target_id[8, 12]", &format!("{:02X?}", &self.target_id_raw))
            .field("start_time[12, 16]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[16, 20]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[20, 24]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("damage[24, 28]", &format!("{:02X?}", &self.damage_raw))
            .field("level[28, 30]", &format!("{:02X?}", &self.level_raw))
            .field("count[30, 32]", &format!("{:02X?}", &self.count_raw))
            .field("action[32, 33]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketZcNotifySkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("target_id(unsigned long as u32)[8, 12]: {}", &self.target_id));
        fields.push(format!("start_time(unsigned long as u32)[12, 16]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[16, 20]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[20, 24]: {}", &self.attacked_mt));
        fields.push(format!("damage(int as i32)[24, 28]: {}", &self.damage));
        fields.push(format!("level(short as i16)[28, 30]: {}", &self.level));
        fields.push(format!("count(short as i16)[30, 32]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[32, 33]: {}", &self.action));
        write!(f, "PacketZcNotifySkill2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqAccountname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqAccountname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAccountname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcAckAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcAckAccountname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSpirits2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpirits2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("num[6, 8]", &format!("{:02X?}", &self.num_raw))
        .finish()
    }
}

impl Display for PacketZcSpirits2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("num(short as i16)[6, 8]: {}", &self.num));
        write!(f, "PacketZcSpirits2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqCouple")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("name[10, 34]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcReqCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("name(char[] as char[])[10, 34]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcReqCouple\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinCouple")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("answer[10, 14]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketCzJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("answer(int as i32)[10, 14]: {}", &self.answer));
        write!(f, "PacketCzJoinCouple\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStartCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartCouple")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcStartCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcStartCouple\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinCouple")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqJoinCouple\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCouplename {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCouplename")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("couple_name[2, 26]", &format!("{:02X?}", &self.couple_name_raw))
        .finish()
    }
}

impl Display for PacketZcCouplename {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("couple_name(char[] as char[])[2, 26]: {}", &self.couple_name.pretty_output()));
        write!(f, "PacketZcCouplename\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzDoridori {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDoridori")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzDoridori {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzDoridori\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMakeGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMakeGroup2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("group_name[2, 26]", &format!("{:02X?}", &self.group_name_raw))
            .field("item_pickup_rule[26, 27]", &format!("{:02X?}", &self.item_pickup_rule_raw))
            .field("item_division_rule[27, 28]", &format!("{:02X?}", &self.item_division_rule_raw))
        .finish()
    }
}

impl Display for PacketCzMakeGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("group_name(char[] as char[])[2, 26]: {}", &self.group_name.pretty_output()));
        fields.push(format!("item_pickup_rule(unsigned char as u8)[26, 27]: {}", &self.item_pickup_rule));
        fields.push(format!("item_division_rule(unsigned char as u8)[27, 28]: {}", &self.item_division_rule));
        write!(f, "PacketCzMakeGroup2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddMemberToGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddMemberToGroup2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("role[6, 10]", &format!("{:02X?}", &self.role_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("state[14, 15]", &format!("{:02X?}", &self.state_raw))
            .field("group_name[15, 39]", &format!("{:02X?}", &self.group_name_raw))
            .field("character_name[39, 63]", &format!("{:02X?}", &self.character_name_raw))
            .field("map_name[63, 79]", &format!("{:02X?}", &self.map_name_raw))
            .field("item_pickup_rule[79, 80]", &format!("{:02X?}", &self.item_pickup_rule_raw))
            .field("item_division_rule[80, 81]", &format!("{:02X?}", &self.item_division_rule_raw))
        .finish()
    }
}

impl Display for PacketZcAddMemberToGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("role(unsigned long as u32)[6, 10]: {}", &self.role));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("state(unsigned char as u8)[14, 15]: {}", &self.state));
        fields.push(format!("group_name(char[] as char[])[15, 39]: {}", &self.group_name.pretty_output()));
        fields.push(format!("character_name(char[] as char[])[39, 63]: {}", &self.character_name.pretty_output()));
        fields.push(format!("map_name(char[] as char[])[63, 79]: {}", &self.map_name.pretty_output()));
        fields.push(format!("item_pickup_rule(unsigned char as u8)[79, 80]: {}", &self.item_pickup_rule));
        fields.push(format!("item_division_rule(unsigned char as u8)[80, 81]: {}", &self.item_division_rule));
        write!(f, "PacketZcAddMemberToGroup2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCongratulation {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCongratulation")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcCongratulation {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcCongratulation\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPositionToGuildm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPositionToGuildm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPositionToGuildm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        write!(f, "PacketZcNotifyPositionToGuildm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGuildMemberMapChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildMemberMapChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gdid[2, 6]", &format!("{:02X?}", &self.gdid_raw))
            .field("aid[6, 10]", &format!("{:02X?}", &self.aid_raw))
            .field("map_name[10, 26]", &format!("{:02X?}", &self.map_name_raw))
        .finish()
    }
}

impl Display for PacketZcGuildMemberMapChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gdid(unsigned long as u32)[2, 6]: {}", &self.gdid));
        fields.push(format!("aid(unsigned long as u32)[6, 10]: {}", &self.aid));
        fields.push(format!("map_name(char[] as char[])[10, 26]: {}", &self.map_name.pretty_output()));
        write!(f, "PacketZcGuildMemberMapChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChopokgi {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChopokgi")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzChopokgi {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzChopokgi\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 22]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 22]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcNormalItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 22]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 22]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartNormalItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 22]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 22]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreNormalItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcNotifyError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcNotifyError")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketAcNotifyError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketAcNotifyError\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateCharstat2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateCharstat2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("status[10, 14]", &format!("{:02X?}", &self.status_raw))
            .field("sex[14, 16]", &format!("{:02X?}", &self.sex_raw))
            .field("head[16, 18]", &format!("{:02X?}", &self.head_raw))
            .field("head_palette[18, 20]", &format!("{:02X?}", &self.head_palette_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateCharstat2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("status(int as i32)[10, 14]: {}", &self.status));
        fields.push(format!("sex(short as i16)[14, 16]: {}", &self.sex));
        fields.push(format!("head(short as i16)[16, 18]: {}", &self.head));
        fields.push(format!("head_palette(short as i16)[18, 20]: {}", &self.head_palette));
        write!(f, "PacketZcUpdateCharstat2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyEffect2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("effect_id[6, 10]", &format!("{:02X?}", &self.effect_id_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyEffect2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("effect_id(int as i32)[6, 10]: {}", &self.effect_id));
        write!(f, "PacketZcNotifyEffect2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqExchangeItem2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("gid[26, 30]", &format!("{:02X?}", &self.gid_raw))
            .field("level[30, 32]", &format!("{:02X?}", &self.level_raw))
        .finish()
    }
}

impl Display for PacketZcReqExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("gid(unsigned long as u32)[26, 30]: {}", &self.gid));
        fields.push(format!("level(short as i16)[30, 32]: {}", &self.level));
        write!(f, "PacketZcReqExchangeItem2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckExchangeItem2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("level[7, 9]", &format!("{:02X?}", &self.level_raw))
        .finish()
    }
}

impl Display for PacketZcAckExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned char as u8)[2, 3]: {}", &self.result));
        fields.push(format!("gid(unsigned long as u32)[3, 7]: {}", &self.gid));
        fields.push(format!("level(short as i16)[7, 9]: {}", &self.level));
        write!(f, "PacketZcAckExchangeItem2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqBaby")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("name[10, 34]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcReqBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("name(char[] as char[])[10, 34]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcReqBaby\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinBaby")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("answer[10, 14]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketCzJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("answer(int as i32)[10, 14]: {}", &self.answer));
        write!(f, "PacketCzJoinBaby\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStartBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartBaby")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcStartBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcStartBaby\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinBaby")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzReqJoinBaby\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaLogin3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd_md5[30, 46]", &format!("{:02X?}", &self.passwd_md5_raw))
            .field("clienttype[46, 47]", &format!("{:02X?}", &self.clienttype_raw))
            .field("client_info[47, 48]", &format!("{:02X?}", &self.client_info_raw))
        .finish()
    }
}

impl Display for PacketCaLogin3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd_md5(char[] as char[])[30, 46]: {}", &self.passwd_md5.pretty_output()));
        fields.push(format!("clienttype(unsigned char as u8)[46, 47]: {}", &self.clienttype));
        fields.push(format!("client_info(unsigned char as u8)[47, 48]: {}", &self.client_info));
        write!(f, "PacketCaLogin3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("key[6, 56]", &format!("{:02X?}", &self.key_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("key(char[] as char[])[6, 56]: {}", &self.key.pretty_output()));
        write!(f, "PacketChDeleteChar2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcRepairitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRepairitemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 17]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcRepairitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 17]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcRepairitemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemrepair")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("target_item_info[2, ?]", &format!("{:02X?}", &self.target_item_info_raw))
        .finish()
    }
}

impl Display for PacketCzReqItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("target_item_info(struct as Struct)[2, ?]: {}", &self.target_item_info));
        write!(f, "PacketCzReqItemrepair\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemrepair")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketZcAckItemrepair\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcHighjump {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHighjump")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
        .finish()
    }
}

impl Display for PacketZcHighjump {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        write!(f, "PacketZcHighjump\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaConnectInfoChanged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaConnectInfoChanged")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("id[2, 26]", &format!("{:02X?}", &self.id_raw))
        .finish()
    }
}

impl Display for PacketCaConnectInfoChanged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("id(char[] as char[])[2, 26]: {}", &self.id.pretty_output()));
        write!(f, "PacketCaConnectInfoChanged\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFriendsList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("friend_list[4, 36]", &format!("{:02X?}", &self.friend_list_raw))
        .finish()
    }
}

impl Display for PacketZcFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("friend_list([] as Vec)[4, 36]: {}", &self.friend_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcFriendsList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAddFriends")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketCzAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        write!(f, "PacketCzAddFriends\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDeleteFriends")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        write!(f, "PacketCzDeleteFriends\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaExeHashcheck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("hash_value[2, 18]", &format!("{:02X?}", &self.hash_value_raw))
        .finish()
    }
}

impl Display for PacketCaExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("hash_value(char[] as char[])[2, 18]: {}", &self.hash_value.pretty_output()));
        write!(f, "PacketCaExeHashcheck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDivorce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDivorce")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcDivorce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcDivorce\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFriendsState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFriendsState")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("state[10, 11]", &format!("{:02X?}", &self.state_raw))
        .finish()
    }
}

impl Display for PacketZcFriendsState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("state(bool as bool)[10, 11]: {}", &self.state));
        write!(f, "PacketZcFriendsState\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqAddFriends")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("req_aid[2, 6]", &format!("{:02X?}", &self.req_aid_raw))
            .field("req_gid[6, 10]", &format!("{:02X?}", &self.req_gid_raw))
            .field("name[10, 34]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("req_aid(unsigned long as u32)[2, 6]: {}", &self.req_aid));
        fields.push(format!("req_gid(unsigned long as u32)[6, 10]: {}", &self.req_gid));
        fields.push(format!("name(char[] as char[])[10, 34]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcReqAddFriends\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckReqAddFriends")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("req_aid[2, 6]", &format!("{:02X?}", &self.req_aid_raw))
            .field("req_gid[6, 10]", &format!("{:02X?}", &self.req_gid_raw))
            .field("result[10, 14]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketCzAckReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("req_aid(unsigned long as u32)[2, 6]: {}", &self.req_aid));
        fields.push(format!("req_gid(unsigned long as u32)[6, 10]: {}", &self.req_gid));
        fields.push(format!("result(int as i32)[10, 14]: {}", &self.result));
        write!(f, "PacketCzAckReqAddFriends\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddFriendsList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[8, 12]", &format!("{:02X?}", &self.gid_raw))
            .field("name[12, 36]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcAddFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[8, 12]: {}", &self.gid));
        fields.push(format!("name(char[] as char[])[12, 36]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcAddFriendsList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteFriends")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        write!(f, "PacketZcDeleteFriends\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcRefuseLoginR3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRefuseLoginR3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 6]", &format!("{:02X?}", &self.error_code_raw))
            .field("block_date[6, 26]", &format!("{:02X?}", &self.block_date_raw))
        .finish()
    }
}

impl Display for PacketAcRefuseLoginR3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned int as u32)[2, 6]: {}", &self.error_code));
        fields.push(format!("block_date(char[] as char[])[6, 26]: {}", &self.block_date.pretty_output()));
        write!(f, "PacketAcRefuseLoginR3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExeHashcheck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("client_type[2, 3]", &format!("{:02X?}", &self.client_type_raw))
            .field("hash_value[3, 19]", &format!("{:02X?}", &self.hash_value_raw))
        .finish()
    }
}

impl Display for PacketCzExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("client_type(unsigned char as u8)[2, 3]: {}", &self.client_type));
        fields.push(format!("hash_value(char[] as char[])[3, 19]: {}", &self.hash_value.pretty_output()));
        write!(f, "PacketCzExeHashcheck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcBlockCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcBlockCharacter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("character_list[4, 28]", &format!("{:02X?}", &self.character_list_raw))
        .finish()
    }
}

impl Display for PacketHcBlockCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("character_list([] as Vec)[4, 28]: {}", &self.character_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketHcBlockCharacter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStarskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStarskill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("map_name[2, 26]", &format!("{:02X?}", &self.map_name_raw))
            .field("monster_id[26, 30]", &format!("{:02X?}", &self.monster_id_raw))
            .field("star[30, 31]", &format!("{:02X?}", &self.star_raw))
            .field("result[31, 32]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcStarskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("map_name(char[] as char[])[2, 26]: {}", &self.map_name.pretty_output()));
        fields.push(format!("monster_id(int as i32)[26, 30]: {}", &self.monster_id));
        fields.push(format!("star(unsigned char as u8)[30, 31]: {}", &self.star));
        fields.push(format!("result(unsigned char as u8)[31, 32]: {}", &self.result));
        write!(f, "PacketZcStarskill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqPvppoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        write!(f, "PacketCzReqPvppoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckPvppoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("pvp[10, ?]", &format!("{:02X?}", &self.pvp_raw))
        .finish()
    }
}

impl Display for PacketZcAckPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("pvp(struct as Struct)[10, ?]: {}", &self.pvp));
        write!(f, "PacketZcAckPvppoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZhMovePvpworld {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZhMovePvpworld")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketZhMovePvpworld {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketZhMovePvpworld\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqGiveMannerByname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGiveMannerByname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_name[2, 26]", &format!("{:02X?}", &self.char_name_raw))
        .finish()
    }
}

impl Display for PacketCzReqGiveMannerByname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_name(char[] as char[])[2, 26]: {}", &self.char_name.pretty_output()));
        write!(f, "PacketCzReqGiveMannerByname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqStatusGm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_name[2, 26]", &format!("{:02X?}", &self.char_name_raw))
        .finish()
    }
}

impl Display for PacketCzReqStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_name(char[] as char[])[2, 26]: {}", &self.char_name.pretty_output()));
        write!(f, "PacketCzReqStatusGm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckStatusGm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("str[2, 3]", &format!("{:02X?}", &self.str_raw))
            .field("standard_str[3, 4]", &format!("{:02X?}", &self.standard_str_raw))
            .field("agi[4, 5]", &format!("{:02X?}", &self.agi_raw))
            .field("standard_agi[5, 6]", &format!("{:02X?}", &self.standard_agi_raw))
            .field("vit[6, 7]", &format!("{:02X?}", &self.vit_raw))
            .field("standard_vit[7, 8]", &format!("{:02X?}", &self.standard_vit_raw))
            .field("int[8, 9]", &format!("{:02X?}", &self.int_raw))
            .field("standard_int[9, 10]", &format!("{:02X?}", &self.standard_int_raw))
            .field("dex[10, 11]", &format!("{:02X?}", &self.dex_raw))
            .field("standard_dex[11, 12]", &format!("{:02X?}", &self.standard_dex_raw))
            .field("luk[12, 13]", &format!("{:02X?}", &self.luk_raw))
            .field("standard_luk[13, 14]", &format!("{:02X?}", &self.standard_luk_raw))
            .field("att_power[14, 16]", &format!("{:02X?}", &self.att_power_raw))
            .field("refining_power[16, 18]", &format!("{:02X?}", &self.refining_power_raw))
            .field("max_matt_power[18, 20]", &format!("{:02X?}", &self.max_matt_power_raw))
            .field("min_matt_power[20, 22]", &format!("{:02X?}", &self.min_matt_power_raw))
            .field("itemdef_power[22, 24]", &format!("{:02X?}", &self.itemdef_power_raw))
            .field("plusdef_power[24, 26]", &format!("{:02X?}", &self.plusdef_power_raw))
            .field("mdef_power[26, 28]", &format!("{:02X?}", &self.mdef_power_raw))
            .field("plusmdef_power[28, 30]", &format!("{:02X?}", &self.plusmdef_power_raw))
            .field("hit_success_value[30, 32]", &format!("{:02X?}", &self.hit_success_value_raw))
            .field("avoid_success_value[32, 34]", &format!("{:02X?}", &self.avoid_success_value_raw))
            .field("plus_avoid_success_value[34, 36]", &format!("{:02X?}", &self.plus_avoid_success_value_raw))
            .field("critical_success_value[36, 38]", &format!("{:02X?}", &self.critical_success_value_raw))
            .field("aspd[38, 40]", &format!("{:02X?}", &self.aspd_raw))
            .field("plus_aspd[40, 42]", &format!("{:02X?}", &self.plus_aspd_raw))
        .finish()
    }
}

impl Display for PacketZcAckStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("str(unsigned char as u8)[2, 3]: {}", &self.str));
        fields.push(format!("standard_str(unsigned char as u8)[3, 4]: {}", &self.standard_str));
        fields.push(format!("agi(unsigned char as u8)[4, 5]: {}", &self.agi));
        fields.push(format!("standard_agi(unsigned char as u8)[5, 6]: {}", &self.standard_agi));
        fields.push(format!("vit(unsigned char as u8)[6, 7]: {}", &self.vit));
        fields.push(format!("standard_vit(unsigned char as u8)[7, 8]: {}", &self.standard_vit));
        fields.push(format!("int(unsigned char as u8)[8, 9]: {}", &self.int));
        fields.push(format!("standard_int(unsigned char as u8)[9, 10]: {}", &self.standard_int));
        fields.push(format!("dex(unsigned char as u8)[10, 11]: {}", &self.dex));
        fields.push(format!("standard_dex(unsigned char as u8)[11, 12]: {}", &self.standard_dex));
        fields.push(format!("luk(unsigned char as u8)[12, 13]: {}", &self.luk));
        fields.push(format!("standard_luk(unsigned char as u8)[13, 14]: {}", &self.standard_luk));
        fields.push(format!("att_power(short as i16)[14, 16]: {}", &self.att_power));
        fields.push(format!("refining_power(short as i16)[16, 18]: {}", &self.refining_power));
        fields.push(format!("max_matt_power(short as i16)[18, 20]: {}", &self.max_matt_power));
        fields.push(format!("min_matt_power(short as i16)[20, 22]: {}", &self.min_matt_power));
        fields.push(format!("itemdef_power(short as i16)[22, 24]: {}", &self.itemdef_power));
        fields.push(format!("plusdef_power(short as i16)[24, 26]: {}", &self.plusdef_power));
        fields.push(format!("mdef_power(short as i16)[26, 28]: {}", &self.mdef_power));
        fields.push(format!("plusmdef_power(short as i16)[28, 30]: {}", &self.plusmdef_power));
        fields.push(format!("hit_success_value(short as i16)[30, 32]: {}", &self.hit_success_value));
        fields.push(format!("avoid_success_value(short as i16)[32, 34]: {}", &self.avoid_success_value));
        fields.push(format!("plus_avoid_success_value(short as i16)[34, 36]: {}", &self.plus_avoid_success_value));
        fields.push(format!("critical_success_value(short as i16)[36, 38]: {}", &self.critical_success_value));
        fields.push(format!("aspd(short as i16)[38, 40]: {}", &self.aspd));
        fields.push(format!("plus_aspd(short as i16)[40, 42]: {}", &self.plus_aspd));
        write!(f, "PacketZcAckStatusGm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillmsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillmsg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg_no[2, 6]", &format!("{:02X?}", &self.msg_no_raw))
        .finish()
    }
}

impl Display for PacketZcSkillmsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg_no(int as i32)[2, 6]: {}", &self.msg_no));
        write!(f, "PacketZcSkillmsg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBabymsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBabymsg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg_no[2, 6]", &format!("{:02X?}", &self.msg_no_raw))
        .finish()
    }
}

impl Display for PacketZcBabymsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg_no(int as i32)[2, 6]: {}", &self.msg_no));
        write!(f, "PacketZcBabymsg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBlacksmithRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzBlacksmithRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAlchemistRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzAlchemistRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBlacksmithRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 12]", &format!("{:02X?}", &self.name_raw))
            .field("point[12, 22]", &format!("{:02X?}", &self.point_raw))
        .finish()
    }
}

impl Display for PacketZcBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 12]: {}", &self.name.pretty_output()));
        fields.push(format!("point(int[] as i32[])[12, 22]: {}", &self.point.pretty_output()));
        write!(f, "PacketZcBlacksmithRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAlchemistRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 12]", &format!("{:02X?}", &self.name_raw))
            .field("point[12, 22]", &format!("{:02X?}", &self.point_raw))
        .finish()
    }
}

impl Display for PacketZcAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 12]: {}", &self.name.pretty_output()));
        fields.push(format!("point(int[] as i32[])[12, 22]: {}", &self.point.pretty_output()));
        write!(f, "PacketZcAlchemistRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBlacksmithPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBlacksmithPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point[2, 6]", &format!("{:02X?}", &self.point_raw))
            .field("total_point[6, 10]", &format!("{:02X?}", &self.total_point_raw))
        .finish()
    }
}

impl Display for PacketZcBlacksmithPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point(int as i32)[2, 6]: {}", &self.point));
        fields.push(format!("total_point(int as i32)[6, 10]: {}", &self.total_point));
        write!(f, "PacketZcBlacksmithPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAlchemistPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAlchemistPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point[2, 6]", &format!("{:02X?}", &self.point_raw))
            .field("total_point[6, 10]", &format!("{:02X?}", &self.total_point_raw))
        .finish()
    }
}

impl Display for PacketZcAlchemistPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point(int as i32)[2, 6]: {}", &self.point));
        fields.push(format!("total_point(int as i32)[6, 10]: {}", &self.total_point));
        write!(f, "PacketZcAlchemistPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzLesseffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("is_less[2, 6]", &format!("{:02X?}", &self.is_less_raw))
        .finish()
    }
}

impl Display for PacketCzLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("is_less(int as i32)[2, 6]: {}", &self.is_less));
        write!(f, "PacketCzLesseffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcLesseffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("is_less[2, 6]", &format!("{:02X?}", &self.is_less_raw))
        .finish()
    }
}

impl Display for PacketZcLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("is_less(int as i32)[2, 6]: {}", &self.is_less));
        write!(f, "PacketZcLesseffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPkinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPkinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("win_point[2, 6]", &format!("{:02X?}", &self.win_point_raw))
            .field("lose_point[6, 10]", &format!("{:02X?}", &self.lose_point_raw))
            .field("kill_name[10, 34]", &format!("{:02X?}", &self.kill_name_raw))
            .field("killed_name[34, 58]", &format!("{:02X?}", &self.killed_name_raw))
            .field("expire_time[58, ?]", &format!("{:02X?}", &self.expire_time_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPkinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("win_point(int as i32)[2, 6]: {}", &self.win_point));
        fields.push(format!("lose_point(int as i32)[6, 10]: {}", &self.lose_point));
        fields.push(format!("kill_name(char[] as char[])[10, 34]: {}", &self.kill_name.pretty_output()));
        fields.push(format!("killed_name(char[] as char[])[34, 58]: {}", &self.killed_name.pretty_output()));
        fields.push(format!("expire_time(struct as Struct)[58, ?]: {}", &self.expire_time));
        write!(f, "PacketZcNotifyPkinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyCrazykiller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyCrazykiller")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("is_crazy_killer[6, 10]", &format!("{:02X?}", &self.is_crazy_killer_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyCrazykiller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("is_crazy_killer(int as i32)[6, 10]: {}", &self.is_crazy_killer));
        write!(f, "PacketZcNotifyCrazykiller\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyWeaponitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyWeaponitemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_list[4, 17]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyWeaponitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_list([] as Vec)[4, 17]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcNotifyWeaponitemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWeaponrefine")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 6]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketCzReqWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(int as i32)[2, 6]: {}", &self.index));
        write!(f, "PacketCzReqWeaponrefine\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckWeaponrefine")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg[2, 6]", &format!("{:02X?}", &self.msg_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcAckWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg(int as i32)[2, 6]: {}", &self.msg));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        write!(f, "PacketZcAckWeaponrefine\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcTaekwonPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTaekwonPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point[2, 6]", &format!("{:02X?}", &self.point_raw))
            .field("total_point[6, 10]", &format!("{:02X?}", &self.total_point_raw))
        .finish()
    }
}

impl Display for PacketZcTaekwonPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point(int as i32)[2, 6]: {}", &self.point));
        fields.push(format!("total_point(int as i32)[6, 10]: {}", &self.total_point));
        write!(f, "PacketZcTaekwonPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzTaekwonRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzTaekwonRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTaekwonRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 12]", &format!("{:02X?}", &self.name_raw))
            .field("point[12, 22]", &format!("{:02X?}", &self.point_raw))
        .finish()
    }
}

impl Display for PacketZcTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 12]: {}", &self.name.pretty_output()));
        fields.push(format!("point(int[] as i32[])[12, 22]: {}", &self.point.pretty_output()));
        write!(f, "PacketZcTaekwonRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGameGuard")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auth_data[2, 6]", &format!("{:02X?}", &self.auth_data_raw))
        .finish()
    }
}

impl Display for PacketZcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auth_data(unsigned long[] as u32[])[2, 6]: {}", &self.auth_data.pretty_output()));
        write!(f, "PacketZcGameGuard\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckGameGuard")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auth_data[2, 6]", &format!("{:02X?}", &self.auth_data_raw))
        .finish()
    }
}

impl Display for PacketCzAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auth_data(unsigned long[] as u32[])[2, 6]: {}", &self.auth_data.pretty_output()));
        write!(f, "PacketCzAckGameGuard\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStateChange3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStateChange3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("body_state[6, 8]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[8, 10]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[10, 14]", &format!("{:02X?}", &self.effect_state_raw))
            .field("is_pkmode_on[14, 15]", &format!("{:02X?}", &self.is_pkmode_on_raw))
        .finish()
    }
}

impl Display for PacketZcStateChange3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("body_state(short as i16)[6, 8]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[8, 10]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[10, 14]: {}", &self.effect_state));
        fields.push(format!("is_pkmode_on(bool as bool)[14, 15]: {}", &self.is_pkmode_on));
        write!(f, "PacketZcStateChange3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 16]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[16, 18]", &format!("{:02X?}", &self.job_raw))
            .field("head[18, 20]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[20, 24]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[24, 26]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[26, 28]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[28, 30]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[30, 32]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[32, 34]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[34, 36]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[36, 40]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[40, 42]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[42, 44]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[44, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[50, 53]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[53, 54]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[54, 55]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[55, 56]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[56, 58]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[12, 16]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[16, 18]: {}", &self.job));
        fields.push(format!("head(short as i16)[18, 20]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[20, 24]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[24, 26]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[26, 28]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[28, 30]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[30, 32]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[32, 34]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[34, 36]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[36, 40]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[40, 42]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[42, 44]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[44, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[50, 53]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[53, 54]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[54, 55]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[55, 56]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[56, 58]: {}", &self.clevel));
        write!(f, "PacketZcNotifyStandentry3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyNewentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 16]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[16, 18]", &format!("{:02X?}", &self.job_raw))
            .field("head[18, 20]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[20, 24]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[24, 26]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[26, 28]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[28, 30]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[30, 32]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[32, 34]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[34, 36]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[36, 40]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[40, 42]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[42, 44]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[44, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[50, 53]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[53, 54]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[54, 55]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[55, 57]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyNewentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[12, 16]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[16, 18]: {}", &self.job));
        fields.push(format!("head(short as i16)[18, 20]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[20, 24]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[24, 26]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[26, 28]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[28, 30]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[30, 32]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[32, 34]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[34, 36]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[36, 40]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[40, 42]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[42, 44]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[44, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[50, 53]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[53, 54]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[54, 55]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[55, 57]: {}", &self.clevel));
        write!(f, "PacketZcNotifyNewentry3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("objecttype[2, 3]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[7, 9]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[9, 11]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[11, 13]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[13, 17]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[17, 19]", &format!("{:02X?}", &self.job_raw))
            .field("head[19, 21]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[21, 25]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[25, 27]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[27, 31]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("accessory2[31, 33]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[33, 35]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[35, 37]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[37, 39]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[39, 41]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[41, 45]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[45, 47]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[47, 49]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[49, 53]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[53, 54]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[54, 55]", &format!("{:02X?}", &self.sex_raw))
            .field("move_data[55, 61]", &format!("{:02X?}", &self.move_data_raw))
            .field("x_size[61, 62]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[62, 63]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[63, 65]", &format!("{:02X?}", &self.clevel_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("objecttype(unsigned char as u8)[2, 3]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[3, 7]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[7, 9]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[9, 11]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[11, 13]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[13, 17]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[17, 19]: {}", &self.job));
        fields.push(format!("head(short as i16)[19, 21]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[21, 25]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[25, 27]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned long as u32)[27, 31]: {}", &self.move_start_time));
        fields.push(format!("accessory2(short as i16)[31, 33]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[33, 35]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[35, 37]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[37, 39]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[39, 41]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[41, 45]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[45, 47]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[47, 49]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[49, 53]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[53, 54]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[54, 55]: {}", &self.sex));
        fields.push(format!("move_data(unsigned short[] as u16[])[55, 61]: {}", &self.move_data.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[61, 62]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[62, 63]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[63, 65]: {}", &self.clevel));
        write!(f, "PacketZcNotifyMoveentry3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCommandMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCommandMer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
            .field("command[4, 5]", &format!("{:02X?}", &self.command_raw))
        .finish()
    }
}

impl Display for PacketCzCommandMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        fields.push(format!("command(char as i8)[4, 5]: {}", &self.command));
        write!(f, "PacketCzCommandMer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPropertyHomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyHomun")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("sz_name[2, 26]", &format!("{:02X?}", &self.sz_name_raw))
            .field("b_modified[26, 27]", &format!("{:02X?}", &self.b_modified_raw))
            .field("n_level[27, 29]", &format!("{:02X?}", &self.n_level_raw))
            .field("n_fullness[29, 31]", &format!("{:02X?}", &self.n_fullness_raw))
            .field("n_relationship[31, 33]", &format!("{:02X?}", &self.n_relationship_raw))
            .field("itid[33, 35]", &format!("{:02X?}", &self.itid_raw))
            .field("atk[35, 37]", &format!("{:02X?}", &self.atk_raw))
            .field("matk[37, 39]", &format!("{:02X?}", &self.matk_raw))
            .field("hit[39, 41]", &format!("{:02X?}", &self.hit_raw))
            .field("critical[41, 43]", &format!("{:02X?}", &self.critical_raw))
            .field("def[43, 45]", &format!("{:02X?}", &self.def_raw))
            .field("mdef[45, 47]", &format!("{:02X?}", &self.mdef_raw))
            .field("flee[47, 49]", &format!("{:02X?}", &self.flee_raw))
            .field("aspd[49, 51]", &format!("{:02X?}", &self.aspd_raw))
            .field("hp[51, 53]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[53, 55]", &format!("{:02X?}", &self.max_hp_raw))
            .field("sp[55, 57]", &format!("{:02X?}", &self.sp_raw))
            .field("max_sp[57, 59]", &format!("{:02X?}", &self.max_sp_raw))
            .field("exp[59, 63]", &format!("{:02X?}", &self.exp_raw))
            .field("max_exp[63, 67]", &format!("{:02X?}", &self.max_exp_raw))
            .field("skpoint[67, 69]", &format!("{:02X?}", &self.skpoint_raw))
            .field("atkrange[69, 71]", &format!("{:02X?}", &self.atkrange_raw))
        .finish()
    }
}

impl Display for PacketZcPropertyHomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("sz_name(char[] as char[])[2, 26]: {}", &self.sz_name.pretty_output()));
        fields.push(format!("b_modified(unsigned char as u8)[26, 27]: {}", &self.b_modified));
        fields.push(format!("n_level(short as i16)[27, 29]: {}", &self.n_level));
        fields.push(format!("n_fullness(short as i16)[29, 31]: {}", &self.n_fullness));
        fields.push(format!("n_relationship(short as i16)[31, 33]: {}", &self.n_relationship));
        fields.push(format!("itid(unsigned short as u16)[33, 35]: {}", &self.itid));
        fields.push(format!("atk(short as i16)[35, 37]: {}", &self.atk));
        fields.push(format!("matk(short as i16)[37, 39]: {}", &self.matk));
        fields.push(format!("hit(short as i16)[39, 41]: {}", &self.hit));
        fields.push(format!("critical(short as i16)[41, 43]: {}", &self.critical));
        fields.push(format!("def(short as i16)[43, 45]: {}", &self.def));
        fields.push(format!("mdef(short as i16)[45, 47]: {}", &self.mdef));
        fields.push(format!("flee(short as i16)[47, 49]: {}", &self.flee));
        fields.push(format!("aspd(short as i16)[49, 51]: {}", &self.aspd));
        fields.push(format!("hp(short as i16)[51, 53]: {}", &self.hp));
        fields.push(format!("max_hp(short as i16)[53, 55]: {}", &self.max_hp));
        fields.push(format!("sp(short as i16)[55, 57]: {}", &self.sp));
        fields.push(format!("max_sp(short as i16)[57, 59]: {}", &self.max_sp));
        fields.push(format!("exp(int as i32)[59, 63]: {}", &self.exp));
        fields.push(format!("max_exp(int as i32)[63, 67]: {}", &self.max_exp));
        fields.push(format!("skpoint(short as i16)[67, 69]: {}", &self.skpoint));
        fields.push(format!("atkrange(short as i16)[69, 71]: {}", &self.atkrange));
        write!(f, "PacketZcPropertyHomun\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangestateMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangestateMer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 3]", &format!("{:02X?}", &self.atype_raw))
            .field("state[3, 4]", &format!("{:02X?}", &self.state_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("data[8, 12]", &format!("{:02X?}", &self.data_raw))
        .finish()
    }
}

impl Display for PacketZcChangestateMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(char as i8)[2, 3]: {}", &self.atype));
        fields.push(format!("state(char as i8)[3, 4]: {}", &self.state));
        fields.push(format!("gid(int as i32)[4, 8]: {}", &self.gid));
        fields.push(format!("data(int as i32)[8, 12]: {}", &self.data));
        write!(f, "PacketZcChangestateMer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRenameMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRenameMer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketCzRenameMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        write!(f, "PacketCzRenameMer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestMovenpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMovenpc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("dest[6, 9]", &format!("{:02X?}", &self.dest_raw))
        .finish()
    }
}

impl Display for PacketCzRequestMovenpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("dest(unsigned char[] as u8[])[6, 9]: {}", &self.dest.pretty_output()));
        write!(f, "PacketCzRequestMovenpc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestActnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestActnpc")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("target_gid[6, 10]", &format!("{:02X?}", &self.target_gid_raw))
            .field("action[10, 11]", &format!("{:02X?}", &self.action_raw))
        .finish()
    }
}

impl Display for PacketCzRequestActnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("target_gid(unsigned long as u32)[6, 10]: {}", &self.target_gid));
        fields.push(format!("action(unsigned char as u8)[10, 11]: {}", &self.action));
        write!(f, "PacketCzRequestActnpc\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestMovetoowner {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMovetoowner")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzRequestMovetoowner {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketCzRequestMovetoowner\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqStorePassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, 4]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcReqStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(short as i16)[2, 4]: {}", &self.info));
        write!(f, "PacketZcReqStorePassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckStorePassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
            .field("password[4, 20]", &format!("{:02X?}", &self.password_raw))
            .field("new_password[20, 36]", &format!("{:02X?}", &self.new_password_raw))
        .finish()
    }
}

impl Display for PacketCzAckStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        fields.push(format!("password(char[] as char[])[4, 20]: {}", &self.password.pretty_output()));
        fields.push(format!("new_password(char[] as char[])[20, 36]: {}", &self.new_password.pretty_output()));
        write!(f, "PacketCzAckStorePassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcResultStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultStorePassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("error_count[4, 6]", &format!("{:02X?}", &self.error_count_raw))
        .finish()
    }
}

impl Display for PacketZcResultStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("error_count(short as i16)[4, 6]: {}", &self.error_count));
        write!(f, "PacketZcResultStorePassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcEventResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcEventResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("event_item_count[2, 6]", &format!("{:02X?}", &self.event_item_count_raw))
        .finish()
    }
}

impl Display for PacketAcEventResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("event_item_count(unsigned long as u32)[2, 6]: {}", &self.event_item_count));
        write!(f, "PacketAcEventResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcRequestCharacterPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRequestCharacterPassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("dummy_value[4, 8]", &format!("{:02X?}", &self.dummy_value_raw))
        .finish()
    }
}

impl Display for PacketHcRequestCharacterPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("dummy_value(unsigned long as u32)[4, 8]: {}", &self.dummy_value));
        write!(f, "PacketHcRequestCharacterPassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailGetList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzMailGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzMailGetList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailReqGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqGetList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("mail_number[4, 8]", &format!("{:02X?}", &self.mail_number_raw))
            .field("mail_list[8, 81]", &format!("{:02X?}", &self.mail_list_raw))
        .finish()
    }
}

impl Display for PacketZcMailReqGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("mail_number(int as i32)[4, 8]: {}", &self.mail_number));
        fields.push(format!("mail_list([] as Vec)[8, 81]: {}", &self.mail_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMailReqGetList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailOpen")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
        .finish()
    }
}

impl Display for PacketCzMailOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        write!(f, "PacketCzMailOpen\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailReqOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqOpen")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("mail_id[4, 8]", &format!("{:02X?}", &self.mail_id_raw))
            .field("header[8, 48]", &format!("{:02X?}", &self.header_raw))
            .field("from_name[48, 72]", &format!("{:02X?}", &self.from_name_raw))
            .field("delete_time[72, 76]", &format!("{:02X?}", &self.delete_time_raw))
            .field("money[76, 80]", &format!("{:02X?}", &self.money_raw))
            .field("count[80, 84]", &format!("{:02X?}", &self.count_raw))
            .field("itid[84, 86]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[86, 88]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[88, 89]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[89, 90]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[90, 91]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[91, 99]", &format!("{:02X?}", &self.slot_raw))
            .field("msg_len[91, 92]", &format!("{:02X?}", &self.msg_len_raw))
            .field("msg[92, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcMailReqOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("mail_id(int as i32)[4, 8]: {}", &self.mail_id));
        fields.push(format!("header(char[] as char[])[8, 48]: {}", &self.header.pretty_output()));
        fields.push(format!("from_name(char[] as char[])[48, 72]: {}", &self.from_name.pretty_output()));
        fields.push(format!("delete_time(long as i32)[72, 76]: {}", &self.delete_time));
        fields.push(format!("money(unsigned long as u32)[76, 80]: {}", &self.money));
        fields.push(format!("count(int as i32)[80, 84]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[84, 86]: {}", &self.itid));
        fields.push(format!("atype(unsigned short as u16)[86, 88]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[88, 89]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[89, 90]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[90, 91]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[91, 99]: {}", &self.slot));
        fields.push(format!("msg_len(unsigned char as u8)[91, 92]: {}", &self.msg_len));
        fields.push(format!("msg(char[] as String)[92, ?]: {}", &self.msg));
        write!(f, "PacketZcMailReqOpen\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
        .finish()
    }
}

impl Display for PacketCzMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        write!(f, "PacketCzMailDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailGetItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
        .finish()
    }
}

impl Display for PacketCzMailGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        write!(f, "PacketCzMailGetItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailReqGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqGetItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcMailReqGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(char as i8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcMailReqGetItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailResetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailResetItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzMailResetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketCzMailResetItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailAddItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzMailAddItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMailSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailSend")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("receive_name[4, 28]", &format!("{:02X?}", &self.receive_name_raw))
            .field("header[28, 68]", &format!("{:02X?}", &self.header_raw))
            .field("msg_len[68, 72]", &format!("{:02X?}", &self.msg_len_raw))
            .field("msg[72, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzMailSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("receive_name(char[] as char[])[4, 28]: {}", &self.receive_name.pretty_output()));
        fields.push(format!("header(char[] as char[])[28, 68]: {}", &self.header.pretty_output()));
        fields.push(format!("msg_len(unsigned long as u32)[68, 72]: {}", &self.msg_len));
        fields.push(format!("msg(char[] as String)[72, ?]: {}", &self.msg));
        write!(f, "PacketCzMailSend\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailReqSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqSend")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcMailReqSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(char as i8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcMailReqSend\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailReceive {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReceive")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
            .field("header[6, 46]", &format!("{:02X?}", &self.header_raw))
            .field("from_name[46, 70]", &format!("{:02X?}", &self.from_name_raw))
        .finish()
    }
}

impl Display for PacketZcMailReceive {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(unsigned long as u32)[2, 6]: {}", &self.mail_id));
        fields.push(format!("header(char[] as char[])[6, 46]: {}", &self.header.pretty_output()));
        fields.push(format!("from_name(char[] as char[])[46, 70]: {}", &self.from_name.pretty_output()));
        write!(f, "PacketZcMailReceive\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionCreate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketCzAuctionCreate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAddItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzAuctionAddItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAdd")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("now_money[2, 6]", &format!("{:02X?}", &self.now_money_raw))
            .field("max_money[6, 10]", &format!("{:02X?}", &self.max_money_raw))
            .field("delete_hour[10, 12]", &format!("{:02X?}", &self.delete_hour_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("now_money(unsigned long as u32)[2, 6]: {}", &self.now_money));
        fields.push(format!("max_money(unsigned long as u32)[6, 10]: {}", &self.max_money));
        fields.push(format!("delete_hour(short as i16)[10, 12]: {}", &self.delete_hour));
        write!(f, "PacketCzAuctionAdd\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionAddCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAddCancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auction_id[2, 6]", &format!("{:02X?}", &self.auction_id_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionAddCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auction_id(unsigned long as u32)[2, 6]: {}", &self.auction_id));
        write!(f, "PacketCzAuctionAddCancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionBuy {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionBuy")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auction_id[2, 6]", &format!("{:02X?}", &self.auction_id_raw))
            .field("money[6, 10]", &format!("{:02X?}", &self.money_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionBuy {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auction_id(unsigned long as u32)[2, 6]: {}", &self.auction_id));
        fields.push(format!("money(unsigned long as u32)[6, 10]: {}", &self.money));
        write!(f, "PacketCzAuctionBuy\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAuctionResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 3]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAuctionResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(char as i8)[2, 3]: {}", &self.result));
        write!(f, "PacketZcAuctionResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionItemSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionItemSearch")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
            .field("auction_id[4, 8]", &format!("{:02X?}", &self.auction_id_raw))
            .field("name[8, 32]", &format!("{:02X?}", &self.name_raw))
            .field("page[32, 34]", &format!("{:02X?}", &self.page_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionItemSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        fields.push(format!("auction_id(unsigned long as u32)[4, 8]: {}", &self.auction_id));
        fields.push(format!("name(char[] as char[])[8, 32]: {}", &self.name.pretty_output()));
        fields.push(format!("page(unsigned short as u16)[32, 34]: {}", &self.page));
        write!(f, "PacketCzAuctionItemSearch\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAuctionItemReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionItemReqSearch")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("max_page[4, 8]", &format!("{:02X?}", &self.max_page_raw))
            .field("number[8, 12]", &format!("{:02X?}", &self.number_raw))
            .field("auction_item_list[12, 95]", &format!("{:02X?}", &self.auction_item_list_raw))
        .finish()
    }
}

impl Display for PacketZcAuctionItemReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("max_page(int as i32)[4, 8]: {}", &self.max_page));
        fields.push(format!("number(int as i32)[8, 12]: {}", &self.number));
        fields.push(format!("auction_item_list([] as Vec)[12, 95]: {}", &self.auction_item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAuctionItemReqSearch\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStarplace")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("which[2, 3]", &format!("{:02X?}", &self.which_raw))
        .finish()
    }
}

impl Display for PacketZcStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("which(char as i8)[2, 3]: {}", &self.which));
        write!(f, "PacketZcStarplace\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAgreeStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAgreeStarplace")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("which[2, 3]", &format!("{:02X?}", &self.which_raw))
        .finish()
    }
}

impl Display for PacketCzAgreeStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("which(char as i8)[2, 3]: {}", &self.which));
        write!(f, "PacketCzAgreeStarplace\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailAddItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketZcAckMailAddItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAuctionAddItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketZcAckAuctionAddItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
            .field("result[6, 8]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        fields.push(format!("result(unsigned short as u16)[6, 8]: {}", &self.result));
        write!(f, "PacketZcAckMailDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaReqGameGuardCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReqGameGuardCheck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCaReqGameGuardCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCaReqGameGuardCheck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckGameGuard")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("uc_answer[2, 3]", &format!("{:02X?}", &self.uc_answer_raw))
        .finish()
    }
}

impl Display for PacketAcAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("uc_answer(unsigned char as u8)[2, 3]: {}", &self.uc_answer));
        write!(f, "PacketAcAckGameGuard\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMakingitemList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakingitemList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("id_list[4, ?]", &format!("{:02X?}", &self.id_list_raw))
        .finish()
    }
}

impl Display for PacketZcMakingitemList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("id_list(unsigned short[] as u16[])[4, ?]: {}", &self.id_list.pretty_output()));
        write!(f, "PacketZcMakingitemList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqMakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakingitem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mk_type[2, 4]", &format!("{:02X?}", &self.mk_type_raw))
            .field("id[4, 6]", &format!("{:02X?}", &self.id_raw))
        .finish()
    }
}

impl Display for PacketCzReqMakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mk_type(short as i16)[2, 4]: {}", &self.mk_type));
        fields.push(format!("id(unsigned short as u16)[4, 6]: {}", &self.id));
        write!(f, "PacketCzReqMakingitem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionReqMyInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionReqMyInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionReqMyInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        write!(f, "PacketCzAuctionReqMyInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAuctionReqMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionReqMySellStop")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auction_id[2, 6]", &format!("{:02X?}", &self.auction_id_raw))
        .finish()
    }
}

impl Display for PacketCzAuctionReqMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auction_id(unsigned long as u32)[2, 6]: {}", &self.auction_id));
        write!(f, "PacketCzAuctionReqMySellStop\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAuctionAckMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionAckMySellStop")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAuctionAckMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        write!(f, "PacketZcAuctionAckMySellStop\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAuctionWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionWindows")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcAuctionWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(int as i32)[2, 6]: {}", &self.atype));
        write!(f, "PacketZcAuctionWindows\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMailWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailWindows")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcMailWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(int as i32)[2, 6]: {}", &self.atype));
        write!(f, "PacketZcMailWindows\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcReqLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginOldekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("m_seed_value[2, 11]", &format!("{:02X?}", &self.m_seed_value_raw))
        .finish()
    }
}

impl Display for PacketAcReqLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("m_seed_value(char[] as char[])[2, 11]: {}", &self.m_seed_value.pretty_output()));
        write!(f, "PacketAcReqLoginOldekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcReqLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginNewekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("m_seed_value[2, 11]", &format!("{:02X?}", &self.m_seed_value_raw))
        .finish()
    }
}

impl Display for PacketAcReqLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("m_seed_value(char[] as char[])[2, 11]: {}", &self.m_seed_value.pretty_output()));
        write!(f, "PacketAcReqLoginNewekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcReqLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginCardpass")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("m_seed_value[2, 11]", &format!("{:02X?}", &self.m_seed_value_raw))
        .finish()
    }
}

impl Display for PacketAcReqLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("m_seed_value(char[] as char[])[2, 11]: {}", &self.m_seed_value.pretty_output()));
        write!(f, "PacketAcReqLoginCardpass\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaAckLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginOldekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("m_seed_value[2, 11]", &format!("{:02X?}", &self.m_seed_value_raw))
            .field("m_ekey[11, 20]", &format!("{:02X?}", &self.m_ekey_raw))
        .finish()
    }
}

impl Display for PacketCaAckLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("m_seed_value(char[] as char[])[2, 11]: {}", &self.m_seed_value.pretty_output()));
        fields.push(format!("m_ekey(char[] as char[])[11, 20]: {}", &self.m_ekey.pretty_output()));
        write!(f, "PacketCaAckLoginOldekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaAckLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginNewekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("m_seed_value[2, 11]", &format!("{:02X?}", &self.m_seed_value_raw))
            .field("m_ekey[11, 20]", &format!("{:02X?}", &self.m_ekey_raw))
        .finish()
    }
}

impl Display for PacketCaAckLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("m_seed_value(char[] as char[])[2, 11]: {}", &self.m_seed_value.pretty_output()));
        fields.push(format!("m_ekey(char[] as char[])[11, 20]: {}", &self.m_ekey.pretty_output()));
        write!(f, "PacketCaAckLoginNewekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaAckLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginCardpass")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mcard_pass[2, 30]", &format!("{:02X?}", &self.mcard_pass_raw))
        .finish()
    }
}

impl Display for PacketCaAckLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mcard_pass(char[] as char[])[2, 30]: {}", &self.mcard_pass.pretty_output()));
        write!(f, "PacketCaAckLoginCardpass\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailNotexist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotexist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailNotexist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailNotexist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailNotusesekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotusesekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailNotusesekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailNotusesekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailNotusedekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotusedekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailNotusedekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailNotusedekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailAuthrefuse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailAuthrefuse")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailAuthrefuse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailAuthrefuse\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailInputekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailInputekey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailInputekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailInputekey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotice")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailNotice\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckEkeyFailNeedcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNeedcardpass")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckEkeyFailNeedcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckEkeyFailNeedcardpass\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckAuthekeyFailNotmatchcardpass")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 4]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(short as i16)[2, 4]: {}", &self.error_code));
        write!(f, "PacketAcAckAuthekeyFailNotmatchcardpass\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckFirstLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckFirstLogin")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketAcAckFirstLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketAcAckFirstLogin\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcReqLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginAccountInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketAcReqLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketAcReqLoginAccountInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaAckLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginAccountInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("sex[2, 4]", &format!("{:02X?}", &self.sex_raw))
            .field("b_point[4, 6]", &format!("{:02X?}", &self.b_point_raw))
            .field("email[6, 40]", &format!("{:02X?}", &self.email_raw))
        .finish()
    }
}

impl Display for PacketCaAckLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("sex(short as i16)[2, 4]: {}", &self.sex));
        fields.push(format!("b_point(short as i16)[4, 6]: {}", &self.b_point));
        fields.push(format!("email(char[] as char[])[6, 40]: {}", &self.email.pretty_output()));
        write!(f, "PacketCaAckLoginAccountInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcAckPtIdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckPtIdInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("sz_ptid[2, 23]", &format!("{:02X?}", &self.sz_ptid_raw))
            .field("sz_ptnum_id[23, 44]", &format!("{:02X?}", &self.sz_ptnum_id_raw))
        .finish()
    }
}

impl Display for PacketAcAckPtIdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("sz_ptid(char[] as char[])[2, 23]: {}", &self.sz_ptid.pretty_output()));
        fields.push(format!("sz_ptnum_id(char[] as char[])[23, 44]: {}", &self.sz_ptnum_id.pretty_output()));
        write!(f, "PacketAcAckPtIdInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMailReturn")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
            .field("receive_name[6, 30]", &format!("{:02X?}", &self.receive_name_raw))
        .finish()
    }
}

impl Display for PacketCzReqMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        fields.push(format!("receive_name(char[] as char[])[6, 30]: {}", &self.receive_name.pretty_output()));
        write!(f, "PacketCzReqMailReturn\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailReturn")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("mail_id[2, 6]", &format!("{:02X?}", &self.mail_id_raw))
            .field("result[6, 8]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcAckMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("mail_id(int as i32)[2, 6]: {}", &self.mail_id));
        fields.push(format!("result(short as i16)[6, 8]: {}", &self.result));
        write!(f, "PacketZcAckMailReturn\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnter2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("auth_code[6, 10]", &format!("{:02X?}", &self.auth_code_raw))
            .field("user_level[10, 14]", &format!("{:02X?}", &self.user_level_raw))
            .field("client_type[14, 16]", &format!("{:02X?}", &self.client_type_raw))
            .field("sex[16, 17]", &format!("{:02X?}", &self.sex_raw))
            .field("mac_data[17, 33]", &format!("{:02X?}", &self.mac_data_raw))
            .field("i_account_sid[33, 37]", &format!("{:02X?}", &self.i_account_sid_raw))
        .finish()
    }
}

impl Display for PacketChEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("auth_code(int as i32)[6, 10]: {}", &self.auth_code));
        fields.push(format!("user_level(unsigned long as u32)[10, 14]: {}", &self.user_level));
        fields.push(format!("client_type(unsigned short as u16)[14, 16]: {}", &self.client_type));
        fields.push(format!("sex(unsigned char as u8)[16, 17]: {}", &self.sex));
        fields.push(format!("mac_data(char[] as char[])[17, 33]: {}", &self.mac_data.pretty_output()));
        fields.push(format!("i_account_sid(int as i32)[33, 37]: {}", &self.i_account_sid));
        write!(f, "PacketChEnter2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaAcceptLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAcceptLogin2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("auth_code[4, 8]", &format!("{:02X?}", &self.auth_code_raw))
            .field("aid[8, 12]", &format!("{:02X?}", &self.aid_raw))
            .field("user_level[12, 16]", &format!("{:02X?}", &self.user_level_raw))
            .field("last_login_ip[16, 20]", &format!("{:02X?}", &self.last_login_ip_raw))
            .field("last_login_time[20, 46]", &format!("{:02X?}", &self.last_login_time_raw))
            .field("sex[46, 47]", &format!("{:02X?}", &self.sex_raw))
            .field("i_account_sid[47, 51]", &format!("{:02X?}", &self.i_account_sid_raw))
        .finish()
    }
}

impl Display for PacketCaAcceptLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("auth_code(int as i32)[4, 8]: {}", &self.auth_code));
        fields.push(format!("aid(unsigned long as u32)[8, 12]: {}", &self.aid));
        fields.push(format!("user_level(unsigned long as u32)[12, 16]: {}", &self.user_level));
        fields.push(format!("last_login_ip(unsigned long as u32)[16, 20]: {}", &self.last_login_ip));
        fields.push(format!("last_login_time(char[] as char[])[20, 46]: {}", &self.last_login_time.pretty_output()));
        fields.push(format!("sex(unsigned char as u8)[46, 47]: {}", &self.sex));
        fields.push(format!("i_account_sid(int as i32)[47, 51]: {}", &self.i_account_sid));
        write!(f, "PacketCaAcceptLogin2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaLoginPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLoginPcbang")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd[30, 54]", &format!("{:02X?}", &self.passwd_raw))
            .field("clienttype[54, 55]", &format!("{:02X?}", &self.clienttype_raw))
            .field("ip[55, 71]", &format!("{:02X?}", &self.ip_raw))
            .field("mac_adress[71, 84]", &format!("{:02X?}", &self.mac_adress_raw))
        .finish()
    }
}

impl Display for PacketCaLoginPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd(char[] as char[])[30, 54]: {}", &self.passwd.pretty_output()));
        fields.push(format!("clienttype(unsigned char as u8)[54, 55]: {}", &self.clienttype));
        fields.push(format!("ip(char[] as char[])[55, 71]: {}", &self.ip.pretty_output()));
        fields.push(format!("mac_adress(char[] as char[])[71, 84]: {}", &self.mac_adress.pretty_output()));
        write!(f, "PacketCaLoginPcbang\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPcbang")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcNotifyPcbang\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzHuntinglist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzHuntinglist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHuntinglist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("hunting_list[4, 16]", &format!("{:02X?}", &self.hunting_list_raw))
        .finish()
    }
}

impl Display for PacketZcHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("hunting_list([] as Vec)[4, 16]: {}", &self.hunting_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcHuntinglist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcbangEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcbangEffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp_factor[2, 6]", &format!("{:02X?}", &self.exp_factor_raw))
            .field("exp_factor2[6, 10]", &format!("{:02X?}", &self.exp_factor2_raw))
            .field("drop_factor[10, 14]", &format!("{:02X?}", &self.drop_factor_raw))
        .finish()
    }
}

impl Display for PacketZcPcbangEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp_factor(int as i32)[2, 6]: {}", &self.exp_factor));
        fields.push(format!("exp_factor2(int as i32)[6, 10]: {}", &self.exp_factor2));
        fields.push(format!("drop_factor(int as i32)[10, 14]: {}", &self.drop_factor));
        write!(f, "PacketZcPcbangEffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaLogin4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin4")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd_md5[30, 46]", &format!("{:02X?}", &self.passwd_md5_raw))
            .field("clienttype[46, 47]", &format!("{:02X?}", &self.clienttype_raw))
            .field("mac_data[47, 60]", &format!("{:02X?}", &self.mac_data_raw))
        .finish()
    }
}

impl Display for PacketCaLogin4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd_md5(char[] as char[])[30, 46]: {}", &self.passwd_md5.pretty_output()));
        fields.push(format!("clienttype(unsigned char as u8)[46, 47]: {}", &self.clienttype));
        fields.push(format!("mac_data(char[] as char[])[47, 60]: {}", &self.mac_data.pretty_output()));
        write!(f, "PacketCaLogin4\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPropertyMerce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyMerce")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("level[26, 28]", &format!("{:02X?}", &self.level_raw))
            .field("faith[28, 30]", &format!("{:02X?}", &self.faith_raw))
            .field("summon_count[30, 32]", &format!("{:02X?}", &self.summon_count_raw))
            .field("atk[32, 34]", &format!("{:02X?}", &self.atk_raw))
            .field("matk[34, 36]", &format!("{:02X?}", &self.matk_raw))
            .field("hit[36, 38]", &format!("{:02X?}", &self.hit_raw))
            .field("critical[38, 40]", &format!("{:02X?}", &self.critical_raw))
            .field("def[40, 42]", &format!("{:02X?}", &self.def_raw))
            .field("mdef[42, 44]", &format!("{:02X?}", &self.mdef_raw))
            .field("flee[44, 46]", &format!("{:02X?}", &self.flee_raw))
            .field("aspd[46, 48]", &format!("{:02X?}", &self.aspd_raw))
            .field("hp[48, 50]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[50, 52]", &format!("{:02X?}", &self.max_hp_raw))
            .field("sp[52, 54]", &format!("{:02X?}", &self.sp_raw))
            .field("max_sp[54, 56]", &format!("{:02X?}", &self.max_sp_raw))
            .field("atkrange[56, 58]", &format!("{:02X?}", &self.atkrange_raw))
            .field("exp[58, 62]", &format!("{:02X?}", &self.exp_raw))
        .finish()
    }
}

impl Display for PacketZcPropertyMerce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("level(short as i16)[26, 28]: {}", &self.level));
        fields.push(format!("faith(short as i16)[28, 30]: {}", &self.faith));
        fields.push(format!("summon_count(short as i16)[30, 32]: {}", &self.summon_count));
        fields.push(format!("atk(short as i16)[32, 34]: {}", &self.atk));
        fields.push(format!("matk(short as i16)[34, 36]: {}", &self.matk));
        fields.push(format!("hit(short as i16)[36, 38]: {}", &self.hit));
        fields.push(format!("critical(short as i16)[38, 40]: {}", &self.critical));
        fields.push(format!("def(short as i16)[40, 42]: {}", &self.def));
        fields.push(format!("mdef(short as i16)[42, 44]: {}", &self.mdef));
        fields.push(format!("flee(short as i16)[44, 46]: {}", &self.flee));
        fields.push(format!("aspd(short as i16)[46, 48]: {}", &self.aspd));
        fields.push(format!("hp(short as i16)[48, 50]: {}", &self.hp));
        fields.push(format!("max_hp(short as i16)[50, 52]: {}", &self.max_hp));
        fields.push(format!("sp(short as i16)[52, 54]: {}", &self.sp));
        fields.push(format!("max_sp(short as i16)[54, 56]: {}", &self.max_sp));
        fields.push(format!("atkrange(short as i16)[56, 58]: {}", &self.atkrange));
        fields.push(format!("exp(int as i32)[58, 62]: {}", &self.exp));
        write!(f, "PacketZcPropertyMerce\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShandaProtect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShandaProtect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("code_len[4, 6]", &format!("{:02X?}", &self.code_len_raw))
            .field("code[6, ?]", &format!("{:02X?}", &self.code_raw))
        .finish()
    }
}

impl Display for PacketZcShandaProtect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("code_len(short as i16)[4, 6]: {}", &self.code_len));
        fields.push(format!("code(char[] as String)[6, ?]: {}", &self.code));
        write!(f, "PacketZcShandaProtect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaClientType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaClientType")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("client_type[2, 4]", &format!("{:02X?}", &self.client_type_raw))
            .field("n_ver[4, 8]", &format!("{:02X?}", &self.n_ver_raw))
        .finish()
    }
}

impl Display for PacketCaClientType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("client_type(short as i16)[2, 4]: {}", &self.client_type));
        fields.push(format!("n_ver(int as i32)[4, 8]: {}", &self.n_ver));
        write!(f, "PacketCaClientType\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGangsiPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGangsiPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point[2, 6]", &format!("{:02X?}", &self.point_raw))
            .field("total_point[6, 10]", &format!("{:02X?}", &self.total_point_raw))
            .field("packet_switch[10, 12]", &format!("{:02X?}", &self.packet_switch_raw))
        .finish()
    }
}

impl Display for PacketZcGangsiPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point(int as i32)[2, 6]: {}", &self.point));
        fields.push(format!("total_point(int as i32)[6, 10]: {}", &self.total_point));
        fields.push(format!("packet_switch(short as i16)[10, 12]: {}", &self.packet_switch));
        write!(f, "PacketZcGangsiPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGangsiRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_switch[2, 4]", &format!("{:02X?}", &self.packet_switch_raw))
        .finish()
    }
}

impl Display for PacketCzGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_switch(short as i16)[2, 4]: {}", &self.packet_switch));
        write!(f, "PacketCzGangsiRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGangsiRank")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 12]", &format!("{:02X?}", &self.name_raw))
            .field("point[12, 22]", &format!("{:02X?}", &self.point_raw))
            .field("packet_switch[22, 24]", &format!("{:02X?}", &self.packet_switch_raw))
        .finish()
    }
}

impl Display for PacketZcGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 12]: {}", &self.name.pretty_output()));
        fields.push(format!("point(int[] as i32[])[12, 22]: {}", &self.point.pretty_output()));
        fields.push(format!("packet_switch(short as i16)[22, 24]: {}", &self.packet_switch));
        write!(f, "PacketZcGangsiRank\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAid")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcAid\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyEffect3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("effect_id[6, 10]", &format!("{:02X?}", &self.effect_id_raw))
            .field("numdata[10, 14]", &format!("{:02X?}", &self.numdata_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyEffect3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("effect_id(int as i32)[6, 10]: {}", &self.effect_id));
        fields.push(format!("numdata(int as i32)[10, 14]: {}", &self.numdata));
        write!(f, "PacketZcNotifyEffect3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeathQuestion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("qcategory[2, 4]", &format!("{:02X?}", &self.qcategory_raw))
            .field("qnum[4, 6]", &format!("{:02X?}", &self.qnum_raw))
        .finish()
    }
}

impl Display for PacketZcDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("qcategory(short as i16)[2, 4]: {}", &self.qcategory));
        fields.push(format!("qnum(short as i16)[4, 6]: {}", &self.qnum));
        write!(f, "PacketZcDeathQuestion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDeathQuestion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("qanswer[2, 4]", &format!("{:02X?}", &self.qanswer_raw))
        .finish()
    }
}

impl Display for PacketCzDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("qanswer(short as i16)[2, 4]: {}", &self.qanswer));
        write!(f, "PacketCzDeathQuestion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcCashPointItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("cash_point[4, 8]", &format!("{:02X?}", &self.cash_point_raw))
            .field("item_list[8, 19]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("cash_point(unsigned long as u32)[4, 8]: {}", &self.cash_point));
        fields.push(format!("item_list([] as Vec)[8, 19]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcCashPointItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPcBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcBuyCashPointItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzPcBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketCzPcBuyCashPointItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcCashPointUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcCashPointUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("cash_point[2, 6]", &format!("{:02X?}", &self.cash_point_raw))
            .field("error[6, 8]", &format!("{:02X?}", &self.error_raw))
        .finish()
    }
}

impl Display for PacketZcPcCashPointUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("cash_point(unsigned long as u32)[2, 6]: {}", &self.cash_point));
        fields.push(format!("error(short as i16)[6, 8]: {}", &self.error));
        write!(f, "PacketZcPcCashPointUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcShowefstUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcShowefstUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("effect_state[6, 10]", &format!("{:02X?}", &self.effect_state_raw))
            .field("clevel[10, 14]", &format!("{:02X?}", &self.clevel_raw))
            .field("show_efst[14, 18]", &format!("{:02X?}", &self.show_efst_raw))
        .finish()
    }
}

impl Display for PacketZcNpcShowefstUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("effect_state(int as i32)[6, 10]: {}", &self.effect_state));
        fields.push(format!("clevel(int as i32)[10, 14]: {}", &self.clevel));
        fields.push(format!("show_efst(int as i32)[14, 18]: {}", &self.show_efst));
        write!(f, "PacketZcNpcShowefstUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChSelectCharGoingtobeused {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectCharGoingtobeused")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dw_aid[2, 6]", &format!("{:02X?}", &self.dw_aid_raw))
            .field("n_count_selected_char[6, 10]", &format!("{:02X?}", &self.n_count_selected_char_raw))
            .field("ardw_selected_gid[10, 19]", &format!("{:02X?}", &self.ardw_selected_gid_raw))
        .finish()
    }
}

impl Display for PacketChSelectCharGoingtobeused {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dw_aid(unsigned long as u32)[2, 6]: {}", &self.dw_aid));
        fields.push(format!("n_count_selected_char(int as i32)[6, 10]: {}", &self.n_count_selected_char));
        fields.push(format!("ardw_selected_gid(unsigned long[] as u32[])[10, 19]: {}", &self.ardw_selected_gid.pretty_output()));
        write!(f, "PacketChSelectCharGoingtobeused\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChReqIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChReqIsValidCharname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dw_aid[2, 6]", &format!("{:02X?}", &self.dw_aid_raw))
            .field("dw_gid[6, 10]", &format!("{:02X?}", &self.dw_gid_raw))
            .field("sz_char_name[10, 34]", &format!("{:02X?}", &self.sz_char_name_raw))
        .finish()
    }
}

impl Display for PacketChReqIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dw_aid(unsigned long as u32)[2, 6]: {}", &self.dw_aid));
        fields.push(format!("dw_gid(unsigned long as u32)[6, 10]: {}", &self.dw_gid));
        fields.push(format!("sz_char_name(char[] as char[])[10, 34]: {}", &self.sz_char_name.pretty_output()));
        write!(f, "PacketChReqIsValidCharname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAckIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAckIsValidCharname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("s_result[2, 4]", &format!("{:02X?}", &self.s_result_raw))
        .finish()
    }
}

impl Display for PacketHcAckIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("s_result(short as i16)[2, 4]: {}", &self.s_result));
        write!(f, "PacketHcAckIsValidCharname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChReqChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChReqChangeCharname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dw_gid[2, 6]", &format!("{:02X?}", &self.dw_gid_raw))
        .finish()
    }
}

impl Display for PacketChReqChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dw_gid(unsigned long as u32)[2, 6]: {}", &self.dw_gid));
        write!(f, "PacketChReqChangeCharname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAckChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAckChangeCharname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("s_result[2, 4]", &format!("{:02X?}", &self.s_result_raw))
        .finish()
    }
}

impl Display for PacketHcAckChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("s_result(short as i16)[2, 4]: {}", &self.s_result));
        write!(f, "PacketHcAckChangeCharname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg[2, 4]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg(unsigned short as u16)[2, 4]: {}", &self.msg));
        write!(f, "PacketZcMsg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzStandingResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzStandingResurrection")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzStandingResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzStandingResurrection\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBossInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBossInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info_type[2, 3]", &format!("{:02X?}", &self.info_type_raw))
            .field("x_pos[3, 7]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[7, 11]", &format!("{:02X?}", &self.y_pos_raw))
            .field("min_hour[11, 13]", &format!("{:02X?}", &self.min_hour_raw))
            .field("min_minute[13, 15]", &format!("{:02X?}", &self.min_minute_raw))
            .field("max_hour[15, 17]", &format!("{:02X?}", &self.max_hour_raw))
            .field("max_minute[17, 19]", &format!("{:02X?}", &self.max_minute_raw))
            .field("name[19, 70]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcBossInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info_type(unsigned char as u8)[2, 3]: {}", &self.info_type));
        fields.push(format!("x_pos(int as i32)[3, 7]: {}", &self.x_pos));
        fields.push(format!("y_pos(int as i32)[7, 11]: {}", &self.y_pos));
        fields.push(format!("min_hour(unsigned short as u16)[11, 13]: {}", &self.min_hour));
        fields.push(format!("min_minute(unsigned short as u16)[13, 15]: {}", &self.min_minute));
        fields.push(format!("max_hour(unsigned short as u16)[15, 17]: {}", &self.max_hour));
        fields.push(format!("max_minute(unsigned short as u16)[17, 19]: {}", &self.max_minute));
        fields.push(format!("name(char[] as char[])[19, 70]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcBossInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReadBook {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReadBook")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("book_id[2, 6]", &format!("{:02X?}", &self.book_id_raw))
            .field("page[6, 10]", &format!("{:02X?}", &self.page_raw))
        .finish()
    }
}

impl Display for PacketZcReadBook {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("book_id(unsigned long as u32)[2, 6]: {}", &self.book_id));
        fields.push(format!("page(unsigned long as u32)[6, 10]: {}", &self.page));
        write!(f, "PacketZcReadBook\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 28]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 28]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcEquipmentItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 28]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 28]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreEquipmentItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 28]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 28]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartEquipmentItemlist2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCashTimeCounter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCashTimeCounter")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("remain_second[4, 8]", &format!("{:02X?}", &self.remain_second_raw))
        .finish()
    }
}

impl Display for PacketZcCashTimeCounter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("remain_second(unsigned long as u32)[4, 8]: {}", &self.remain_second));
        write!(f, "PacketZcCashTimeCounter\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCashItemDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCashItemDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("itid[4, 6]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcCashItemDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[4, 6]: {}", &self.itid));
        write!(f, "PacketZcCashItemDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemPickupAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[9, 10]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[10, 11]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[11, 19]", &format!("{:02X?}", &self.slot_raw))
            .field("location[11, 13]", &format!("{:02X?}", &self.location_raw))
            .field("atype[13, 14]", &format!("{:02X?}", &self.atype_raw))
            .field("result[14, 15]", &format!("{:02X?}", &self.result_raw))
            .field("hire_expire_date[15, 19]", &format!("{:02X?}", &self.hire_expire_date_raw))
        .finish()
    }
}

impl Display for PacketZcItemPickupAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(unsigned short as u16)[4, 6]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[9, 10]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[10, 11]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[11, 19]: {}", &self.slot));
        fields.push(format!("location(unsigned short as u16)[11, 13]: {}", &self.location));
        fields.push(format!("atype(unsigned char as u8)[13, 14]: {}", &self.atype));
        fields.push(format!("result(unsigned char as u8)[14, 15]: {}", &self.result));
        fields.push(format!("hire_expire_date(long as i32)[15, 19]: {}", &self.hire_expire_date));
        write!(f, "PacketZcItemPickupAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMerInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerInit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("atk[6, 8]", &format!("{:02X?}", &self.atk_raw))
            .field("matk[8, 10]", &format!("{:02X?}", &self.matk_raw))
            .field("hit[10, 12]", &format!("{:02X?}", &self.hit_raw))
            .field("critical[12, 14]", &format!("{:02X?}", &self.critical_raw))
            .field("def[14, 16]", &format!("{:02X?}", &self.def_raw))
            .field("mdef[16, 18]", &format!("{:02X?}", &self.mdef_raw))
            .field("flee[18, 20]", &format!("{:02X?}", &self.flee_raw))
            .field("aspd[20, 22]", &format!("{:02X?}", &self.aspd_raw))
            .field("name[22, 46]", &format!("{:02X?}", &self.name_raw))
            .field("level[46, 48]", &format!("{:02X?}", &self.level_raw))
            .field("hp[48, 52]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[52, 56]", &format!("{:02X?}", &self.max_hp_raw))
            .field("sp[56, 60]", &format!("{:02X?}", &self.sp_raw))
            .field("max_sp[60, 64]", &format!("{:02X?}", &self.max_sp_raw))
            .field("expire_date[64, 68]", &format!("{:02X?}", &self.expire_date_raw))
            .field("faith[68, 70]", &format!("{:02X?}", &self.faith_raw))
            .field("toal_call_num[70, 74]", &format!("{:02X?}", &self.toal_call_num_raw))
            .field("approval_monster_kill_counter[74, 78]", &format!("{:02X?}", &self.approval_monster_kill_counter_raw))
            .field("atkrange[78, 80]", &format!("{:02X?}", &self.atkrange_raw))
        .finish()
    }
}

impl Display for PacketZcMerInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(int as i32)[2, 6]: {}", &self.aid));
        fields.push(format!("atk(short as i16)[6, 8]: {}", &self.atk));
        fields.push(format!("matk(short as i16)[8, 10]: {}", &self.matk));
        fields.push(format!("hit(short as i16)[10, 12]: {}", &self.hit));
        fields.push(format!("critical(short as i16)[12, 14]: {}", &self.critical));
        fields.push(format!("def(short as i16)[14, 16]: {}", &self.def));
        fields.push(format!("mdef(short as i16)[16, 18]: {}", &self.mdef));
        fields.push(format!("flee(short as i16)[18, 20]: {}", &self.flee));
        fields.push(format!("aspd(short as i16)[20, 22]: {}", &self.aspd));
        fields.push(format!("name(char[] as char[])[22, 46]: {}", &self.name.pretty_output()));
        fields.push(format!("level(short as i16)[46, 48]: {}", &self.level));
        fields.push(format!("hp(int as i32)[48, 52]: {}", &self.hp));
        fields.push(format!("max_hp(int as i32)[52, 56]: {}", &self.max_hp));
        fields.push(format!("sp(int as i32)[56, 60]: {}", &self.sp));
        fields.push(format!("max_sp(int as i32)[60, 64]: {}", &self.max_sp));
        fields.push(format!("expire_date(long as i32)[64, 68]: {}", &self.expire_date));
        fields.push(format!("faith(short as i16)[68, 70]: {}", &self.faith));
        fields.push(format!("toal_call_num(int as i32)[70, 74]: {}", &self.toal_call_num));
        fields.push(format!("approval_monster_kill_counter(int as i32)[74, 78]: {}", &self.approval_monster_kill_counter));
        fields.push(format!("atkrange(short as i16)[78, 80]: {}", &self.atkrange));
        write!(f, "PacketZcMerInit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMerProperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerProperty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atk[2, 4]", &format!("{:02X?}", &self.atk_raw))
            .field("matk[4, 6]", &format!("{:02X?}", &self.matk_raw))
            .field("hit[6, 8]", &format!("{:02X?}", &self.hit_raw))
            .field("critical[8, 10]", &format!("{:02X?}", &self.critical_raw))
            .field("def[10, 12]", &format!("{:02X?}", &self.def_raw))
            .field("mdef[12, 14]", &format!("{:02X?}", &self.mdef_raw))
            .field("flee[14, 16]", &format!("{:02X?}", &self.flee_raw))
            .field("aspd[16, 18]", &format!("{:02X?}", &self.aspd_raw))
            .field("name[18, 42]", &format!("{:02X?}", &self.name_raw))
            .field("level[42, 44]", &format!("{:02X?}", &self.level_raw))
            .field("hp[44, 46]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[46, 48]", &format!("{:02X?}", &self.max_hp_raw))
            .field("sp[48, 50]", &format!("{:02X?}", &self.sp_raw))
            .field("max_sp[50, 52]", &format!("{:02X?}", &self.max_sp_raw))
            .field("expire_date[52, 56]", &format!("{:02X?}", &self.expire_date_raw))
            .field("faith[56, 58]", &format!("{:02X?}", &self.faith_raw))
            .field("toal_call_num[58, 62]", &format!("{:02X?}", &self.toal_call_num_raw))
            .field("approval_monster_kill_counter[62, 66]", &format!("{:02X?}", &self.approval_monster_kill_counter_raw))
        .finish()
    }
}

impl Display for PacketZcMerProperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atk(short as i16)[2, 4]: {}", &self.atk));
        fields.push(format!("matk(short as i16)[4, 6]: {}", &self.matk));
        fields.push(format!("hit(short as i16)[6, 8]: {}", &self.hit));
        fields.push(format!("critical(short as i16)[8, 10]: {}", &self.critical));
        fields.push(format!("def(short as i16)[10, 12]: {}", &self.def));
        fields.push(format!("mdef(short as i16)[12, 14]: {}", &self.mdef));
        fields.push(format!("flee(short as i16)[14, 16]: {}", &self.flee));
        fields.push(format!("aspd(short as i16)[16, 18]: {}", &self.aspd));
        fields.push(format!("name(char[] as char[])[18, 42]: {}", &self.name.pretty_output()));
        fields.push(format!("level(short as i16)[42, 44]: {}", &self.level));
        fields.push(format!("hp(short as i16)[44, 46]: {}", &self.hp));
        fields.push(format!("max_hp(short as i16)[46, 48]: {}", &self.max_hp));
        fields.push(format!("sp(short as i16)[48, 50]: {}", &self.sp));
        fields.push(format!("max_sp(short as i16)[50, 52]: {}", &self.max_sp));
        fields.push(format!("expire_date(long as i32)[52, 56]: {}", &self.expire_date));
        fields.push(format!("faith(short as i16)[56, 58]: {}", &self.faith));
        fields.push(format!("toal_call_num(int as i32)[58, 62]: {}", &self.toal_call_num));
        fields.push(format!("approval_monster_kill_counter(int as i32)[62, 66]: {}", &self.approval_monster_kill_counter));
        write!(f, "PacketZcMerProperty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMerSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerSkillinfoList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("skill_list[4, 41]", &format!("{:02X?}", &self.skill_list_raw))
        .finish()
    }
}

impl Display for PacketZcMerSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("skill_list([] as Vec)[4, 41]: {}", &self.skill_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMerSkillinfoList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMerSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerSkillinfoUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("level[4, 6]", &format!("{:02X?}", &self.level_raw))
            .field("spcost[6, 8]", &format!("{:02X?}", &self.spcost_raw))
            .field("attack_range[8, 10]", &format!("{:02X?}", &self.attack_range_raw))
            .field("upgradable[10, 11]", &format!("{:02X?}", &self.upgradable_raw))
        .finish()
    }
}

impl Display for PacketZcMerSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("level(short as i16)[4, 6]: {}", &self.level));
        fields.push(format!("spcost(short as i16)[6, 8]: {}", &self.spcost));
        fields.push(format!("attack_range(short as i16)[8, 10]: {}", &self.attack_range));
        fields.push(format!("upgradable(bool as bool)[10, 11]: {}", &self.upgradable));
        write!(f, "PacketZcMerSkillinfoUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMerCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMerCommand")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("command[2, 3]", &format!("{:02X?}", &self.command_raw))
        .finish()
    }
}

impl Display for PacketCzMerCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("command(char as i8)[2, 3]: {}", &self.command));
        write!(f, "PacketCzMerCommand\n {}", fields.join(",\n "))
    }
}

impl Debug for UnusedPacketCzMerUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("UnusedPacketCzMerUseSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("selected_level[2, 4]", &format!("{:02X?}", &self.selected_level_raw))
            .field("skid[4, 6]", &format!("{:02X?}", &self.skid_raw))
            .field("target_id[6, 10]", &format!("{:02X?}", &self.target_id_raw))
        .finish()
    }
}

impl Display for UnusedPacketCzMerUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("selected_level(short as i16)[2, 4]: {}", &self.selected_level));
        fields.push(format!("skid(unsigned short as u16)[4, 6]: {}", &self.skid));
        fields.push(format!("target_id(unsigned long as u32)[6, 10]: {}", &self.target_id));
        write!(f, "UnusedPacketCzMerUseSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for UnusedPacketCzMerUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("UnusedPacketCzMerUpgradeSkilllevel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for UnusedPacketCzMerUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        write!(f, "UnusedPacketCzMerUpgradeSkilllevel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMerParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerParChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var[2, 4]", &format!("{:02X?}", &self.var_raw))
            .field("value[4, 8]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcMerParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var(unsigned short as u16)[2, 4]: {}", &self.var));
        fields.push(format!("value(int as i32)[4, 8]: {}", &self.value));
        write!(f, "PacketZcMerParChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcGameguardLingoKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGameguardLingoKey")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("lingo_key[2, ?]", &format!("{:02X?}", &self.lingo_key_raw))
        .finish()
    }
}

impl Display for PacketZcGameguardLingoKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("lingo_key(struct as Struct)[2, ?]: {}", &self.lingo_key));
        write!(f, "PacketZcGameguardLingoKey\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzKsyEvent {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzKsyEvent")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzKsyEvent {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        write!(f, "PacketCzKsyEvent\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqCashPassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, 4]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcReqCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(short as i16)[2, 4]: {}", &self.info));
        write!(f, "PacketZcReqCashPassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzAckCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckCashPassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
            .field("password[4, 20]", &format!("{:02X?}", &self.password_raw))
            .field("new_password[20, 36]", &format!("{:02X?}", &self.new_password_raw))
        .finish()
    }
}

impl Display for PacketCzAckCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        fields.push(format!("password(char[] as char[])[4, 20]: {}", &self.password.pretty_output()));
        fields.push(format!("new_password(char[] as char[])[20, 36]: {}", &self.new_password.pretty_output()));
        write!(f, "PacketCzAckCashPassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcResultCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultCashPassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("error_count[4, 6]", &format!("{:02X?}", &self.error_count_raw))
        .finish()
    }
}

impl Display for PacketZcResultCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("error_count(short as i16)[4, 6]: {}", &self.error_count));
        write!(f, "PacketZcResultCashPassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcRequestSecondPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRequestSecondPassword")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("dw_seed[4, 8]", &format!("{:02X?}", &self.dw_seed_raw))
        .finish()
    }
}

impl Display for PacketAcRequestSecondPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("dw_seed(unsigned long as u32)[4, 8]: {}", &self.dw_seed));
        write!(f, "PacketAcRequestSecondPassword\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaLoginHan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLoginHan")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("version[2, 6]", &format!("{:02X?}", &self.version_raw))
            .field("id[6, 30]", &format!("{:02X?}", &self.id_raw))
            .field("passwd[30, 54]", &format!("{:02X?}", &self.passwd_raw))
            .field("clienttype[54, 55]", &format!("{:02X?}", &self.clienttype_raw))
            .field("m_sz_ip[55, 71]", &format!("{:02X?}", &self.m_sz_ip_raw))
            .field("m_sz_mac_addr[71, 84]", &format!("{:02X?}", &self.m_sz_mac_addr_raw))
            .field("is_han_game_user[84, 85]", &format!("{:02X?}", &self.is_han_game_user_raw))
        .finish()
    }
}

impl Display for PacketCaLoginHan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("version(unsigned long as u32)[2, 6]: {}", &self.version));
        fields.push(format!("id(char[] as char[])[6, 30]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd(char[] as char[])[30, 54]: {}", &self.passwd.pretty_output()));
        fields.push(format!("clienttype(unsigned char as u8)[54, 55]: {}", &self.clienttype));
        fields.push(format!("m_sz_ip(char[] as char[])[55, 71]: {}", &self.m_sz_ip.pretty_output()));
        fields.push(format!("m_sz_mac_addr(char[] as char[])[71, 84]: {}", &self.m_sz_mac_addr.pretty_output()));
        fields.push(format!("is_han_game_user(unsigned char as u8)[84, 85]: {}", &self.is_han_game_user));
        write!(f, "PacketCaLoginHan\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAllQuestList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAllQuestList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("quest_count[4, 8]", &format!("{:02X?}", &self.quest_count_raw))
            .field("quest_list[8, 13]", &format!("{:02X?}", &self.quest_list_raw))
        .finish()
    }
}

impl Display for PacketZcAllQuestList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("quest_count(int as i32)[4, 8]: {}", &self.quest_count));
        fields.push(format!("quest_list([] as Vec)[8, 13]: {}", &self.quest_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAllQuestList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAllQuestMission {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAllQuestMission")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("count[4, 8]", &format!("{:02X?}", &self.count_raw))
            .field("quest_mission_list[8, 112]", &format!("{:02X?}", &self.quest_mission_list_raw))
        .finish()
    }
}

impl Display for PacketZcAllQuestMission {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("count(int as i32)[4, 8]: {}", &self.count));
        fields.push(format!("quest_mission_list([] as Vec)[8, 112]: {}", &self.quest_mission_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAllQuestMission\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddQuest")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("quest_id[2, 6]", &format!("{:02X?}", &self.quest_id_raw))
            .field("active[6, 7]", &format!("{:02X?}", &self.active_raw))
            .field("quest_svr_time[7, 11]", &format!("{:02X?}", &self.quest_svr_time_raw))
            .field("quest_end_time[11, 15]", &format!("{:02X?}", &self.quest_end_time_raw))
            .field("count[15, 17]", &format!("{:02X?}", &self.count_raw))
            .field("hunt[17, 47]", &format!("{:02X?}", &self.hunt_raw))
        .finish()
    }
}

impl Display for PacketZcAddQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("quest_id(unsigned long as u32)[2, 6]: {}", &self.quest_id));
        fields.push(format!("active(bool as bool)[6, 7]: {}", &self.active));
        fields.push(format!("quest_svr_time(long as i32)[7, 11]: {}", &self.quest_svr_time));
        fields.push(format!("quest_end_time(long as i32)[11, 15]: {}", &self.quest_end_time));
        fields.push(format!("count(short as i16)[15, 17]: {}", &self.count));
        fields.push(format!("hunt([] as Vec)[17, 47]: {}", &self.hunt.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAddQuest\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDelQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDelQuest")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("quest_id[2, 6]", &format!("{:02X?}", &self.quest_id_raw))
        .finish()
    }
}

impl Display for PacketZcDelQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("quest_id(unsigned long as u32)[2, 6]: {}", &self.quest_id));
        write!(f, "PacketZcDelQuest\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateMissionHunt")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("mob_hunt_list[6, 18]", &format!("{:02X?}", &self.mob_hunt_list_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("mob_hunt_list([] as Vec)[6, 18]: {}", &self.mob_hunt_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcUpdateMissionHunt\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzActiveQuest")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("quest_id[2, 6]", &format!("{:02X?}", &self.quest_id_raw))
            .field("active[6, 7]", &format!("{:02X?}", &self.active_raw))
        .finish()
    }
}

impl Display for PacketCzActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("quest_id(unsigned long as u32)[2, 6]: {}", &self.quest_id));
        fields.push(format!("active(bool as bool)[6, 7]: {}", &self.active));
        write!(f, "PacketCzActiveQuest\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcActiveQuest")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("quest_id[2, 6]", &format!("{:02X?}", &self.quest_id_raw))
            .field("active[6, 7]", &format!("{:02X?}", &self.active_raw))
        .finish()
    }
}

impl Display for PacketZcActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("quest_id(unsigned long as u32)[2, 6]: {}", &self.quest_id));
        fields.push(format!("active(bool as bool)[6, 7]: {}", &self.active));
        write!(f, "PacketZcActiveQuest\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemPickupParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupParty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_id[2, 6]", &format!("{:02X?}", &self.account_id_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[9, 10]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[10, 11]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[11, 19]", &format!("{:02X?}", &self.slot_raw))
            .field("location[11, 13]", &format!("{:02X?}", &self.location_raw))
            .field("atype[13, 14]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcItemPickupParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_id(unsigned long as u32)[2, 6]: {}", &self.account_id));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[9, 10]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[10, 11]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[11, 19]: {}", &self.slot));
        fields.push(format!("location(unsigned short as u16)[11, 13]: {}", &self.location));
        fields.push(format!("atype(unsigned char as u8)[13, 14]: {}", &self.atype));
        write!(f, "PacketZcItemPickupParty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShortcutKeyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShortcutKeyList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("short_cut_key[2, 9]", &format!("{:02X?}", &self.short_cut_key_raw))
        .finish()
    }
}

impl Display for PacketZcShortcutKeyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("short_cut_key([] as Vec)[2, 9]: {}", &self.short_cut_key.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcShortcutKeyList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzShortcutKeyChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzShortcutKeyChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("short_cut_key[4, ?]", &format!("{:02X?}", &self.short_cut_key_raw))
        .finish()
    }
}

impl Display for PacketCzShortcutKeyChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("short_cut_key(struct as Struct)[4, ?]: {}", &self.short_cut_key));
        write!(f, "PacketCzShortcutKeyChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipitemDamaged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipitemDamaged")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("wear_location[2, 4]", &format!("{:02X?}", &self.wear_location_raw))
            .field("account_id[4, 8]", &format!("{:02X?}", &self.account_id_raw))
        .finish()
    }
}

impl Display for PacketZcEquipitemDamaged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("wear_location(unsigned short as u16)[2, 4]: {}", &self.wear_location));
        fields.push(format!("account_id(unsigned long as u32)[4, 8]: {}", &self.account_id));
        write!(f, "PacketZcEquipitemDamaged\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyPcbangPlayingTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPcbangPlayingTime")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("time_minute[2, 6]", &format!("{:02X?}", &self.time_minute_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyPcbangPlayingTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("time_minute(int as i32)[2, 6]: {}", &self.time_minute));
        write!(f, "PacketZcNotifyPcbangPlayingTime\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSrpacketr2Init {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSrpacketr2Init")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("protect_factor[2, 4]", &format!("{:02X?}", &self.protect_factor_raw))
            .field("deform_seed_factor[4, 8]", &format!("{:02X?}", &self.deform_seed_factor_raw))
            .field("deform_add_factor[8, 12]", &format!("{:02X?}", &self.deform_add_factor_raw))
        .finish()
    }
}

impl Display for PacketZcSrpacketr2Init {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("protect_factor(unsigned short as u16)[2, 4]: {}", &self.protect_factor));
        fields.push(format!("deform_seed_factor(unsigned int as u32)[4, 8]: {}", &self.deform_seed_factor));
        fields.push(format!("deform_add_factor(unsigned int as u32)[8, 12]: {}", &self.deform_add_factor));
        write!(f, "PacketZcSrpacketr2Init\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSrpacketr2Start {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSrpacketr2Start")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("protect_factor[2, 4]", &format!("{:02X?}", &self.protect_factor_raw))
        .finish()
    }
}

impl Display for PacketCzSrpacketr2Start {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("protect_factor(unsigned short as u16)[2, 4]: {}", &self.protect_factor));
        write!(f, "PacketCzSrpacketr2Start\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNpcChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("account_id[4, 8]", &format!("{:02X?}", &self.account_id_raw))
            .field("color[8, 12]", &format!("{:02X?}", &self.color_raw))
            .field("msg[12, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcNpcChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("account_id(unsigned long as u32)[4, 8]: {}", &self.account_id));
        fields.push(format!("color(unsigned long as u32)[8, 12]: {}", &self.color));
        fields.push(format!("msg(char[] as String)[12, ?]: {}", &self.msg));
        write!(f, "PacketZcNpcChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFormatstringMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFormatstringMsg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, 6]", &format!("{:02X?}", &self.msg_raw))
            .field("value[6, ?]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcFormatstringMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(unsigned short as u16)[4, 6]: {}", &self.msg));
        fields.push(format!("value(char[] as String)[6, ?]: {}", &self.value));
        write!(f, "PacketZcFormatstringMsg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyJoinReq")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("character_name[2, 26]", &format!("{:02X?}", &self.character_name_raw))
        .finish()
    }
}

impl Display for PacketCzPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("character_name(char[] as char[])[2, 26]: {}", &self.character_name.pretty_output()));
        write!(f, "PacketCzPartyJoinReq\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyJoinReqAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("character_name[2, 26]", &format!("{:02X?}", &self.character_name_raw))
            .field("answer[26, 30]", &format!("{:02X?}", &self.answer_raw))
        .finish()
    }
}

impl Display for PacketZcPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("character_name(char[] as char[])[2, 26]: {}", &self.character_name.pretty_output()));
        fields.push(format!("answer(long as i32)[26, 30]: {}", &self.answer));
        write!(f, "PacketZcPartyJoinReqAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyJoinReq")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("grid[2, 6]", &format!("{:02X?}", &self.grid_raw))
            .field("group_name[6, 30]", &format!("{:02X?}", &self.group_name_raw))
        .finish()
    }
}

impl Display for PacketZcPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("grid(unsigned long as u32)[2, 6]: {}", &self.grid));
        fields.push(format!("group_name(char[] as char[])[6, 30]: {}", &self.group_name.pretty_output()));
        write!(f, "PacketZcPartyJoinReq\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyJoinReqAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("grid[2, 6]", &format!("{:02X?}", &self.grid_raw))
            .field("b_accept[6, 7]", &format!("{:02X?}", &self.b_accept_raw))
        .finish()
    }
}

impl Display for PacketCzPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("grid(unsigned long as u32)[2, 6]: {}", &self.grid));
        fields.push(format!("b_accept(bool as bool)[6, 7]: {}", &self.b_accept));
        write!(f, "PacketCzPartyJoinReqAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyConfig")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("b_refuse_join_msg[2, 3]", &format!("{:02X?}", &self.b_refuse_join_msg_raw))
        .finish()
    }
}

impl Display for PacketCzPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("b_refuse_join_msg(bool as bool)[2, 3]: {}", &self.b_refuse_join_msg));
        write!(f, "PacketCzPartyConfig\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyConfig")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("b_refuse_join_msg[2, 3]", &format!("{:02X?}", &self.b_refuse_join_msg_raw))
        .finish()
    }
}

impl Display for PacketZcPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("b_refuse_join_msg(bool as bool)[2, 3]: {}", &self.b_refuse_join_msg));
        write!(f, "PacketZcPartyConfig\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcRefuseSelectchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseSelectchar")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 3]", &format!("{:02X?}", &self.error_code_raw))
        .finish()
    }
}

impl Display for PacketHcRefuseSelectchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned char as u8)[2, 3]: {}", &self.error_code));
        write!(f, "PacketHcRefuseSelectchar\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemorialdungeonSubscriptionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonSubscriptionInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("memorial_dungeon_name[2, 63]", &format!("{:02X?}", &self.memorial_dungeon_name_raw))
            .field("priority_order_num[63, 65]", &format!("{:02X?}", &self.priority_order_num_raw))
        .finish()
    }
}

impl Display for PacketZcMemorialdungeonSubscriptionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("memorial_dungeon_name(char[] as char[])[2, 63]: {}", &self.memorial_dungeon_name.pretty_output()));
        fields.push(format!("priority_order_num(short as i16)[63, 65]: {}", &self.priority_order_num));
        write!(f, "PacketZcMemorialdungeonSubscriptionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemorialdungeonSubscriptionNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonSubscriptionNotify")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("priority_order_num[2, 4]", &format!("{:02X?}", &self.priority_order_num_raw))
        .finish()
    }
}

impl Display for PacketZcMemorialdungeonSubscriptionNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("priority_order_num(short as i16)[2, 4]: {}", &self.priority_order_num));
        write!(f, "PacketZcMemorialdungeonSubscriptionNotify\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemorialdungeonInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("memorial_dungeon_name[2, 63]", &format!("{:02X?}", &self.memorial_dungeon_name_raw))
            .field("destroy_date[63, 67]", &format!("{:02X?}", &self.destroy_date_raw))
            .field("enter_time_out_date[67, 71]", &format!("{:02X?}", &self.enter_time_out_date_raw))
        .finish()
    }
}

impl Display for PacketZcMemorialdungeonInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("memorial_dungeon_name(char[] as char[])[2, 63]: {}", &self.memorial_dungeon_name.pretty_output()));
        fields.push(format!("destroy_date(unsigned long as u32)[63, 67]: {}", &self.destroy_date));
        fields.push(format!("enter_time_out_date(unsigned long as u32)[67, 71]: {}", &self.enter_time_out_date));
        write!(f, "PacketZcMemorialdungeonInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMemorialdungeonNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonNotify")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
            .field("enter_limit_date[6, 10]", &format!("{:02X?}", &self.enter_limit_date_raw))
        .finish()
    }
}

impl Display for PacketZcMemorialdungeonNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(long as i32)[2, 6]: {}", &self.atype));
        fields.push(format!("enter_limit_date(unsigned long as u32)[6, 10]: {}", &self.enter_limit_date));
        write!(f, "PacketZcMemorialdungeonNotify\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzMemorialdungeonCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMemorialdungeonCommand")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("command[2, 6]", &format!("{:02X?}", &self.command_raw))
        .finish()
    }
}

impl Display for PacketCzMemorialdungeonCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("command(long as i32)[2, 6]: {}", &self.command));
        write!(f, "PacketCzMemorialdungeonCommand\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 32]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 32]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcEquipmentItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 32]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 32]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreEquipmentItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 32]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 32]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartEquipmentItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyBindOnEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyBindOnEquip")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyBindOnEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        write!(f, "PacketZcNotifyBindOnEquip\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemPickupAck3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("itid[6, 8]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[8, 9]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[9, 10]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[10, 11]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[11, 19]", &format!("{:02X?}", &self.slot_raw))
            .field("location[11, 13]", &format!("{:02X?}", &self.location_raw))
            .field("atype[13, 14]", &format!("{:02X?}", &self.atype_raw))
            .field("result[14, 15]", &format!("{:02X?}", &self.result_raw))
            .field("hire_expire_date[15, 19]", &format!("{:02X?}", &self.hire_expire_date_raw))
            .field("bind_on_equip_type[19, 21]", &format!("{:02X?}", &self.bind_on_equip_type_raw))
        .finish()
    }
}

impl Display for PacketZcItemPickupAck3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("count(unsigned short as u16)[4, 6]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[6, 8]: {}", &self.itid));
        fields.push(format!("is_identified(bool as bool)[8, 9]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[9, 10]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[10, 11]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[11, 19]: {}", &self.slot));
        fields.push(format!("location(unsigned short as u16)[11, 13]: {}", &self.location));
        fields.push(format!("atype(unsigned char as u8)[13, 14]: {}", &self.atype));
        fields.push(format!("result(unsigned char as u8)[14, 15]: {}", &self.result));
        fields.push(format!("hire_expire_date(long as i32)[15, 19]: {}", &self.hire_expire_date));
        fields.push(format!("bind_on_equip_type(unsigned short as u16)[19, 21]: {}", &self.bind_on_equip_type));
        write!(f, "PacketZcItemPickupAck3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcIsvrDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcIsvrDisconnect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcIsvrDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcIsvrDisconnect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEquipwinMicroscope")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzEquipwinMicroscope\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipwinMicroscope")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("character_name[4, 28]", &format!("{:02X?}", &self.character_name_raw))
            .field("job[28, 30]", &format!("{:02X?}", &self.job_raw))
            .field("head[30, 32]", &format!("{:02X?}", &self.head_raw))
            .field("accessory[32, 34]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[34, 36]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[36, 38]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[38, 40]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[40, 42]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("sex[42, 43]", &format!("{:02X?}", &self.sex_raw))
            .field("item_info[43, 71]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("character_name(char[] as char[])[4, 28]: {}", &self.character_name.pretty_output()));
        fields.push(format!("job(short as i16)[28, 30]: {}", &self.job));
        fields.push(format!("head(short as i16)[30, 32]: {}", &self.head));
        fields.push(format!("accessory(short as i16)[32, 34]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[34, 36]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[36, 38]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[38, 40]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[40, 42]: {}", &self.bodypalette));
        fields.push(format!("sex(unsigned char as u8)[42, 43]: {}", &self.sex));
        fields.push(format!("item_info([] as Vec)[43, 71]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcEquipwinMicroscope\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzConfig")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("config[2, 6]", &format!("{:02X?}", &self.config_raw))
            .field("value[6, 10]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketCzConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("config(long as i32)[2, 6]: {}", &self.config));
        fields.push(format!("value(int as i32)[6, 10]: {}", &self.value));
        write!(f, "PacketCzConfig\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConfig")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("config[2, 6]", &format!("{:02X?}", &self.config_raw))
            .field("value[6, 10]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("config(long as i32)[2, 6]: {}", &self.config));
        fields.push(format!("value(int as i32)[6, 10]: {}", &self.value));
        write!(f, "PacketZcConfig\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcConfigNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConfigNotify")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("b_open_equipment_win[2, 3]", &format!("{:02X?}", &self.b_open_equipment_win_raw))
        .finish()
    }
}

impl Display for PacketZcConfigNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("b_open_equipment_win(bool as bool)[2, 3]: {}", &self.b_open_equipment_win));
        write!(f, "PacketZcConfigNotify\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBattlefieldChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msg[4, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketCzBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msg(char[] as String)[4, ?]: {}", &self.msg));
        write!(f, "PacketCzBattlefieldChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldChat")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("account_id[4, 8]", &format!("{:02X?}", &self.account_id_raw))
            .field("name[8, 32]", &format!("{:02X?}", &self.name_raw))
            .field("msg[32, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("account_id(unsigned long as u32)[4, 8]: {}", &self.account_id));
        fields.push(format!("name(char[] as char[])[8, 32]: {}", &self.name.pretty_output()));
        fields.push(format!("msg(char[] as String)[32, ?]: {}", &self.msg));
        write!(f, "PacketZcBattlefieldChat\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattlefieldNotifyCampinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyCampinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_id[2, 6]", &format!("{:02X?}", &self.account_id_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
            .field("camp[30, 32]", &format!("{:02X?}", &self.camp_raw))
        .finish()
    }
}

impl Display for PacketZcBattlefieldNotifyCampinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_id(unsigned long as u32)[2, 6]: {}", &self.account_id));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        fields.push(format!("camp(short as i16)[30, 32]: {}", &self.camp));
        write!(f, "PacketZcBattlefieldNotifyCampinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattlefieldNotifyPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyPoint")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("point_camp_a[2, 4]", &format!("{:02X?}", &self.point_camp_a_raw))
            .field("point_camp_b[4, 6]", &format!("{:02X?}", &self.point_camp_b_raw))
        .finish()
    }
}

impl Display for PacketZcBattlefieldNotifyPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("point_camp_a(short as i16)[2, 4]: {}", &self.point_camp_a));
        fields.push(format!("point_camp_b(short as i16)[4, 6]: {}", &self.point_camp_b));
        write!(f, "PacketZcBattlefieldNotifyPoint\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattlefieldNotifyPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyPosition")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_id[2, 6]", &format!("{:02X?}", &self.account_id_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
            .field("job[30, 32]", &format!("{:02X?}", &self.job_raw))
            .field("x[32, 34]", &format!("{:02X?}", &self.x_raw))
            .field("y[34, 36]", &format!("{:02X?}", &self.y_raw))
        .finish()
    }
}

impl Display for PacketZcBattlefieldNotifyPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_id(unsigned long as u32)[2, 6]: {}", &self.account_id));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        fields.push(format!("job(unsigned short as u16)[30, 32]: {}", &self.job));
        fields.push(format!("x(short as i16)[32, 34]: {}", &self.x));
        fields.push(format!("y(short as i16)[34, 36]: {}", &self.y));
        write!(f, "PacketZcBattlefieldNotifyPosition\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattlefieldNotifyHp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyHp")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("account_id[2, 6]", &format!("{:02X?}", &self.account_id_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
            .field("hp[30, 32]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[32, 34]", &format!("{:02X?}", &self.max_hp_raw))
        .finish()
    }
}

impl Display for PacketZcBattlefieldNotifyHp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("account_id(unsigned long as u32)[2, 6]: {}", &self.account_id));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        fields.push(format!("hp(short as i16)[30, 32]: {}", &self.hp));
        fields.push(format!("max_hp(short as i16)[32, 34]: {}", &self.max_hp));
        write!(f, "PacketZcBattlefieldNotifyHp\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyAct2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyAct2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("target_gid[6, 10]", &format!("{:02X?}", &self.target_gid_raw))
            .field("start_time[10, 14]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[14, 18]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[18, 22]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("damage[22, 26]", &format!("{:02X?}", &self.damage_raw))
            .field("count[26, 28]", &format!("{:02X?}", &self.count_raw))
            .field("action[28, 29]", &format!("{:02X?}", &self.action_raw))
            .field("left_damage[29, 33]", &format!("{:02X?}", &self.left_damage_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyAct2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("target_gid(unsigned long as u32)[6, 10]: {}", &self.target_gid));
        fields.push(format!("start_time(unsigned long as u32)[10, 14]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[14, 18]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[18, 22]: {}", &self.attacked_mt));
        fields.push(format!("damage(int as i32)[22, 26]: {}", &self.damage));
        fields.push(format!("count(short as i16)[26, 28]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[28, 29]: {}", &self.action));
        fields.push(format!("left_damage(int as i32)[29, 33]: {}", &self.left_damage));
        write!(f, "PacketZcNotifyAct2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBotCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBotCheck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("is_bot[2, 6]", &format!("{:02X?}", &self.is_bot_raw))
        .finish()
    }
}

impl Display for PacketCzBotCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("is_bot(int as i32)[2, 6]: {}", &self.is_bot));
        write!(f, "PacketCzBotCheck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMapproperty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("atype[4, 6]", &format!("{:02X?}", &self.atype_raw))
            .field("map_info_table[6, ?]", &format!("{:02X?}", &self.map_info_table_raw))
        .finish()
    }
}

impl Display for PacketZcMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("atype(short as i16)[4, 6]: {}", &self.atype));
        fields.push(format!("map_info_table(int[] as i32[])[6, ?]: {}", &self.map_info_table.pretty_output()));
        write!(f, "PacketZcMapproperty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 26]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 26]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcNormalItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCartNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 26]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcCartNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 26]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcCartNormalItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcStoreNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("item_info[4, 26]", &format!("{:02X?}", &self.item_info_raw))
        .finish()
    }
}

impl Display for PacketZcStoreNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("item_info([] as Vec)[4, 26]: {}", &self.item_info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcStoreNormalItemlist3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAcceptEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptEnter2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("start_time[2, 6]", &format!("{:02X?}", &self.start_time_raw))
            .field("pos_dir[6, 9]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[9, 10]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[10, 11]", &format!("{:02X?}", &self.y_size_raw))
            .field("font[11, 13]", &format!("{:02X?}", &self.font_raw))
        .finish()
    }
}

impl Display for PacketZcAcceptEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("start_time(unsigned long as u32)[2, 6]: {}", &self.start_time));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[6, 9]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[9, 10]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[10, 11]: {}", &self.y_size));
        fields.push(format!("font(short as i16)[11, 13]: {}", &self.font));
        write!(f, "PacketZcAcceptEnter2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry4")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("objecttype[2, 3]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[3, 7]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[7, 9]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[9, 11]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[11, 13]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[13, 17]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[17, 19]", &format!("{:02X?}", &self.job_raw))
            .field("head[19, 21]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[21, 25]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[25, 27]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[27, 31]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("accessory2[31, 33]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[33, 35]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[35, 37]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[37, 39]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[39, 41]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[41, 45]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[45, 47]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[47, 49]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[49, 53]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[53, 54]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[54, 55]", &format!("{:02X?}", &self.sex_raw))
            .field("move_data[55, 61]", &format!("{:02X?}", &self.move_data_raw))
            .field("x_size[61, 62]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[62, 63]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[63, 65]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[65, 67]", &format!("{:02X?}", &self.font_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("objecttype(unsigned char as u8)[2, 3]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[3, 7]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[7, 9]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[9, 11]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[11, 13]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[13, 17]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[17, 19]: {}", &self.job));
        fields.push(format!("head(short as i16)[19, 21]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[21, 25]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[25, 27]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned long as u32)[27, 31]: {}", &self.move_start_time));
        fields.push(format!("accessory2(short as i16)[31, 33]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[33, 35]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[35, 37]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[37, 39]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[39, 41]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[41, 45]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[45, 47]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[47, 49]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[49, 53]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[53, 54]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[54, 55]: {}", &self.sex));
        fields.push(format!("move_data(unsigned short[] as u16[])[55, 61]: {}", &self.move_data.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[61, 62]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[62, 63]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[63, 65]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[65, 67]: {}", &self.font));
        write!(f, "PacketZcNotifyMoveentry4\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyNewentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry4")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 16]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[16, 18]", &format!("{:02X?}", &self.job_raw))
            .field("head[18, 20]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[20, 24]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[24, 26]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[26, 28]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[28, 30]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[30, 32]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[32, 34]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[34, 36]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[36, 40]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[40, 42]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[42, 44]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[44, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[50, 53]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[53, 54]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[54, 55]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[55, 57]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[57, 59]", &format!("{:02X?}", &self.font_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyNewentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[12, 16]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[16, 18]: {}", &self.job));
        fields.push(format!("head(short as i16)[18, 20]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[20, 24]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[24, 26]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[26, 28]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[28, 30]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[30, 32]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[32, 34]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[34, 36]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[36, 40]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[40, 42]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[42, 44]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[44, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[50, 53]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[53, 54]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[54, 55]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[55, 57]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[57, 59]: {}", &self.font));
        write!(f, "PacketZcNotifyNewentry4\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry4")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[6, 8]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[8, 10]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[10, 12]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[12, 16]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[16, 18]", &format!("{:02X?}", &self.job_raw))
            .field("head[18, 20]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[20, 24]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[24, 26]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[26, 28]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[28, 30]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[30, 32]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[32, 34]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[34, 36]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[36, 40]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[40, 42]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[42, 44]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[44, 48]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[48, 49]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[49, 50]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[50, 53]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[53, 54]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[54, 55]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[55, 56]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[56, 58]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[58, 60]", &format!("{:02X?}", &self.font_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[6, 8]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[8, 10]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[10, 12]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[12, 16]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[16, 18]: {}", &self.job));
        fields.push(format!("head(short as i16)[18, 20]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[20, 24]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[24, 26]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[26, 28]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[28, 30]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[30, 32]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[32, 34]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[34, 36]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[36, 40]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[40, 42]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[42, 44]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[44, 48]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[48, 49]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[49, 50]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[50, 53]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[53, 54]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[54, 55]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[55, 56]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[56, 58]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[58, 60]: {}", &self.font));
        write!(f, "PacketZcNotifyStandentry4\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyFont {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyFont")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("font[6, 8]", &format!("{:02X?}", &self.font_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyFont {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("font(short as i16)[6, 8]: {}", &self.font));
        write!(f, "PacketZcNotifyFont\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcProgress")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("color[2, 6]", &format!("{:02X?}", &self.color_raw))
            .field("time[6, 10]", &format!("{:02X?}", &self.time_raw))
        .finish()
    }
}

impl Display for PacketZcProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("color(unsigned long as u32)[2, 6]: {}", &self.color));
        fields.push(format!("time(unsigned long as u32)[6, 10]: {}", &self.time));
        write!(f, "PacketZcProgress\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzProgress")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzProgress\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcProgressCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcProgressCancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcProgressCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcProgressCancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzOpenSimpleCashshopItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzOpenSimpleCashshopItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzOpenSimpleCashshopItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzOpenSimpleCashshopItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSimpleCashshopPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashshopPointItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("cash_point[4, 8]", &format!("{:02X?}", &self.cash_point_raw))
            .field("md_itemcount[8, 10]", &format!("{:02X?}", &self.md_itemcount_raw))
            .field("md_item_size[10, 12]", &format!("{:02X?}", &self.md_item_size_raw))
            .field("best_itemcount[12, 14]", &format!("{:02X?}", &self.best_itemcount_raw))
            .field("best_itemsize[14, 16]", &format!("{:02X?}", &self.best_itemsize_raw))
            .field("item_list[16, 27]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcSimpleCashshopPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("cash_point(unsigned long as u32)[4, 8]: {}", &self.cash_point));
        fields.push(format!("md_itemcount(short as i16)[8, 10]: {}", &self.md_itemcount));
        fields.push(format!("md_item_size(short as i16)[10, 12]: {}", &self.md_item_size));
        fields.push(format!("best_itemcount(short as i16)[12, 14]: {}", &self.best_itemcount));
        fields.push(format!("best_itemsize(short as i16)[14, 16]: {}", &self.best_itemsize));
        fields.push(format!("item_list([] as Vec)[16, 27]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcSimpleCashshopPointItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCloseWindow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseWindow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCloseWindow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCloseWindow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAhcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAhcGameGuard")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auth_data[2, 6]", &format!("{:02X?}", &self.auth_data_raw))
        .finish()
    }
}

impl Display for PacketAhcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auth_data(unsigned long[] as u32[])[2, 6]: {}", &self.auth_data.pretty_output()));
        write!(f, "PacketAhcGameGuard\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCahAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCahAckGameGuard")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("auth_data[2, 6]", &format!("{:02X?}", &self.auth_data_raw))
        .finish()
    }
}

impl Display for PacketCahAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("auth_data(unsigned long[] as u32[])[2, 6]: {}", &self.auth_data.pretty_output()));
        write!(f, "PacketCahAckGameGuard\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEnter2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[6, 10]", &format!("{:02X?}", &self.gid_raw))
            .field("auth_code[10, 14]", &format!("{:02X?}", &self.auth_code_raw))
            .field("client_time[14, 18]", &format!("{:02X?}", &self.client_time_raw))
            .field("sex[18, 19]", &format!("{:02X?}", &self.sex_raw))
        .finish()
    }
}

impl Display for PacketCzEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[6, 10]: {}", &self.gid));
        fields.push(format!("auth_code(int as i32)[10, 14]: {}", &self.auth_code));
        fields.push(format!("client_time(unsigned long as u32)[14, 18]: {}", &self.client_time));
        fields.push(format!("sex(unsigned char as u8)[18, 19]: {}", &self.sex));
        write!(f, "PacketCzEnter2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseSkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkill2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("selected_level[2, 4]", &format!("{:02X?}", &self.selected_level_raw))
            .field("skid[4, 6]", &format!("{:02X?}", &self.skid_raw))
            .field("target_id[6, 10]", &format!("{:02X?}", &self.target_id_raw))
        .finish()
    }
}

impl Display for PacketCzUseSkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("selected_level(short as i16)[2, 4]: {}", &self.selected_level));
        fields.push(format!("skid(unsigned short as u16)[4, 6]: {}", &self.skid));
        fields.push(format!("target_id(unsigned long as u32)[6, 10]: {}", &self.target_id));
        write!(f, "PacketCzUseSkill2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzUseItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseItem2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzUseItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned short as u16)[2, 4]: {}", &self.index));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        write!(f, "PacketCzUseItem2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillPostdelay")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("delay_tm[4, 8]", &format!("{:02X?}", &self.delay_tm_raw))
        .finish()
    }
}

impl Display for PacketZcSkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("delay_tm(unsigned long as u32)[4, 8]: {}", &self.delay_tm));
        write!(f, "PacketZcSkillPostdelay\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillPostdelayList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillPostdelayList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("delay_list[4, 10]", &format!("{:02X?}", &self.delay_list_raw))
        .finish()
    }
}

impl Display for PacketZcSkillPostdelayList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("delay_list([] as Vec)[4, 10]: {}", &self.delay_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcSkillPostdelayList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsgStateChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgStateChange2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("state[8, 9]", &format!("{:02X?}", &self.state_raw))
            .field("remain_ms[9, 13]", &format!("{:02X?}", &self.remain_ms_raw))
            .field("val[13, 16]", &format!("{:02X?}", &self.val_raw))
        .finish()
    }
}

impl Display for PacketZcMsgStateChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("state(bool as bool)[8, 9]: {}", &self.state));
        fields.push(format!("remain_ms(unsigned long as u32)[9, 13]: {}", &self.remain_ms));
        fields.push(format!("val(int[] as i32[])[13, 16]: {}", &self.val.pretty_output()));
        write!(f, "PacketZcMsgStateChange2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMillenniumshield {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMillenniumshield")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("num[6, 8]", &format!("{:02X?}", &self.num_raw))
            .field("state[8, 10]", &format!("{:02X?}", &self.state_raw))
        .finish()
    }
}

impl Display for PacketZcMillenniumshield {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("num(short as i16)[6, 8]: {}", &self.num));
        fields.push(format!("state(short as i16)[8, 10]: {}", &self.state));
        write!(f, "PacketZcMillenniumshield\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillinfoDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for PacketZcSkillinfoDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        write!(f, "PacketZcSkillinfoDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillSelectRequest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillSelectRequest")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("why[4, 8]", &format!("{:02X?}", &self.why_raw))
            .field("skidlist[8, ?]", &format!("{:02X?}", &self.skidlist_raw))
        .finish()
    }
}

impl Display for PacketZcSkillSelectRequest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("why(long as i32)[4, 8]: {}", &self.why));
        fields.push(format!("skidlist(unsigned short[] as u16[])[8, ?]: {}", &self.skidlist.pretty_output()));
        write!(f, "PacketZcSkillSelectRequest\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSkillSelectResponse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSkillSelectResponse")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("why[2, 6]", &format!("{:02X?}", &self.why_raw))
            .field("skid[6, 8]", &format!("{:02X?}", &self.skid_raw))
        .finish()
    }
}

impl Display for PacketCzSkillSelectResponse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("why(long as i32)[2, 6]: {}", &self.why));
        fields.push(format!("skid(unsigned short as u16)[6, 8]: {}", &self.skid));
        write!(f, "PacketCzSkillSelectResponse\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSimpleCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashPointItemlist")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("cash_point[4, 8]", &format!("{:02X?}", &self.cash_point_raw))
            .field("item_list[8, 19]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcSimpleCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("cash_point(unsigned long as u32)[4, 8]: {}", &self.cash_point));
        fields.push(format!("item_list([] as Vec)[8, 19]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcSimpleCashPointItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSimpleBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSimpleBuyCashPointItem")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketCzSimpleBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketCzSimpleBuyCashPointItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcQuestNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestNotifyEffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("npc_id[2, 6]", &format!("{:02X?}", &self.npc_id_raw))
            .field("x_pos[6, 8]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[8, 10]", &format!("{:02X?}", &self.y_pos_raw))
            .field("effect[10, 12]", &format!("{:02X?}", &self.effect_raw))
            .field("atype[12, 14]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcQuestNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("npc_id(unsigned long as u32)[2, 6]: {}", &self.npc_id));
        fields.push(format!("x_pos(short as i16)[6, 8]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[8, 10]: {}", &self.y_pos));
        fields.push(format!("effect(short as i16)[10, 12]: {}", &self.effect));
        fields.push(format!("atype(short as i16)[12, 14]: {}", &self.atype));
        write!(f, "PacketZcQuestNotifyEffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcCharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCharacterList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("character_list[4, 9]", &format!("{:02X?}", &self.character_list_raw))
        .finish()
    }
}

impl Display for PacketHcCharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("character_list([] as Vec)[4, 9]: {}", &self.character_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketHcCharacterList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcHackshErrorMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHackshErrorMsg")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_id[2, 4]", &format!("{:02X?}", &self.error_id_raw))
        .finish()
    }
}

impl Display for PacketZcHackshErrorMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_id(short as i16)[2, 4]: {}", &self.error_id));
        write!(f, "PacketZcHackshErrorMsg\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzClientVersion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzClientVersion")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("client_ver[2, 6]", &format!("{:02X?}", &self.client_ver_raw))
        .finish()
    }
}

impl Display for PacketCzClientVersion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("client_ver(long as i32)[2, 6]: {}", &self.client_ver));
        write!(f, "PacketCzClientVersion\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCloseSimplecashShop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseSimplecashShop")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCloseSimplecashShop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCloseSimplecashShop\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEsResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
            .field("es_msg[4, 6]", &format!("{:02X?}", &self.es_msg_raw))
        .finish()
    }
}

impl Display for PacketZcEsResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        fields.push(format!("es_msg(short as i16)[4, 6]: {}", &self.es_msg));
        write!(f, "PacketZcEsResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEsGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsGetList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzEsGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzEsGetList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcEsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "PacketZcEsList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEsChoose {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsChoose")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
        .finish()
    }
}

impl Display for PacketCzEsChoose {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        write!(f, "PacketCzEsChoose\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzEsCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsCancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
        .finish()
    }
}

impl Display for PacketCzEsCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        write!(f, "PacketCzEsCancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEsReady {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsReady")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
        .finish()
    }
}

impl Display for PacketZcEsReady {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        write!(f, "PacketZcEsReady\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEsGoto {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsGoto")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
        .finish()
    }
}

impl Display for PacketZcEsGoto {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        write!(f, "PacketZcEsGoto\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGroupinfoChangeV2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp_option[2, 6]", &format!("{:02X?}", &self.exp_option_raw))
            .field("item_pickup_rule[6, 7]", &format!("{:02X?}", &self.item_pickup_rule_raw))
            .field("item_division_rule[7, 8]", &format!("{:02X?}", &self.item_division_rule_raw))
        .finish()
    }
}

impl Display for PacketCzGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp_option(unsigned long as u32)[2, 6]: {}", &self.exp_option));
        fields.push(format!("item_pickup_rule(unsigned char as u8)[6, 7]: {}", &self.item_pickup_rule));
        fields.push(format!("item_division_rule(unsigned char as u8)[7, 8]: {}", &self.item_division_rule));
        write!(f, "PacketCzGroupinfoChangeV2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqGroupinfoChangeV2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("exp_option[2, 6]", &format!("{:02X?}", &self.exp_option_raw))
            .field("item_pickup_rule[6, 7]", &format!("{:02X?}", &self.item_pickup_rule_raw))
            .field("item_division_rule[7, 8]", &format!("{:02X?}", &self.item_division_rule_raw))
        .finish()
    }
}

impl Display for PacketZcReqGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("exp_option(unsigned long as u32)[2, 6]: {}", &self.exp_option));
        fields.push(format!("item_pickup_rule(unsigned char as u8)[6, 7]: {}", &self.item_pickup_rule));
        fields.push(format!("item_division_rule(unsigned char as u8)[7, 8]: {}", &self.item_division_rule));
        write!(f, "PacketZcReqGroupinfoChangeV2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcShortcutKeyListV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShortcutKeyListV2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("short_cut_key[2, 9]", &format!("{:02X?}", &self.short_cut_key_raw))
        .finish()
    }
}

impl Display for PacketZcShortcutKeyListV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("short_cut_key([] as Vec)[2, 9]: {}", &self.short_cut_key.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcShortcutKeyListV2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeGroupMaster")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzChangeGroupMaster\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcHoParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHoParChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var[2, 4]", &format!("{:02X?}", &self.var_raw))
            .field("value[4, 8]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcHoParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var(unsigned short as u16)[2, 4]: {}", &self.var));
        fields.push(format!("value(int as i32)[4, 8]: {}", &self.value));
        write!(f, "PacketZcHoParChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSeekParty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("option[2, 6]", &format!("{:02X?}", &self.option_raw))
        .finish()
    }
}

impl Display for PacketCzSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("option(unsigned long as u32)[2, 6]: {}", &self.option));
        write!(f, "PacketCzSeekParty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSeekParty")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("job[26, 30]", &format!("{:02X?}", &self.job_raw))
            .field("level[30, 34]", &format!("{:02X?}", &self.level_raw))
            .field("map_name[34, 50]", &format!("{:02X?}", &self.map_name_raw))
            .field("option[50, 54]", &format!("{:02X?}", &self.option_raw))
        .finish()
    }
}

impl Display for PacketZcSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("job(unsigned long as u32)[26, 30]: {}", &self.job));
        fields.push(format!("level(unsigned long as u32)[30, 34]: {}", &self.level));
        fields.push(format!("map_name(char[] as char[])[34, 50]: {}", &self.map_name.pretty_output()));
        fields.push(format!("option(unsigned long as u32)[50, 54]: {}", &self.option));
        write!(f, "PacketZcSeekParty\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSeekPartyMember")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("job[2, 6]", &format!("{:02X?}", &self.job_raw))
            .field("level[6, 10]", &format!("{:02X?}", &self.level_raw))
            .field("map_name[10, 26]", &format!("{:02X?}", &self.map_name_raw))
            .field("option[26, 30]", &format!("{:02X?}", &self.option_raw))
        .finish()
    }
}

impl Display for PacketCzSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("job(unsigned long as u32)[2, 6]: {}", &self.job));
        fields.push(format!("level(unsigned long as u32)[6, 10]: {}", &self.level));
        fields.push(format!("map_name(char[] as char[])[10, 26]: {}", &self.map_name.pretty_output()));
        fields.push(format!("option(unsigned long as u32)[26, 30]: {}", &self.option));
        write!(f, "PacketCzSeekPartyMember\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSeekPartyMember")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("job[26, 30]", &format!("{:02X?}", &self.job_raw))
            .field("level[30, 34]", &format!("{:02X?}", &self.level_raw))
            .field("map_name[34, 50]", &format!("{:02X?}", &self.map_name_raw))
            .field("option[50, 54]", &format!("{:02X?}", &self.option_raw))
        .finish()
    }
}

impl Display for PacketZcSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("job(unsigned long as u32)[26, 30]: {}", &self.job));
        fields.push(format!("level(unsigned long as u32)[30, 34]: {}", &self.level));
        fields.push(format!("map_name(char[] as char[])[34, 50]: {}", &self.map_name.pretty_output()));
        fields.push(format!("option(unsigned long as u32)[50, 54]: {}", &self.option));
        write!(f, "PacketZcSeekPartyMember\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcEsNotiMyinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsNotiMyinfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("es_no[2, 4]", &format!("{:02X?}", &self.es_no_raw))
            .field("esname[4, 58]", &format!("{:02X?}", &self.esname_raw))
        .finish()
    }
}

impl Display for PacketZcEsNotiMyinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("es_no(short as i16)[2, 4]: {}", &self.es_no));
        fields.push(format!("esname(char[] as char[])[4, 58]: {}", &self.esname.pretty_output()));
        write!(f, "PacketZcEsNotiMyinfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSkillinfoUpdate2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoUpdate2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("atype[4, 8]", &format!("{:02X?}", &self.atype_raw))
            .field("level[8, 10]", &format!("{:02X?}", &self.level_raw))
            .field("spcost[10, 12]", &format!("{:02X?}", &self.spcost_raw))
            .field("attack_range[12, 14]", &format!("{:02X?}", &self.attack_range_raw))
            .field("upgradable[14, 15]", &format!("{:02X?}", &self.upgradable_raw))
        .finish()
    }
}

impl Display for PacketZcSkillinfoUpdate2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("atype(int as i32)[4, 8]: {}", &self.atype));
        fields.push(format!("level(short as i16)[8, 10]: {}", &self.level));
        fields.push(format!("spcost(short as i16)[10, 12]: {}", &self.spcost));
        fields.push(format!("attack_range(short as i16)[12, 14]: {}", &self.attack_range));
        fields.push(format!("upgradable(bool as bool)[14, 15]: {}", &self.upgradable));
        write!(f, "PacketZcSkillinfoUpdate2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsgValue {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgValue")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg[2, 4]", &format!("{:02X?}", &self.msg_raw))
            .field("value[4, 8]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcMsgValue {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg(unsigned short as u16)[2, 4]: {}", &self.msg));
        fields.push(format!("value(int as i32)[4, 8]: {}", &self.value));
        write!(f, "PacketZcMsgValue\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemlistwinOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemlistwinOpen")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
        .finish()
    }
}

impl Display for PacketZcItemlistwinOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(long as i32)[2, 6]: {}", &self.atype));
        write!(f, "PacketZcItemlistwinOpen\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzItemlistwinRes {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemlistwinRes")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("atype[4, 8]", &format!("{:02X?}", &self.atype_raw))
            .field("action[8, 12]", &format!("{:02X?}", &self.action_raw))
            .field("material_list[12, 14]", &format!("{:02X?}", &self.material_list_raw))
        .finish()
    }
}

impl Display for PacketCzItemlistwinRes {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("atype(long as i32)[4, 8]: {}", &self.atype));
        fields.push(format!("action(long as i32)[8, 12]: {}", &self.action));
        fields.push(format!("material_list(unsigned short as u16)[12, 14]: {}", &self.material_list));
        write!(f, "PacketCzItemlistwinRes\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChEnterCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnterCheckbot")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("dw_aid[4, 8]", &format!("{:02X?}", &self.dw_aid_raw))
            .field("sz_string_info[8, ?]", &format!("{:02X?}", &self.sz_string_info_raw))
        .finish()
    }
}

impl Display for PacketChEnterCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("dw_aid(unsigned long as u32)[4, 8]: {}", &self.dw_aid));
        fields.push(format!("sz_string_info(char[] as String)[8, ?]: {}", &self.sz_string_info));
        write!(f, "PacketChEnterCheckbot\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsgSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgSkill")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("skid[2, 4]", &format!("{:02X?}", &self.skid_raw))
            .field("msgid[4, 8]", &format!("{:02X?}", &self.msgid_raw))
        .finish()
    }
}

impl Display for PacketZcMsgSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("skid(unsigned short as u16)[2, 4]: {}", &self.skid));
        fields.push(format!("msgid(int as i32)[4, 8]: {}", &self.msgid));
        write!(f, "PacketZcMsgSkill\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChCheckbot")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("dw_aid[4, 8]", &format!("{:02X?}", &self.dw_aid_raw))
            .field("sz_string_info[8, 32]", &format!("{:02X?}", &self.sz_string_info_raw))
        .finish()
    }
}

impl Display for PacketChCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("dw_aid(unsigned long as u32)[4, 8]: {}", &self.dw_aid));
        fields.push(format!("sz_string_info(char[] as char[])[8, 32]: {}", &self.sz_string_info.pretty_output()));
        write!(f, "PacketChCheckbot\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCheckbot")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("img[4, ?]", &format!("{:02X?}", &self.img_raw))
        .finish()
    }
}

impl Display for PacketHcCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("img(char[] as String)[4, ?]: {}", &self.img));
        write!(f, "PacketHcCheckbot\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcCheckbotResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCheckbotResult")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("result[4, 5]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketHcCheckbotResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("result(unsigned char as u8)[4, 5]: {}", &self.result));
        write!(f, "PacketHcCheckbotResult\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBattleFieldList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzBattleFieldList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleFieldList")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("ack_type[6, 8]", &format!("{:02X?}", &self.ack_type_raw))
            .field("info_list[8, 70]", &format!("{:02X?}", &self.info_list_raw))
        .finish()
    }
}

impl Display for PacketZcBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("ack_type(short as i16)[6, 8]: {}", &self.ack_type));
        fields.push(format!("info_list([] as Vec)[8, 70]: {}", &self.info_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcBattleFieldList\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinBattleField")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("join_team[6, 8]", &format!("{:02X?}", &self.join_team_raw))
        .finish()
    }
}

impl Display for PacketCzJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("join_team(short as i16)[6, 8]: {}", &self.join_team));
        write!(f, "PacketCzJoinBattleField\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcJoinBattleField")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("join_team[6, 8]", &format!("{:02X?}", &self.join_team_raw))
            .field("result[8, 10]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("join_team(short as i16)[6, 8]: {}", &self.join_team));
        fields.push(format!("result(short as i16)[8, 10]: {}", &self.result));
        write!(f, "PacketZcJoinBattleField\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelBattleField")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
        .finish()
    }
}

impl Display for PacketCzCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        write!(f, "PacketCzCancelBattleField\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCancelBattleField")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("result[6, 8]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("result(short as i16)[6, 8]: {}", &self.result));
        write!(f, "PacketZcCancelBattleField\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBattleStateMonitor")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("power_switch[6, 8]", &format!("{:02X?}", &self.power_switch_raw))
        .finish()
    }
}

impl Display for PacketCzReqBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("power_switch(short as i16)[6, 8]: {}", &self.power_switch));
        write!(f, "PacketCzReqBattleStateMonitor\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBattleStateMonitor")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("play_count[6, 8]", &format!("{:02X?}", &self.play_count_raw))
            .field("battle_state[8, 10]", &format!("{:02X?}", &self.battle_state_raw))
            .field("team_count_a[10, 12]", &format!("{:02X?}", &self.team_count_a_raw))
            .field("team_count_b[12, 14]", &format!("{:02X?}", &self.team_count_b_raw))
            .field("my_count[14, 16]", &format!("{:02X?}", &self.my_count_raw))
            .field("join_team[16, 18]", &format!("{:02X?}", &self.join_team_raw))
        .finish()
    }
}

impl Display for PacketZcAckBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("play_count(short as i16)[6, 8]: {}", &self.play_count));
        fields.push(format!("battle_state(short as i16)[8, 10]: {}", &self.battle_state));
        fields.push(format!("team_count_a(short as i16)[10, 12]: {}", &self.team_count_a));
        fields.push(format!("team_count_b(short as i16)[12, 14]: {}", &self.team_count_b));
        fields.push(format!("my_count(short as i16)[14, 16]: {}", &self.my_count));
        fields.push(format!("join_team(short as i16)[16, 18]: {}", &self.join_team));
        write!(f, "PacketZcAckBattleStateMonitor\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattleNotiStartStep {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleNotiStartStep")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
            .field("result[6, 8]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcBattleNotiStartStep {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        fields.push(format!("result(short as i16)[6, 8]: {}", &self.result));
        write!(f, "PacketZcBattleNotiStartStep\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattleJoinNotiDefer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleJoinNotiDefer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bfno[2, 6]", &format!("{:02X?}", &self.bfno_raw))
        .finish()
    }
}

impl Display for PacketZcBattleJoinNotiDefer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bfno(unsigned long as u32)[2, 6]: {}", &self.bfno));
        write!(f, "PacketZcBattleJoinNotiDefer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBattleJoinDisableState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleJoinDisableState")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("enable[2, 3]", &format!("{:02X?}", &self.enable_raw))
        .finish()
    }
}

impl Display for PacketZcBattleJoinDisableState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("enable(bool as bool)[2, 3]: {}", &self.enable));
        write!(f, "PacketZcBattleJoinDisableState\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzGmFullstrip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGmFullstrip")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("target_aid[2, 6]", &format!("{:02X?}", &self.target_aid_raw))
        .finish()
    }
}

impl Display for PacketCzGmFullstrip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("target_aid(unsigned long as u32)[2, 6]: {}", &self.target_aid));
        write!(f, "PacketCzGmFullstrip\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyExp")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("amount[6, 10]", &format!("{:02X?}", &self.amount_raw))
            .field("var_id[10, 12]", &format!("{:02X?}", &self.var_id_raw))
            .field("exp_type[12, 14]", &format!("{:02X?}", &self.exp_type_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("amount(int as i32)[6, 10]: {}", &self.amount));
        fields.push(format!("var_id(unsigned short as u16)[10, 12]: {}", &self.var_id));
        fields.push(format!("exp_type(short as i16)[12, 14]: {}", &self.exp_type));
        write!(f, "PacketZcNotifyExp\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry7 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry7")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[5, 9]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[9, 11]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[11, 13]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[13, 15]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[15, 19]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[19, 21]", &format!("{:02X?}", &self.job_raw))
            .field("head[21, 23]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[23, 27]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[27, 29]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[29, 33]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("accessory2[33, 35]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[35, 37]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[37, 39]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[39, 41]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[41, 43]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[43, 47]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[47, 49]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[49, 51]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[51, 55]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[55, 56]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[56, 57]", &format!("{:02X?}", &self.sex_raw))
            .field("move_data[57, 63]", &format!("{:02X?}", &self.move_data_raw))
            .field("x_size[63, 64]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[64, 65]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[65, 67]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[67, 69]", &format!("{:02X?}", &self.font_raw))
            .field("name[69, 93]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry7 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[5, 9]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[9, 11]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[11, 13]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[13, 15]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[15, 19]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[19, 21]: {}", &self.job));
        fields.push(format!("head(short as i16)[21, 23]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[23, 27]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[27, 29]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned long as u32)[29, 33]: {}", &self.move_start_time));
        fields.push(format!("accessory2(short as i16)[33, 35]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[35, 37]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[37, 39]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[39, 41]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[41, 43]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[43, 47]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[47, 49]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[49, 51]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[51, 55]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[55, 56]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[56, 57]: {}", &self.sex));
        fields.push(format!("move_data(unsigned short[] as u16[])[57, 63]: {}", &self.move_data.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[63, 64]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[64, 65]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[65, 67]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[67, 69]: {}", &self.font));
        fields.push(format!("name(char[] as char[])[69, 93]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcNotifyMoveentry7\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyNewentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry5")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[5, 9]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[9, 11]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[11, 13]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[13, 15]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[15, 19]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[19, 21]", &format!("{:02X?}", &self.job_raw))
            .field("head[21, 23]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[23, 27]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[27, 29]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[29, 31]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[31, 33]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[33, 35]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[35, 37]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[37, 39]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[39, 43]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[43, 45]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[45, 47]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[47, 51]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[51, 52]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[52, 53]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[53, 56]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[56, 57]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[57, 58]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[58, 60]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[60, 62]", &format!("{:02X?}", &self.font_raw))
            .field("name[62, 86]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyNewentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[5, 9]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[9, 11]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[11, 13]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[13, 15]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[15, 19]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[19, 21]: {}", &self.job));
        fields.push(format!("head(short as i16)[21, 23]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[23, 27]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[27, 29]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[29, 31]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[31, 33]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[33, 35]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[35, 37]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[37, 39]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[39, 43]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[43, 45]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[45, 47]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[47, 51]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[51, 52]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[52, 53]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[53, 56]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[56, 57]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[57, 58]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[58, 60]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[60, 62]: {}", &self.font));
        fields.push(format!("name(char[] as char[])[62, 86]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcNotifyNewentry5\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry5")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("gid[5, 9]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[9, 11]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[11, 13]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[13, 15]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[15, 19]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[19, 21]", &format!("{:02X?}", &self.job_raw))
            .field("head[21, 23]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[23, 27]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[27, 29]", &format!("{:02X?}", &self.accessory_raw))
            .field("accessory2[29, 31]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[31, 33]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[33, 35]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[35, 37]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[37, 39]", &format!("{:02X?}", &self.head_dir_raw))
            .field("guid[39, 43]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[43, 45]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[45, 47]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[47, 51]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[51, 52]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[52, 53]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[53, 56]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[56, 57]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[57, 58]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[58, 59]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[59, 61]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[61, 63]", &format!("{:02X?}", &self.font_raw))
            .field("name[63, 87]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("gid(unsigned long as u32)[5, 9]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[9, 11]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[11, 13]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[13, 15]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[15, 19]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[19, 21]: {}", &self.job));
        fields.push(format!("head(short as i16)[21, 23]: {}", &self.head));
        fields.push(format!("weapon(int as i32)[23, 27]: {}", &self.weapon));
        fields.push(format!("accessory(short as i16)[27, 29]: {}", &self.accessory));
        fields.push(format!("accessory2(short as i16)[29, 31]: {}", &self.accessory2));
        fields.push(format!("accessory3(short as i16)[31, 33]: {}", &self.accessory3));
        fields.push(format!("headpalette(short as i16)[33, 35]: {}", &self.headpalette));
        fields.push(format!("bodypalette(short as i16)[35, 37]: {}", &self.bodypalette));
        fields.push(format!("head_dir(short as i16)[37, 39]: {}", &self.head_dir));
        fields.push(format!("guid(unsigned long as u32)[39, 43]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[43, 45]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[45, 47]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[47, 51]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[51, 52]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[52, 53]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[53, 56]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[56, 57]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[57, 58]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[58, 59]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[59, 61]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[61, 63]: {}", &self.font));
        fields.push(format!("name(char[] as char[])[63, 87]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcNotifyStandentry5\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDeleteItemFromBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromBody")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("delete_type[2, 4]", &format!("{:02X?}", &self.delete_type_raw))
            .field("index[4, 6]", &format!("{:02X?}", &self.index_raw))
            .field("count[6, 8]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcDeleteItemFromBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("delete_type(short as i16)[2, 4]: {}", &self.delete_type));
        fields.push(format!("index(unsigned short as u16)[4, 6]: {}", &self.index));
        fields.push(format!("count(short as i16)[6, 8]: {}", &self.count));
        write!(f, "PacketZcDeleteItemFromBody\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUseskillAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseskillAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("target_id[6, 10]", &format!("{:02X?}", &self.target_id_raw))
            .field("x_pos[10, 12]", &format!("{:02X?}", &self.x_pos_raw))
            .field("y_pos[12, 14]", &format!("{:02X?}", &self.y_pos_raw))
            .field("skid[14, 16]", &format!("{:02X?}", &self.skid_raw))
            .field("property[16, 20]", &format!("{:02X?}", &self.property_raw))
            .field("delay_time[20, 24]", &format!("{:02X?}", &self.delay_time_raw))
            .field("is_disposable[24, 25]", &format!("{:02X?}", &self.is_disposable_raw))
        .finish()
    }
}

impl Display for PacketZcUseskillAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("target_id(unsigned long as u32)[6, 10]: {}", &self.target_id));
        fields.push(format!("x_pos(short as i16)[10, 12]: {}", &self.x_pos));
        fields.push(format!("y_pos(short as i16)[12, 14]: {}", &self.y_pos));
        fields.push(format!("skid(unsigned short as u16)[14, 16]: {}", &self.skid));
        fields.push(format!("property(unsigned long as u32)[16, 20]: {}", &self.property));
        fields.push(format!("delay_time(unsigned long as u32)[20, 24]: {}", &self.delay_time));
        fields.push(format!("is_disposable(bool as bool)[24, 25]: {}", &self.is_disposable));
        write!(f, "PacketZcUseskillAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeGroupMaster")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("old_master_aid[2, 6]", &format!("{:02X?}", &self.old_master_aid_raw))
            .field("new_master_aid[6, 10]", &format!("{:02X?}", &self.new_master_aid_raw))
        .finish()
    }
}

impl Display for PacketZcChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("old_master_aid(unsigned long as u32)[2, 6]: {}", &self.old_master_aid));
        fields.push(format!("new_master_aid(unsigned long as u32)[6, 10]: {}", &self.new_master_aid));
        write!(f, "PacketZcChangeGroupMaster\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPlayNpcBgm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPlayNpcBgm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("bgm[2, 26]", &format!("{:02X?}", &self.bgm_raw))
        .finish()
    }
}

impl Display for PacketZcPlayNpcBgm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("bgm(char[] as char[])[2, 26]: {}", &self.bgm.pretty_output()));
        write!(f, "PacketZcPlayNpcBgm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDefineCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDefineCheck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("result[4, 8]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcDefineCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("result(int as i32)[4, 8]: {}", &self.result));
        write!(f, "PacketZcDefineCheck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlistFrommc2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("unique_id[8, 12]", &format!("{:02X?}", &self.unique_id_raw))
            .field("item_list[12, 34]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("unique_id(unsigned long as u32)[8, 12]: {}", &self.unique_id));
        fields.push(format!("item_list([] as Vec)[12, 34]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPcPurchaseItemlistFrommc2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlistFrommc2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("unique_id[8, 12]", &format!("{:02X?}", &self.unique_id_raw))
            .field("item_list[12, 16]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("unique_id(unsigned long as u32)[8, 12]: {}", &self.unique_id));
        fields.push(format!("item_list([] as Vec)[12, 16]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzPcPurchaseItemlistFrommc2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyBookingReqRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqRegister")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("register_info[2, ?]", &format!("{:02X?}", &self.register_info_raw))
        .finish()
    }
}

impl Display for PacketCzPartyBookingReqRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("register_info(struct as Struct)[2, ?]: {}", &self.register_info));
        write!(f, "PacketCzPartyBookingReqRegister\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingAckRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckRegister")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingAckRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        write!(f, "PacketZcPartyBookingAckRegister\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyBookingReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqSearch")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("level[2, 4]", &format!("{:02X?}", &self.level_raw))
            .field("map_id[4, 6]", &format!("{:02X?}", &self.map_id_raw))
            .field("job[6, 8]", &format!("{:02X?}", &self.job_raw))
            .field("last_index[8, 12]", &format!("{:02X?}", &self.last_index_raw))
            .field("result_count[12, 14]", &format!("{:02X?}", &self.result_count_raw))
        .finish()
    }
}

impl Display for PacketCzPartyBookingReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("level(short as i16)[2, 4]: {}", &self.level));
        fields.push(format!("map_id(short as i16)[4, 6]: {}", &self.map_id));
        fields.push(format!("job(short as i16)[6, 8]: {}", &self.job));
        fields.push(format!("last_index(unsigned long as u32)[8, 12]: {}", &self.last_index));
        fields.push(format!("result_count(short as i16)[12, 14]: {}", &self.result_count));
        write!(f, "PacketCzPartyBookingReqSearch\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingAckSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckSearch")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("is_exist_more_result[4, 5]", &format!("{:02X?}", &self.is_exist_more_result_raw))
            .field("info[5, 53]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingAckSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("is_exist_more_result(bool as bool)[4, 5]: {}", &self.is_exist_more_result));
        fields.push(format!("info([] as Vec)[5, 53]: {}", &self.info.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcPartyBookingAckSearch\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyBookingReqDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzPartyBookingReqDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzPartyBookingReqDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingAckDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingAckDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        write!(f, "PacketZcPartyBookingAckDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPartyBookingReqUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("job[2, 8]", &format!("{:02X?}", &self.job_raw))
        .finish()
    }
}

impl Display for PacketCzPartyBookingReqUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("job(short[] as i16[])[2, 8]: {}", &self.job.pretty_output()));
        write!(f, "PacketCzPartyBookingReqUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingNotifyInsert {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyInsert")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("info[2, ?]", &format!("{:02X?}", &self.info_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingNotifyInsert {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("info(struct as Struct)[2, ?]: {}", &self.info));
        write!(f, "PacketZcPartyBookingNotifyInsert\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingNotifyUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyUpdate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 6]", &format!("{:02X?}", &self.index_raw))
            .field("job1[6, 8]", &format!("{:02X?}", &self.job1_raw))
            .field("job2[8, 10]", &format!("{:02X?}", &self.job2_raw))
            .field("job3[10, 12]", &format!("{:02X?}", &self.job3_raw))
            .field("job4[12, 14]", &format!("{:02X?}", &self.job4_raw))
            .field("job5[14, 16]", &format!("{:02X?}", &self.job5_raw))
            .field("job6[16, 18]", &format!("{:02X?}", &self.job6_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingNotifyUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned long as u32)[2, 6]: {}", &self.index));
        fields.push(format!("job1(short as i16)[6, 8]: {}", &self.job1));
        fields.push(format!("job2(short as i16)[8, 10]: {}", &self.job2));
        fields.push(format!("job3(short as i16)[10, 12]: {}", &self.job3));
        fields.push(format!("job4(short as i16)[12, 14]: {}", &self.job4));
        fields.push(format!("job5(short as i16)[14, 16]: {}", &self.job5));
        fields.push(format!("job6(short as i16)[16, 18]: {}", &self.job6));
        write!(f, "PacketZcPartyBookingNotifyUpdate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcPartyBookingNotifyDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyDelete")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 6]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PacketZcPartyBookingNotifyDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(unsigned long as u32)[2, 6]: {}", &self.index));
        write!(f, "PacketZcPartyBookingNotifyDelete\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSimpleCashBtnshow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzSimpleCashBtnshow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashBtnshow")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("show[2, 3]", &format!("{:02X?}", &self.show_raw))
        .finish()
    }
}

impl Display for PacketZcSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("show(bool as bool)[2, 3]: {}", &self.show));
        write!(f, "PacketZcSimpleCashBtnshow\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyHpToGroupmR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyHpToGroupmR2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("hp[6, 10]", &format!("{:02X?}", &self.hp_raw))
            .field("maxhp[10, 14]", &format!("{:02X?}", &self.maxhp_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyHpToGroupmR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("hp(int as i32)[6, 10]: {}", &self.hp));
        fields.push(format!("maxhp(int as i32)[10, 14]: {}", &self.maxhp));
        write!(f, "PacketZcNotifyHpToGroupmR2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAddExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddExchangeItem2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("count[5, 9]", &format!("{:02X?}", &self.count_raw))
            .field("is_identified[9, 10]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[10, 11]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[11, 12]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[12, 20]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PacketZcAddExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("count(int as i32)[5, 9]: {}", &self.count));
        fields.push(format!("is_identified(bool as bool)[9, 10]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[10, 11]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[11, 12]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[12, 20]: {}", &self.slot));
        write!(f, "PacketZcAddExchangeItem2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("count[2, 3]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketZcOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("count(unsigned char as u8)[2, 3]: {}", &self.count));
        write!(f, "PacketZcOpenBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("limit_zeny[4, 8]", &format!("{:02X?}", &self.limit_zeny_raw))
            .field("result[8, 9]", &format!("{:02X?}", &self.result_raw))
            .field("store_name[9, 89]", &format!("{:02X?}", &self.store_name_raw))
            .field("item_list[89, 97]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzReqOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("limit_zeny(unsigned long as u32)[4, 8]: {}", &self.limit_zeny));
        fields.push(format!("result(unsigned char as u8)[8, 9]: {}", &self.result));
        fields.push(format!("store_name(char[] as char[])[9, 89]: {}", &self.store_name.pretty_output()));
        fields.push(format!("item_list([] as Vec)[89, 97]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzReqOpenBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFailedOpenBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedOpenBuyingStoreToBuyer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("total_weight[4, 8]", &format!("{:02X?}", &self.total_weight_raw))
        .finish()
    }
}

impl Display for PacketZcFailedOpenBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("total_weight(int as i32)[4, 8]: {}", &self.total_weight));
        write!(f, "PacketZcFailedOpenBuyingStoreToBuyer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMyitemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMyitemlistBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("limit_zeny[8, 12]", &format!("{:02X?}", &self.limit_zeny_raw))
            .field("item_list[12, 21]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcMyitemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("limit_zeny(int as i32)[8, 12]: {}", &self.limit_zeny));
        fields.push(format!("item_list([] as Vec)[12, 21]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcMyitemlistBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBuyingStoreEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("maker_aid[2, 6]", &format!("{:02X?}", &self.maker_aid_raw))
            .field("store_name[6, 86]", &format!("{:02X?}", &self.store_name_raw))
        .finish()
    }
}

impl Display for PacketZcBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("maker_aid(unsigned long as u32)[2, 6]: {}", &self.maker_aid));
        fields.push(format!("store_name(char[] as char[])[6, 86]: {}", &self.store_name.pretty_output()));
        write!(f, "PacketZcBuyingStoreEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqCloseBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqCloseBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzReqCloseBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzReqCloseBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcDisappearBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDisappearBuyingStoreEntry")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("maker_aid[2, 6]", &format!("{:02X?}", &self.maker_aid_raw))
        .finish()
    }
}

impl Display for PacketZcDisappearBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("maker_aid(unsigned long as u32)[2, 6]: {}", &self.maker_aid));
        write!(f, "PacketZcDisappearBuyingStoreEntry\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqClickToBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqClickToBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("maker_aid[2, 6]", &format!("{:02X?}", &self.maker_aid_raw))
        .finish()
    }
}

impl Display for PacketCzReqClickToBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("maker_aid(unsigned long as u32)[2, 6]: {}", &self.maker_aid));
        write!(f, "PacketCzReqClickToBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckItemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemlistBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("maker_aid[4, 8]", &format!("{:02X?}", &self.maker_aid_raw))
            .field("store_id[8, 12]", &format!("{:02X?}", &self.store_id_raw))
            .field("limit_zeny[12, 16]", &format!("{:02X?}", &self.limit_zeny_raw))
            .field("item_list[16, 25]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketZcAckItemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("maker_aid(unsigned long as u32)[4, 8]: {}", &self.maker_aid));
        fields.push(format!("store_id(unsigned long as u32)[8, 12]: {}", &self.store_id));
        fields.push(format!("limit_zeny(int as i32)[12, 16]: {}", &self.limit_zeny));
        fields.push(format!("item_list([] as Vec)[16, 25]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcAckItemlistBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqTradeBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqTradeBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("maker_aid[4, 8]", &format!("{:02X?}", &self.maker_aid_raw))
            .field("store_id[8, 12]", &format!("{:02X?}", &self.store_id_raw))
            .field("item_list[12, 18]", &format!("{:02X?}", &self.item_list_raw))
        .finish()
    }
}

impl Display for PacketCzReqTradeBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("maker_aid(unsigned long as u32)[4, 8]: {}", &self.maker_aid));
        fields.push(format!("store_id(unsigned long as u32)[8, 12]: {}", &self.store_id));
        fields.push(format!("item_list([] as Vec)[12, 18]: {}", &self.item_list.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketCzReqTradeBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFailedTradeBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedTradeBuyingStoreToBuyer")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketZcFailedTradeBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        write!(f, "PacketZcFailedTradeBuyingStoreToBuyer\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcUpdateItemFromBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateItemFromBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("limit_zeny[6, 10]", &format!("{:02X?}", &self.limit_zeny_raw))
        .finish()
    }
}

impl Display for PacketZcUpdateItemFromBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("limit_zeny(int as i32)[6, 10]: {}", &self.limit_zeny));
        write!(f, "PacketZcUpdateItemFromBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcItemDeleteBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemDeleteBuyingStore")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("zeny[6, 10]", &format!("{:02X?}", &self.zeny_raw))
        .finish()
    }
}

impl Display for PacketZcItemDeleteBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("zeny(int as i32)[6, 10]: {}", &self.zeny));
        write!(f, "PacketZcItemDeleteBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcElInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcElInit")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("hp[6, 10]", &format!("{:02X?}", &self.hp_raw))
            .field("max_hp[10, 14]", &format!("{:02X?}", &self.max_hp_raw))
            .field("sp[14, 18]", &format!("{:02X?}", &self.sp_raw))
            .field("max_sp[18, 22]", &format!("{:02X?}", &self.max_sp_raw))
        .finish()
    }
}

impl Display for PacketZcElInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(int as i32)[2, 6]: {}", &self.aid));
        fields.push(format!("hp(int as i32)[6, 10]: {}", &self.hp));
        fields.push(format!("max_hp(int as i32)[10, 14]: {}", &self.max_hp));
        fields.push(format!("sp(int as i32)[14, 18]: {}", &self.sp));
        fields.push(format!("max_sp(int as i32)[18, 22]: {}", &self.max_sp));
        write!(f, "PacketZcElInit\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcElParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcElParChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("var[2, 4]", &format!("{:02X?}", &self.var_raw))
            .field("value[4, 8]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcElParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("var(unsigned short as u16)[2, 4]: {}", &self.var));
        fields.push(format!("value(int as i32)[4, 8]: {}", &self.value));
        write!(f, "PacketZcElParChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcBroadcast4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast4")
            .field("pakcet_type[0, 2]", &format!("{:02X?}", &self.pakcet_type_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("msgtype[4, 5]", &format!("{:02X?}", &self.msgtype_raw))
            .field("color_rgb[5, 9]", &format!("{:02X?}", &self.color_rgb_raw))
            .field("msg[9, ?]", &format!("{:02X?}", &self.msg_raw))
        .finish()
    }
}

impl Display for PacketZcBroadcast4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("pakcet_type(short as i16)[0, 2]: {}", &self.pakcet_type));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("msgtype(unsigned char as u8)[4, 5]: {}", &self.msgtype));
        fields.push(format!("color_rgb(unsigned long as u32)[5, 9]: {}", &self.color_rgb));
        fields.push(format!("msg(char[] as String)[9, ?]: {}", &self.msg));
        write!(f, "PacketZcBroadcast4\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcCostumeSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCostumeSpriteChange")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("value[7, 11]", &format!("{:02X?}", &self.value_raw))
        .finish()
    }
}

impl Display for PacketZcCostumeSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("value(int as i32)[7, 11]: {}", &self.value));
        write!(f, "PacketZcCostumeSpriteChange\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcOtpUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcOtpUser")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketAcOtpUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketAcOtpUser\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaOtpAuthReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaOtpAuthReq")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("otpcode[2, 9]", &format!("{:02X?}", &self.otpcode_raw))
        .finish()
    }
}

impl Display for PacketCaOtpAuthReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("otpcode(char[] as char[])[2, 9]: {}", &self.otpcode.pretty_output()));
        write!(f, "PacketCaOtpAuthReq\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcOtpAuthAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcOtpAuthAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("login_result[4, 6]", &format!("{:02X?}", &self.login_result_raw))
        .finish()
    }
}

impl Display for PacketAcOtpAuthAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("login_result(unsigned short as u16)[4, 6]: {}", &self.login_result));
        write!(f, "PacketAcOtpAuthAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcFailedTradeBuyingStoreToSeller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedTradeBuyingStoreToSeller")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
            .field("itid[4, 6]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketZcFailedTradeBuyingStoreToSeller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(short as i16)[2, 4]: {}", &self.result));
        fields.push(format!("itid(unsigned short as u16)[4, 6]: {}", &self.itid));
        write!(f, "PacketZcFailedTradeBuyingStoreToSeller\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaSsoLoginReqa {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaSsoLoginReqa")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("version[4, 8]", &format!("{:02X?}", &self.version_raw))
            .field("clienttype[8, 9]", &format!("{:02X?}", &self.clienttype_raw))
            .field("id[9, 33]", &format!("{:02X?}", &self.id_raw))
            .field("mac_addr[33, 50]", &format!("{:02X?}", &self.mac_addr_raw))
            .field("ip_addr[50, 65]", &format!("{:02X?}", &self.ip_addr_raw))
            .field("t1[65, ?]", &format!("{:02X?}", &self.t1_raw))
        .finish()
    }
}

impl Display for PacketCaSsoLoginReqa {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("version(unsigned long as u32)[4, 8]: {}", &self.version));
        fields.push(format!("clienttype(unsigned char as u8)[8, 9]: {}", &self.clienttype));
        fields.push(format!("id(char[] as char[])[9, 33]: {}", &self.id.pretty_output()));
        fields.push(format!("mac_addr(char[] as char[])[33, 50]: {}", &self.mac_addr.pretty_output()));
        fields.push(format!("ip_addr(char[] as char[])[50, 65]: {}", &self.ip_addr.pretty_output()));
        fields.push(format!("t1(char[] as String)[65, ?]: {}", &self.t1));
        write!(f, "PacketCaSsoLoginReqa\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCaSsoLoginReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaSsoLoginReq")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("version[4, 8]", &format!("{:02X?}", &self.version_raw))
            .field("clienttype[8, 9]", &format!("{:02X?}", &self.clienttype_raw))
            .field("id[9, 33]", &format!("{:02X?}", &self.id_raw))
            .field("passwd[33, 60]", &format!("{:02X?}", &self.passwd_raw))
            .field("mac_adress[60, 77]", &format!("{:02X?}", &self.mac_adress_raw))
            .field("ip[77, 92]", &format!("{:02X?}", &self.ip_raw))
            .field("t1[92, ?]", &format!("{:02X?}", &self.t1_raw))
        .finish()
    }
}

impl Display for PacketCaSsoLoginReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("version(unsigned long as u32)[4, 8]: {}", &self.version));
        fields.push(format!("clienttype(unsigned char as u8)[8, 9]: {}", &self.clienttype));
        fields.push(format!("id(char[] as char[])[9, 33]: {}", &self.id.pretty_output()));
        fields.push(format!("passwd(char[] as char[])[33, 60]: {}", &self.passwd.pretty_output()));
        fields.push(format!("mac_adress(char[] as char[])[60, 77]: {}", &self.mac_adress.pretty_output()));
        fields.push(format!("ip(char[] as char[])[77, 92]: {}", &self.ip.pretty_output()));
        fields.push(format!("t1(char[] as String)[92, ?]: {}", &self.t1));
        write!(f, "PacketCaSsoLoginReq\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcSsoLoginAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcSsoLoginAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("result[2, 4]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketAcSsoLoginAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("result(unsigned short as u16)[2, 4]: {}", &self.result));
        write!(f, "PacketAcSsoLoginAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3Reserved")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketChDeleteChar3Reserved\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3Reserved")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("result[6, 10]", &format!("{:02X?}", &self.result_raw))
            .field("delete_reserved_date[10, 14]", &format!("{:02X?}", &self.delete_reserved_date_raw))
        .finish()
    }
}

impl Display for PacketHcDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("result(int as i32)[6, 10]: {}", &self.result));
        fields.push(format!("delete_reserved_date(long as i32)[10, 14]: {}", &self.delete_reserved_date));
        write!(f, "PacketHcDeleteChar3Reserved\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("birth[6, 12]", &format!("{:02X?}", &self.birth_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("birth(char[] as char[])[6, 12]: {}", &self.birth.pretty_output()));
        write!(f, "PacketChDeleteChar3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("result[6, 10]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketHcDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("result(int as i32)[6, 10]: {}", &self.result));
        write!(f, "PacketHcDeleteChar3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3Cancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketChDeleteChar3Cancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3Cancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("result[6, 10]", &format!("{:02X?}", &self.result_raw))
        .finish()
    }
}

impl Display for PacketHcDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("result(int as i32)[6, 10]: {}", &self.result));
        write!(f, "PacketHcDeleteChar3Cancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSearchStoreInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("store_type[4, 5]", &format!("{:02X?}", &self.store_type_raw))
            .field("max_price[5, 9]", &format!("{:02X?}", &self.max_price_raw))
            .field("min_price[9, 13]", &format!("{:02X?}", &self.min_price_raw))
            .field("item_idlist_size[13, 14]", &format!("{:02X?}", &self.item_idlist_size_raw))
            .field("card_idlist_size[14, 15]", &format!("{:02X?}", &self.card_idlist_size_raw))
        .finish()
    }
}

impl Display for PacketCzSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("store_type(unsigned char as u8)[4, 5]: {}", &self.store_type));
        fields.push(format!("max_price(unsigned long as u32)[5, 9]: {}", &self.max_price));
        fields.push(format!("min_price(unsigned long as u32)[9, 13]: {}", &self.min_price));
        fields.push(format!("item_idlist_size(unsigned char as u8)[13, 14]: {}", &self.item_idlist_size));
        fields.push(format!("card_idlist_size(unsigned char as u8)[14, 15]: {}", &self.card_idlist_size));
        write!(f, "PacketCzSearchStoreInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSearchStoreInfoAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSearchStoreInfoAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("is_first_page[4, 5]", &format!("{:02X?}", &self.is_first_page_raw))
            .field("is_nex_page[5, 6]", &format!("{:02X?}", &self.is_nex_page_raw))
            .field("remained_search_cnt[6, 7]", &format!("{:02X?}", &self.remained_search_cnt_raw))
            .field("ssilist[7, 113]", &format!("{:02X?}", &self.ssilist_raw))
        .finish()
    }
}

impl Display for PacketZcSearchStoreInfoAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("is_first_page(bool as bool)[4, 5]: {}", &self.is_first_page));
        fields.push(format!("is_nex_page(bool as bool)[5, 6]: {}", &self.is_nex_page));
        fields.push(format!("remained_search_cnt(unsigned char as u8)[6, 7]: {}", &self.remained_search_cnt));
        fields.push(format!("ssilist([] as Vec)[7, 113]: {}", &self.ssilist.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcSearchStoreInfoAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSearchStoreInfoFailed {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSearchStoreInfoFailed")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("reason[2, 3]", &format!("{:02X?}", &self.reason_raw))
        .finish()
    }
}

impl Display for PacketZcSearchStoreInfoFailed {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("reason(unsigned char as u8)[2, 3]: {}", &self.reason));
        write!(f, "PacketZcSearchStoreInfoFailed\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSearchStoreInfoNextPage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSearchStoreInfoNextPage")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzSearchStoreInfoNextPage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzSearchStoreInfoNextPage\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckBanGuildSso {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBanGuildSso")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_name[2, 26]", &format!("{:02X?}", &self.char_name_raw))
            .field("reason_desc[26, 66]", &format!("{:02X?}", &self.reason_desc_raw))
        .finish()
    }
}

impl Display for PacketZcAckBanGuildSso {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_name(char[] as char[])[2, 26]: {}", &self.char_name.pretty_output()));
        fields.push(format!("reason_desc(char[] as char[])[26, 66]: {}", &self.reason_desc.pretty_output()));
        write!(f, "PacketZcAckBanGuildSso\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOpenSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenSearchStoreInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("open_type[2, 4]", &format!("{:02X?}", &self.open_type_raw))
            .field("search_cnt_max[4, 5]", &format!("{:02X?}", &self.search_cnt_max_raw))
        .finish()
    }
}

impl Display for PacketZcOpenSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("open_type(short as i16)[2, 4]: {}", &self.open_type));
        fields.push(format!("search_cnt_max(unsigned char as u8)[4, 5]: {}", &self.search_cnt_max));
        write!(f, "PacketZcOpenSearchStoreInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzCloseSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseSearchStoreInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzCloseSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzCloseSearchStoreInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzSsilistItemClick {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSsilistItemClick")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
            .field("ssiid[6, 10]", &format!("{:02X?}", &self.ssiid_raw))
            .field("itid[10, 12]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PacketCzSsilistItemClick {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        fields.push(format!("ssiid(unsigned long as u32)[6, 10]: {}", &self.ssiid));
        fields.push(format!("itid(unsigned short as u16)[10, 12]: {}", &self.itid));
        write!(f, "PacketCzSsilistItemClick\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcSsilistItemClickAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSsilistItemClickAck")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("x[2, 4]", &format!("{:02X?}", &self.x_raw))
            .field("y[4, 6]", &format!("{:02X?}", &self.y_raw))
        .finish()
    }
}

impl Display for PacketZcSsilistItemClickAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("x(short as i16)[2, 4]: {}", &self.x));
        fields.push(format!("y(short as i16)[4, 6]: {}", &self.y));
        write!(f, "PacketZcSsilistItemClickAck\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketAcRefuseLoginR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRefuseLoginR2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("error_code[2, 6]", &format!("{:02X?}", &self.error_code_raw))
            .field("block_date[6, 26]", &format!("{:02X?}", &self.block_date_raw))
        .finish()
    }
}

impl Display for PacketAcRefuseLoginR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("error_code(unsigned int as u32)[2, 6]: {}", &self.error_code));
        fields.push(format!("block_date(char[] as char[])[6, 26]: {}", &self.block_date.pretty_output()));
        write!(f, "PacketAcRefuseLoginR2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChSelectAccessibleMapname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectAccessibleMapname")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("char_num[2, 3]", &format!("{:02X?}", &self.char_num_raw))
            .field("map_list_num[3, 4]", &format!("{:02X?}", &self.map_list_num_raw))
        .finish()
    }
}

impl Display for PacketChSelectAccessibleMapname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("char_num(unsigned char as u8)[2, 3]: {}", &self.char_num));
        fields.push(format!("map_list_num(unsigned char as u8)[3, 4]: {}", &self.map_list_num));
        write!(f, "PacketChSelectAccessibleMapname\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestMove2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMove2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("dest[2, 5]", &format!("{:02X?}", &self.dest_raw))
        .finish()
    }
}

impl Display for PacketCzRequestMove2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("dest(unsigned short[] as u16[])[2, 5]: {}", &self.dest.pretty_output()));
        write!(f, "PacketCzRequestMove2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChSendMapInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSendMapInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("map_name[6, 22]", &format!("{:02X?}", &self.map_name_raw))
            .field("map_server_ip[22, 26]", &format!("{:02X?}", &self.map_server_ip_raw))
            .field("map_server_port[26, 28]", &format!("{:02X?}", &self.map_server_port_raw))
            .field("dns_host[28, 156]", &format!("{:02X?}", &self.dns_host_raw))
        .finish()
    }
}

impl Display for PacketChSendMapInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("map_name(char[] as char[])[6, 22]: {}", &self.map_name.pretty_output()));
        fields.push(format!("map_server_ip(unsigned long as u32)[22, 26]: {}", &self.map_server_ip));
        fields.push(format!("map_server_port(short as i16)[26, 28]: {}", &self.map_server_port));
        fields.push(format!("dns_host(char[] as char[])[28, 156]: {}", &self.dns_host.pretty_output()));
        write!(f, "PacketChSendMapInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcAcceptEnterNeoUnionHeader {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptEnterNeoUnionHeader")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_len[2, 4]", &format!("{:02X?}", &self.packet_len_raw))
            .field("char_slot[4, 5]", &format!("{:02X?}", &self.char_slot_raw))
            .field("max_char[5, 7]", &format!("{:02X?}", &self.max_char_raw))
            .field("premium_slot_start[7, 8]", &format!("{:02X?}", &self.premium_slot_start_raw))
            .field("premium_slot_end[8, 9]", &format!("{:02X?}", &self.premium_slot_end_raw))
            .field("empty_buffer[9, 29]", &format!("{:02X?}", &self.empty_buffer_raw))
            .field("char_info[29, ?]", &format!("{:02X?}", &self.char_info_raw))
        .finish()
    }
}

impl Display for PacketHcAcceptEnterNeoUnionHeader {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_len(short as i16)[2, 4]: {}", &self.packet_len));
        fields.push(format!("char_slot(char as i8)[4, 5]: {}", &self.char_slot));
        fields.push(format!("max_char(short as i16)[5, 7]: {}", &self.max_char));
        fields.push(format!("premium_slot_start(char as i8)[7, 8]: {}", &self.premium_slot_start));
        fields.push(format!("premium_slot_end(char as i8)[8, 9]: {}", &self.premium_slot_end));
        fields.push(format!("empty_buffer(char[] as char[])[9, 29]: {}", &self.empty_buffer.pretty_output()));
        fields.push(format!("char_info(struct as Struct)[29, ?]: {}", &self.char_info));
        write!(f, "PacketHcAcceptEnterNeoUnionHeader\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzPing {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPing")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketCzPing {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketCzPing\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAid2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAid2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketZcAid2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketZcAid2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketMapConnection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketMapConnection")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("aid[2, 6]", &format!("{:02X?}", &self.aid_raw))
        .finish()
    }
}

impl Display for PacketMapConnection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("aid(unsigned long as u32)[2, 6]: {}", &self.aid));
        write!(f, "PacketMapConnection\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketPincodeLoginstate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketPincodeLoginstate")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("pincode_seed[2, 6]", &format!("{:02X?}", &self.pincode_seed_raw))
            .field("aid[6, 10]", &format!("{:02X?}", &self.aid_raw))
            .field("response[10, 12]", &format!("{:02X?}", &self.response_raw))
        .finish()
    }
}

impl Display for PacketPincodeLoginstate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("pincode_seed(int as i32)[2, 6]: {}", &self.pincode_seed));
        fields.push(format!("aid(unsigned long as u32)[6, 10]: {}", &self.aid));
        fields.push(format!("response(short as i16)[10, 12]: {}", &self.response));
        write!(f, "PacketPincodeLoginstate\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChMakeChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChMakeChar3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("name[2, 26]", &format!("{:02X?}", &self.name_raw))
            .field("char_num[26, 27]", &format!("{:02X?}", &self.char_num_raw))
            .field("head_pal[27, 29]", &format!("{:02X?}", &self.head_pal_raw))
            .field("head[29, 31]", &format!("{:02X?}", &self.head_raw))
            .field("class[31, 35]", &format!("{:02X?}", &self.class_raw))
            .field("sex[35, 36]", &format!("{:02X?}", &self.sex_raw))
        .finish()
    }
}

impl Display for PacketChMakeChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("name(char[] as char[])[2, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("char_num(unsigned char as u8)[26, 27]: {}", &self.char_num));
        fields.push(format!("head_pal(short as i16)[27, 29]: {}", &self.head_pal));
        fields.push(format!("head(short as i16)[29, 31]: {}", &self.head));
        fields.push(format!("class(int as i32)[31, 35]: {}", &self.class));
        fields.push(format!("sex(unsigned char as u8)[35, 36]: {}", &self.sex));
        write!(f, "PacketChMakeChar3\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketChDeleteChar4Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar4Reserved")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketChDeleteChar4Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketChDeleteChar4Reserved\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketHcDeleteChar4Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar4Reserved")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("result[6, 10]", &format!("{:02X?}", &self.result_raw))
            .field("delete_reserved_date[10, 14]", &format!("{:02X?}", &self.delete_reserved_date_raw))
        .finish()
    }
}

impl Display for PacketHcDeleteChar4Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("result(int as i32)[6, 10]: {}", &self.result));
        fields.push(format!("delete_reserved_date(long as i32)[10, 14]: {}", &self.delete_reserved_date));
        write!(f, "PacketHcDeleteChar4Reserved\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcInventoryExpansionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcInventoryExpansionInfo")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("expansion_size[2, 4]", &format!("{:02X?}", &self.expansion_size_raw))
        .finish()
    }
}

impl Display for PacketZcInventoryExpansionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("expansion_size(short as i16)[2, 4]: {}", &self.expansion_size));
        write!(f, "PacketZcInventoryExpansionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcOverweightPercent {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOverweightPercent")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("percent[2, 6]", &format!("{:02X?}", &self.percent_raw))
        .finish()
    }
}

impl Display for PacketZcOverweightPercent {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("percent(int as i32)[2, 6]: {}", &self.percent));
        write!(f, "PacketZcOverweightPercent\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqDisconnect2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDisconnect2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("empty[2, 4]", &format!("{:02X?}", &self.empty_raw))
        .finish()
    }
}

impl Display for PacketCzReqDisconnect2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("empty(short as i16)[2, 4]: {}", &self.empty));
        write!(f, "PacketCzReqDisconnect2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcReqDisconnectAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqDisconnectAck2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("empty[2, 4]", &format!("{:02X?}", &self.empty_raw))
        .finish()
    }
}

impl Display for PacketZcReqDisconnectAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("empty(short as i16)[2, 4]: {}", &self.empty));
        write!(f, "PacketZcReqDisconnectAck2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzReqnameall2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqnameall2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
        .finish()
    }
}

impl Display for PacketCzReqnameall2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        write!(f, "PacketCzReqnameall2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcAckReqnameall2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqnameall2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("name[6, 30]", &format!("{:02X?}", &self.name_raw))
            .field("party_name[30, 54]", &format!("{:02X?}", &self.party_name_raw))
            .field("guild_name[54, 78]", &format!("{:02X?}", &self.guild_name_raw))
            .field("position_name[78, 102]", &format!("{:02X?}", &self.position_name_raw))
            .field("title_id[102, 106]", &format!("{:02X?}", &self.title_id_raw))
        .finish()
    }
}

impl Display for PacketZcAckReqnameall2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("name(char[] as char[])[6, 30]: {}", &self.name.pretty_output()));
        fields.push(format!("party_name(char[] as char[])[30, 54]: {}", &self.party_name.pretty_output()));
        fields.push(format!("guild_name(char[] as char[])[54, 78]: {}", &self.guild_name.pretty_output()));
        fields.push(format!("position_name(char[] as char[])[78, 102]: {}", &self.position_name.pretty_output()));
        fields.push(format!("title_id(int as i32)[102, 106]: {}", &self.title_id));
        write!(f, "PacketZcAckReqnameall2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzRequestTime2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestTime2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("client_time[2, 6]", &format!("{:02X?}", &self.client_time_raw))
        .finish()
    }
}

impl Display for PacketCzRequestTime2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("client_time(unsigned long as u32)[2, 6]: {}", &self.client_time));
        write!(f, "PacketCzRequestTime2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMsgColor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgColor")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("msg_id[2, 4]", &format!("{:02X?}", &self.msg_id_raw))
            .field("msg_color[4, 8]", &format!("{:02X?}", &self.msg_color_raw))
        .finish()
    }
}

impl Display for PacketZcMsgColor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("msg_id(unsigned short as u16)[2, 4]: {}", &self.msg_id));
        fields.push(format!("msg_color(unsigned int as u32)[4, 8]: {}", &self.msg_color));
        write!(f, "PacketZcMsgColor\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMapproperty2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapproperty2")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("atype[2, 4]", &format!("{:02X?}", &self.atype_raw))
            .field("flags[4, 8]", &format!("{:02X?}", &self.flags_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMapproperty2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("atype(short as i16)[2, 4]: {}", &self.atype));
        fields.push(format!("flags(unsigned int as u32)[4, 8]: {}", &self.flags));
        write!(f, "PacketZcNotifyMapproperty2\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcHatEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHatEffect")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("len[2, 4]", &format!("{:02X?}", &self.len_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("status[8, 9]", &format!("{:02X?}", &self.status_raw))
            .field("effect[9, ?]", &format!("{:02X?}", &self.effect_raw))
        .finish()
    }
}

impl Display for PacketZcHatEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("len(short as i16)[2, 4]: {}", &self.len));
        fields.push(format!("aid(unsigned long as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("status(unsigned char as u8)[8, 9]: {}", &self.status));
        fields.push(format!("effect(unsigned short[] as u16[])[9, ?]: {}", &self.effect.pretty_output()));
        write!(f, "PacketZcHatEffect\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketCzBlockingPlayCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBlockingPlayCancel")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketCzBlockingPlayCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketCzBlockingPlayCancel\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcLoadConfirm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcLoadConfirm")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
        .finish()
    }
}

impl Display for PacketZcLoadConfirm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        write!(f, "PacketZcLoadConfirm\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry6 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry6")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("aid[5, 9]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[9, 13]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[13, 15]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[15, 17]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[17, 19]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[19, 23]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[23, 25]", &format!("{:02X?}", &self.job_raw))
            .field("head[25, 27]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[27, 31]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[31, 33]", &format!("{:02X?}", &self.accessory_raw))
            .field("shield[33, 37]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[37, 39]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[39, 41]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[41, 43]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[43, 45]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[45, 47]", &format!("{:02X?}", &self.head_dir_raw))
            .field("robe[47, 49]", &format!("{:02X?}", &self.robe_raw))
            .field("guid[49, 53]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[53, 55]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[55, 57]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[57, 61]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[61, 62]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[62, 63]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[63, 66]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[66, 67]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[67, 68]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[68, 69]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[69, 71]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[71, 73]", &format!("{:02X?}", &self.font_raw))
            .field("max_hp[73, 77]", &format!("{:02X?}", &self.max_hp_raw))
            .field("hp[77, 81]", &format!("{:02X?}", &self.hp_raw))
            .field("is_boss[81, 82]", &format!("{:02X?}", &self.is_boss_raw))
            .field("body[82, 84]", &format!("{:02X?}", &self.body_raw))
            .field("name[84, 108]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry6 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("aid(unsigned long as u32)[5, 9]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[9, 13]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[13, 15]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[15, 17]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[17, 19]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[19, 23]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[23, 25]: {}", &self.job));
        fields.push(format!("head(short as i16)[25, 27]: {}", &self.head));
        fields.push(format!("weapon(unsigned long as u32)[27, 31]: {}", &self.weapon));
        fields.push(format!("accessory(unsigned short as u16)[31, 33]: {}", &self.accessory));
        fields.push(format!("shield(unsigned long as u32)[33, 37]: {}", &self.shield));
        fields.push(format!("accessory2(unsigned short as u16)[37, 39]: {}", &self.accessory2));
        fields.push(format!("accessory3(unsigned short as u16)[39, 41]: {}", &self.accessory3));
        fields.push(format!("headpalette(unsigned short as u16)[41, 43]: {}", &self.headpalette));
        fields.push(format!("bodypalette(unsigned short as u16)[43, 45]: {}", &self.bodypalette));
        fields.push(format!("head_dir(unsigned short as u16)[45, 47]: {}", &self.head_dir));
        fields.push(format!("robe(unsigned short as u16)[47, 49]: {}", &self.robe));
        fields.push(format!("guid(unsigned long as u32)[49, 53]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[53, 55]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[55, 57]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[57, 61]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[61, 62]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[62, 63]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[63, 66]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[66, 67]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[67, 68]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[68, 69]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[69, 71]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[71, 73]: {}", &self.font));
        fields.push(format!("max_hp(unsigned long as u32)[73, 77]: {}", &self.max_hp));
        fields.push(format!("hp(unsigned long as u32)[77, 81]: {}", &self.hp));
        fields.push(format!("is_boss(bool as bool)[81, 82]: {}", &self.is_boss));
        fields.push(format!("body(short as i16)[82, 84]: {}", &self.body));
        fields.push(format!("name(char[] as char[])[84, 108]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcNotifyStandentry6\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyStandentry7 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry7")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("aid[5, 9]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[9, 13]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[13, 15]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[15, 17]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[17, 19]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[19, 23]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[23, 25]", &format!("{:02X?}", &self.job_raw))
            .field("head[25, 27]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[27, 31]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[31, 33]", &format!("{:02X?}", &self.accessory_raw))
            .field("shield[33, 37]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[37, 39]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[39, 41]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[41, 43]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[43, 45]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[45, 47]", &format!("{:02X?}", &self.head_dir_raw))
            .field("robe[47, 49]", &format!("{:02X?}", &self.robe_raw))
            .field("guid[49, 53]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[53, 55]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[55, 57]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[57, 61]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[61, 62]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[62, 63]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[63, 66]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[66, 67]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[67, 68]", &format!("{:02X?}", &self.y_size_raw))
            .field("state[68, 69]", &format!("{:02X?}", &self.state_raw))
            .field("clevel[69, 71]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[71, 73]", &format!("{:02X?}", &self.font_raw))
            .field("max_hp[73, 77]", &format!("{:02X?}", &self.max_hp_raw))
            .field("hp[77, 81]", &format!("{:02X?}", &self.hp_raw))
            .field("is_boss[81, 82]", &format!("{:02X?}", &self.is_boss_raw))
            .field("body[82, 84]", &format!("{:02X?}", &self.body_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyStandentry7 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("aid(unsigned long as u32)[5, 9]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[9, 13]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[13, 15]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[15, 17]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[17, 19]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[19, 23]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[23, 25]: {}", &self.job));
        fields.push(format!("head(short as i16)[25, 27]: {}", &self.head));
        fields.push(format!("weapon(unsigned long as u32)[27, 31]: {}", &self.weapon));
        fields.push(format!("accessory(unsigned short as u16)[31, 33]: {}", &self.accessory));
        fields.push(format!("shield(unsigned long as u32)[33, 37]: {}", &self.shield));
        fields.push(format!("accessory2(unsigned short as u16)[37, 39]: {}", &self.accessory2));
        fields.push(format!("accessory3(unsigned short as u16)[39, 41]: {}", &self.accessory3));
        fields.push(format!("headpalette(unsigned short as u16)[41, 43]: {}", &self.headpalette));
        fields.push(format!("bodypalette(unsigned short as u16)[43, 45]: {}", &self.bodypalette));
        fields.push(format!("head_dir(unsigned short as u16)[45, 47]: {}", &self.head_dir));
        fields.push(format!("robe(unsigned short as u16)[47, 49]: {}", &self.robe));
        fields.push(format!("guid(unsigned long as u32)[49, 53]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[53, 55]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[55, 57]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[57, 61]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[61, 62]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[62, 63]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[63, 66]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[66, 67]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[67, 68]: {}", &self.y_size));
        fields.push(format!("state(unsigned char as u8)[68, 69]: {}", &self.state));
        fields.push(format!("clevel(short as i16)[69, 71]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[71, 73]: {}", &self.font));
        fields.push(format!("max_hp(unsigned long as u32)[73, 77]: {}", &self.max_hp));
        fields.push(format!("hp(unsigned long as u32)[77, 81]: {}", &self.hp));
        fields.push(format!("is_boss(bool as bool)[81, 82]: {}", &self.is_boss));
        fields.push(format!("body(short as i16)[82, 84]: {}", &self.body));
        write!(f, "PacketZcNotifyStandentry7\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyMoveentry8 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry8")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("packet_length[2, 4]", &format!("{:02X?}", &self.packet_length_raw))
            .field("objecttype[4, 5]", &format!("{:02X?}", &self.objecttype_raw))
            .field("aid[5, 9]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[9, 13]", &format!("{:02X?}", &self.gid_raw))
            .field("speed[13, 15]", &format!("{:02X?}", &self.speed_raw))
            .field("body_state[15, 17]", &format!("{:02X?}", &self.body_state_raw))
            .field("health_state[17, 19]", &format!("{:02X?}", &self.health_state_raw))
            .field("effect_state[19, 23]", &format!("{:02X?}", &self.effect_state_raw))
            .field("job[23, 25]", &format!("{:02X?}", &self.job_raw))
            .field("head[25, 27]", &format!("{:02X?}", &self.head_raw))
            .field("weapon[27, 31]", &format!("{:02X?}", &self.weapon_raw))
            .field("accessory[31, 33]", &format!("{:02X?}", &self.accessory_raw))
            .field("move_start_time[33, 37]", &format!("{:02X?}", &self.move_start_time_raw))
            .field("shield[37, 41]", &format!("{:02X?}", &self.shield_raw))
            .field("accessory2[41, 43]", &format!("{:02X?}", &self.accessory2_raw))
            .field("accessory3[43, 45]", &format!("{:02X?}", &self.accessory3_raw))
            .field("headpalette[45, 47]", &format!("{:02X?}", &self.headpalette_raw))
            .field("bodypalette[47, 49]", &format!("{:02X?}", &self.bodypalette_raw))
            .field("head_dir[49, 51]", &format!("{:02X?}", &self.head_dir_raw))
            .field("robe[51, 53]", &format!("{:02X?}", &self.robe_raw))
            .field("guid[53, 57]", &format!("{:02X?}", &self.guid_raw))
            .field("gemblem_ver[57, 59]", &format!("{:02X?}", &self.gemblem_ver_raw))
            .field("honor[59, 61]", &format!("{:02X?}", &self.honor_raw))
            .field("virtue[61, 65]", &format!("{:02X?}", &self.virtue_raw))
            .field("is_pkmode_on[65, 66]", &format!("{:02X?}", &self.is_pkmode_on_raw))
            .field("sex[66, 67]", &format!("{:02X?}", &self.sex_raw))
            .field("pos_dir[67, 70]", &format!("{:02X?}", &self.pos_dir_raw))
            .field("x_size[70, 71]", &format!("{:02X?}", &self.x_size_raw))
            .field("y_size[71, 72]", &format!("{:02X?}", &self.y_size_raw))
            .field("clevel[72, 74]", &format!("{:02X?}", &self.clevel_raw))
            .field("font[74, 76]", &format!("{:02X?}", &self.font_raw))
            .field("max_hp[76, 80]", &format!("{:02X?}", &self.max_hp_raw))
            .field("hp[80, 84]", &format!("{:02X?}", &self.hp_raw))
            .field("is_boss[84, 85]", &format!("{:02X?}", &self.is_boss_raw))
            .field("body[85, 87]", &format!("{:02X?}", &self.body_raw))
            .field("name[87, 111]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyMoveentry8 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("packet_length(short as i16)[2, 4]: {}", &self.packet_length));
        fields.push(format!("objecttype(unsigned char as u8)[4, 5]: {}", &self.objecttype));
        fields.push(format!("aid(unsigned long as u32)[5, 9]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[9, 13]: {}", &self.gid));
        fields.push(format!("speed(short as i16)[13, 15]: {}", &self.speed));
        fields.push(format!("body_state(short as i16)[15, 17]: {}", &self.body_state));
        fields.push(format!("health_state(short as i16)[17, 19]: {}", &self.health_state));
        fields.push(format!("effect_state(int as i32)[19, 23]: {}", &self.effect_state));
        fields.push(format!("job(short as i16)[23, 25]: {}", &self.job));
        fields.push(format!("head(short as i16)[25, 27]: {}", &self.head));
        fields.push(format!("weapon(unsigned long as u32)[27, 31]: {}", &self.weapon));
        fields.push(format!("accessory(unsigned short as u16)[31, 33]: {}", &self.accessory));
        fields.push(format!("move_start_time(unsigned int as u32)[33, 37]: {}", &self.move_start_time));
        fields.push(format!("shield(unsigned long as u32)[37, 41]: {}", &self.shield));
        fields.push(format!("accessory2(unsigned short as u16)[41, 43]: {}", &self.accessory2));
        fields.push(format!("accessory3(unsigned short as u16)[43, 45]: {}", &self.accessory3));
        fields.push(format!("headpalette(unsigned short as u16)[45, 47]: {}", &self.headpalette));
        fields.push(format!("bodypalette(unsigned short as u16)[47, 49]: {}", &self.bodypalette));
        fields.push(format!("head_dir(unsigned short as u16)[49, 51]: {}", &self.head_dir));
        fields.push(format!("robe(unsigned short as u16)[51, 53]: {}", &self.robe));
        fields.push(format!("guid(unsigned long as u32)[53, 57]: {}", &self.guid));
        fields.push(format!("gemblem_ver(short as i16)[57, 59]: {}", &self.gemblem_ver));
        fields.push(format!("honor(short as i16)[59, 61]: {}", &self.honor));
        fields.push(format!("virtue(int as i32)[61, 65]: {}", &self.virtue));
        fields.push(format!("is_pkmode_on(bool as bool)[65, 66]: {}", &self.is_pkmode_on));
        fields.push(format!("sex(unsigned char as u8)[66, 67]: {}", &self.sex));
        fields.push(format!("pos_dir(unsigned char[] as u8[])[67, 70]: {}", &self.pos_dir.pretty_output()));
        fields.push(format!("x_size(unsigned char as u8)[70, 71]: {}", &self.x_size));
        fields.push(format!("y_size(unsigned char as u8)[71, 72]: {}", &self.y_size));
        fields.push(format!("clevel(short as i16)[72, 74]: {}", &self.clevel));
        fields.push(format!("font(short as i16)[74, 76]: {}", &self.font));
        fields.push(format!("max_hp(unsigned long as u32)[76, 80]: {}", &self.max_hp));
        fields.push(format!("hp(unsigned long as u32)[80, 84]: {}", &self.hp));
        fields.push(format!("is_boss(bool as bool)[84, 85]: {}", &self.is_boss));
        fields.push(format!("body(short as i16)[85, 87]: {}", &self.body));
        fields.push(format!("name(char[] as char[])[87, 111]: {}", &self.name.pretty_output()));
        write!(f, "PacketZcNotifyMoveentry8\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcNotifyAct3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyAct3")
            .field("packet_id[0, 2]", &format!("{:02X?}", &self.packet_id_raw))
            .field("gid[2, 6]", &format!("{:02X?}", &self.gid_raw))
            .field("target_gid[6, 10]", &format!("{:02X?}", &self.target_gid_raw))
            .field("start_time[10, 14]", &format!("{:02X?}", &self.start_time_raw))
            .field("attack_mt[14, 18]", &format!("{:02X?}", &self.attack_mt_raw))
            .field("attacked_mt[18, 22]", &format!("{:02X?}", &self.attacked_mt_raw))
            .field("damage[22, 26]", &format!("{:02X?}", &self.damage_raw))
            .field("is_sp_damaged[26, 27]", &format!("{:02X?}", &self.is_sp_damaged_raw))
            .field("count[27, 29]", &format!("{:02X?}", &self.count_raw))
            .field("action[29, 30]", &format!("{:02X?}", &self.action_raw))
            .field("left_damage[30, 34]", &format!("{:02X?}", &self.left_damage_raw))
        .finish()
    }
}

impl Display for PacketZcNotifyAct3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("packet_id(short as i16)[0, 2]: 0X{:02X?}{:02X?}", &self.packet_id_raw[0], &self.packet_id_raw[1]));
        fields.push(format!("gid(unsigned long as u32)[2, 6]: {}", &self.gid));
        fields.push(format!("target_gid(unsigned long as u32)[6, 10]: {}", &self.target_gid));
        fields.push(format!("start_time(unsigned long as u32)[10, 14]: {}", &self.start_time));
        fields.push(format!("attack_mt(int as i32)[14, 18]: {}", &self.attack_mt));
        fields.push(format!("attacked_mt(int as i32)[18, 22]: {}", &self.attacked_mt));
        fields.push(format!("damage(int as i32)[22, 26]: {}", &self.damage));
        fields.push(format!("is_sp_damaged(bool as bool)[26, 27]: {}", &self.is_sp_damaged));
        fields.push(format!("count(short as i16)[27, 29]: {}", &self.count));
        fields.push(format!("action(unsigned char as u8)[29, 30]: {}", &self.action));
        fields.push(format!("left_damage(int as i32)[30, 34]: {}", &self.left_damage));
        write!(f, "PacketZcNotifyAct3\n {}", fields.join(",\n "))
    }
}

impl Debug for ServerAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ServerAddr")
            .field("ip[0, 4]", &format!("{:02X?}", &self.ip_raw))
            .field("port[4, 6]", &format!("{:02X?}", &self.port_raw))
            .field("name[6, 26]", &format!("{:02X?}", &self.name_raw))
            .field("user_count[26, 28]", &format!("{:02X?}", &self.user_count_raw))
            .field("state[28, 30]", &format!("{:02X?}", &self.state_raw))
            .field("property[30, 32]", &format!("{:02X?}", &self.property_raw))
        .finish()
    }
}

impl Display for ServerAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("ip(unsigned long as u32)[0, 4]: {}", &self.ip));
        fields.push(format!("port(short as i16)[4, 6]: {}", &self.port));
        fields.push(format!("name(char[] as char[])[6, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("user_count(unsigned short as u16)[26, 28]: {}", &self.user_count));
        fields.push(format!("state(unsigned short as u16)[28, 30]: {}", &self.state));
        fields.push(format!("property(unsigned short as u16)[30, 32]: {}", &self.property));
        write!(f, "ServerAddr\n {}", fields.join(",\n "))
    }
}

impl Debug for ServerAddr2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ServerAddr2")
            .field("ip[0, 4]", &format!("{:02X?}", &self.ip_raw))
            .field("port[4, 6]", &format!("{:02X?}", &self.port_raw))
            .field("name[6, 26]", &format!("{:02X?}", &self.name_raw))
            .field("user_count[26, 28]", &format!("{:02X?}", &self.user_count_raw))
            .field("state[28, 30]", &format!("{:02X?}", &self.state_raw))
            .field("property[30, 32]", &format!("{:02X?}", &self.property_raw))
            .field("unknown2[32, 160]", &format!("{:02X?}", &self.unknown2_raw))
        .finish()
    }
}

impl Display for ServerAddr2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("ip(unsigned long as u32)[0, 4]: {}", &self.ip));
        fields.push(format!("port(short as i16)[4, 6]: {}", &self.port));
        fields.push(format!("name(char[] as char[])[6, 26]: {}", &self.name.pretty_output()));
        fields.push(format!("user_count(unsigned short as u16)[26, 28]: {}", &self.user_count));
        fields.push(format!("state(unsigned short as u16)[28, 30]: {}", &self.state));
        fields.push(format!("property(unsigned short as u16)[30, 32]: {}", &self.property));
        fields.push(format!("unknown2(char[] as char[])[32, 160]: {}", &self.unknown2.pretty_output()));
        write!(f, "ServerAddr2\n {}", fields.join(",\n "))
    }
}

impl Debug for CharacterInfoNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CharacterInfoNeoUnion")
            .field("gid[0, 4]", &format!("{:02X?}", &self.gid_raw))
            .field("exp_64[4, 12]", &format!("{:02X?}", &self.exp_64_raw))
            .field("exp[12, 16]", &format!("{:02X?}", &self.exp_raw))
            .field("money[16, 20]", &format!("{:02X?}", &self.money_raw))
            .field("jobexp_64[20, 28]", &format!("{:02X?}", &self.jobexp_64_raw))
            .field("jobexp[28, 32]", &format!("{:02X?}", &self.jobexp_raw))
            .field("joblevel[32, 36]", &format!("{:02X?}", &self.joblevel_raw))
            .field("bodystate[36, 40]", &format!("{:02X?}", &self.bodystate_raw))
            .field("healthstate[40, 44]", &format!("{:02X?}", &self.healthstate_raw))
            .field("effectstate[44, 48]", &format!("{:02X?}", &self.effectstate_raw))
            .field("virtue[48, 52]", &format!("{:02X?}", &self.virtue_raw))
            .field("honor[52, 56]", &format!("{:02X?}", &self.honor_raw))
            .field("status_point[56, 58]", &format!("{:02X?}", &self.status_point_raw))
            .field("hp[58, 62]", &format!("{:02X?}", &self.hp_raw))
            .field("hp_16[62, 64]", &format!("{:02X?}", &self.hp_16_raw))
            .field("maxhp[64, 68]", &format!("{:02X?}", &self.maxhp_raw))
            .field("maxhp_16[68, 70]", &format!("{:02X?}", &self.maxhp_16_raw))
            .field("sp[70, 72]", &format!("{:02X?}", &self.sp_raw))
            .field("maxsp[72, 74]", &format!("{:02X?}", &self.maxsp_raw))
            .field("speed[74, 76]", &format!("{:02X?}", &self.speed_raw))
            .field("class[76, 78]", &format!("{:02X?}", &self.class_raw))
            .field("head[78, 80]", &format!("{:02X?}", &self.head_raw))
            .field("body[80, 82]", &format!("{:02X?}", &self.body_raw))
            .field("weapon[82, 84]", &format!("{:02X?}", &self.weapon_raw))
            .field("level[84, 86]", &format!("{:02X?}", &self.level_raw))
            .field("skill_point[86, 88]", &format!("{:02X?}", &self.skill_point_raw))
            .field("head_bottom[88, 90]", &format!("{:02X?}", &self.head_bottom_raw))
            .field("shield[90, 92]", &format!("{:02X?}", &self.shield_raw))
            .field("head_top[92, 94]", &format!("{:02X?}", &self.head_top_raw))
            .field("head_mid[94, 96]", &format!("{:02X?}", &self.head_mid_raw))
            .field("hair_color[96, 98]", &format!("{:02X?}", &self.hair_color_raw))
            .field("body_color[98, 100]", &format!("{:02X?}", &self.body_color_raw))
            .field("name[100, 124]", &format!("{:02X?}", &self.name_raw))
            .field("str[124, 125]", &format!("{:02X?}", &self.str_raw))
            .field("agi[125, 126]", &format!("{:02X?}", &self.agi_raw))
            .field("vit[126, 127]", &format!("{:02X?}", &self.vit_raw))
            .field("int[127, 128]", &format!("{:02X?}", &self.int_raw))
            .field("dex[128, 129]", &format!("{:02X?}", &self.dex_raw))
            .field("luk[129, 130]", &format!("{:02X?}", &self.luk_raw))
            .field("char_num[130, 131]", &format!("{:02X?}", &self.char_num_raw))
            .field("haircolor[131, 132]", &format!("{:02X?}", &self.haircolor_raw))
            .field("b_is_changed_char_name[132, 134]", &format!("{:02X?}", &self.b_is_changed_char_name_raw))
            .field("last_map[134, 150]", &format!("{:02X?}", &self.last_map_raw))
            .field("delete_date[150, 154]", &format!("{:02X?}", &self.delete_date_raw))
            .field("robe[154, 158]", &format!("{:02X?}", &self.robe_raw))
            .field("slot_addon[158, 162]", &format!("{:02X?}", &self.slot_addon_raw))
            .field("rename_addon[162, 166]", &format!("{:02X?}", &self.rename_addon_raw))
            .field("sex[166, 167]", &format!("{:02X?}", &self.sex_raw))
        .finish()
    }
}

impl Display for CharacterInfoNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("gid(unsigned long as u32)[0, 4]: {}", &self.gid));
        fields.push(format!("exp_64(unsigned int64 as u64)[4, 12]: {}", &self.exp_64));
        fields.push(format!("exp(unsigned int as u32)[12, 16]: {}", &self.exp));
        fields.push(format!("money(unsigned int as u32)[16, 20]: {}", &self.money));
        fields.push(format!("jobexp_64(unsigned int64 as u64)[20, 28]: {}", &self.jobexp_64));
        fields.push(format!("jobexp(unsigned int as u32)[28, 32]: {}", &self.jobexp));
        fields.push(format!("joblevel(unsigned int as u32)[32, 36]: {}", &self.joblevel));
        fields.push(format!("bodystate(unsigned int as u32)[36, 40]: {}", &self.bodystate));
        fields.push(format!("healthstate(unsigned int as u32)[40, 44]: {}", &self.healthstate));
        fields.push(format!("effectstate(int as i32)[44, 48]: {}", &self.effectstate));
        fields.push(format!("virtue(int as i32)[48, 52]: {}", &self.virtue));
        fields.push(format!("honor(int as i32)[52, 56]: {}", &self.honor));
        fields.push(format!("status_point(unsigned short as u16)[56, 58]: {}", &self.status_point));
        fields.push(format!("hp(unsigned int as u32)[58, 62]: {}", &self.hp));
        fields.push(format!("hp_16(unsigned short as u16)[62, 64]: {}", &self.hp_16));
        fields.push(format!("maxhp(unsigned int as u32)[64, 68]: {}", &self.maxhp));
        fields.push(format!("maxhp_16(unsigned short as u16)[68, 70]: {}", &self.maxhp_16));
        fields.push(format!("sp(unsigned short as u16)[70, 72]: {}", &self.sp));
        fields.push(format!("maxsp(unsigned short as u16)[72, 74]: {}", &self.maxsp));
        fields.push(format!("speed(unsigned short as u16)[74, 76]: {}", &self.speed));
        fields.push(format!("class(unsigned short as u16)[76, 78]: {}", &self.class));
        fields.push(format!("head(unsigned short as u16)[78, 80]: {}", &self.head));
        fields.push(format!("body(unsigned short as u16)[80, 82]: {}", &self.body));
        fields.push(format!("weapon(unsigned short as u16)[82, 84]: {}", &self.weapon));
        fields.push(format!("level(unsigned short as u16)[84, 86]: {}", &self.level));
        fields.push(format!("skill_point(unsigned short as u16)[86, 88]: {}", &self.skill_point));
        fields.push(format!("head_bottom(unsigned short as u16)[88, 90]: {}", &self.head_bottom));
        fields.push(format!("shield(unsigned short as u16)[90, 92]: {}", &self.shield));
        fields.push(format!("head_top(unsigned short as u16)[92, 94]: {}", &self.head_top));
        fields.push(format!("head_mid(unsigned short as u16)[94, 96]: {}", &self.head_mid));
        fields.push(format!("hair_color(unsigned short as u16)[96, 98]: {}", &self.hair_color));
        fields.push(format!("body_color(unsigned short as u16)[98, 100]: {}", &self.body_color));
        fields.push(format!("name(char[] as char[])[100, 124]: {}", &self.name.pretty_output()));
        fields.push(format!("str(unsigned char as u8)[124, 125]: {}", &self.str));
        fields.push(format!("agi(unsigned char as u8)[125, 126]: {}", &self.agi));
        fields.push(format!("vit(unsigned char as u8)[126, 127]: {}", &self.vit));
        fields.push(format!("int(unsigned char as u8)[127, 128]: {}", &self.int));
        fields.push(format!("dex(unsigned char as u8)[128, 129]: {}", &self.dex));
        fields.push(format!("luk(unsigned char as u8)[129, 130]: {}", &self.luk));
        fields.push(format!("char_num(char as i8)[130, 131]: {}", &self.char_num));
        fields.push(format!("haircolor(unsigned char as u8)[131, 132]: {}", &self.haircolor));
        fields.push(format!("b_is_changed_char_name(unsigned short as u16)[132, 134]: {}", &self.b_is_changed_char_name));
        fields.push(format!("last_map(char[] as char[])[134, 150]: {}", &self.last_map.pretty_output()));
        fields.push(format!("delete_date(unsigned int as u32)[150, 154]: {}", &self.delete_date));
        fields.push(format!("robe(unsigned int as u32)[154, 158]: {}", &self.robe));
        fields.push(format!("slot_addon(unsigned int as u32)[158, 162]: {}", &self.slot_addon));
        fields.push(format!("rename_addon(unsigned int as u32)[162, 166]: {}", &self.rename_addon));
        fields.push(format!("sex(unsigned char as u8)[166, 167]: {}", &self.sex));
        write!(f, "CharacterInfoNeoUnion\n {}", fields.join(",\n "))
    }
}

impl Debug for ZserverAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ZserverAddr")
            .field("ip[0, 4]", &format!("{:02X?}", &self.ip_raw))
            .field("port[4, 6]", &format!("{:02X?}", &self.port_raw))
        .finish()
    }
}

impl Display for ZserverAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("ip(unsigned long as u32)[0, 4]: {}", &self.ip));
        fields.push(format!("port(short as i16)[4, 6]: {}", &self.port));
        write!(f, "ZserverAddr\n {}", fields.join(",\n "))
    }
}

impl Debug for EQUIPSLOTINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EQUIPSLOTINFO")
            .field("card1[0, 2]", &format!("{:02X?}", &self.card1_raw))
            .field("card2[2, 4]", &format!("{:02X?}", &self.card2_raw))
            .field("card3[4, 6]", &format!("{:02X?}", &self.card3_raw))
            .field("card4[6, 8]", &format!("{:02X?}", &self.card4_raw))
        .finish()
    }
}

impl Display for EQUIPSLOTINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("card1(unsigned short as u16)[0, 2]: {}", &self.card1));
        fields.push(format!("card2(unsigned short as u16)[2, 4]: {}", &self.card2));
        fields.push(format!("card3(unsigned short as u16)[4, 6]: {}", &self.card3));
        fields.push(format!("card4(unsigned short as u16)[6, 8]: {}", &self.card4));
        write!(f, "EQUIPSLOTINFO\n {}", fields.join(",\n "))
    }
}

impl Debug for NormalitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("count[6, 8]", &format!("{:02X?}", &self.count_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
        .finish()
    }
}

impl Display for NormalitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("count(short as i16)[6, 8]: {}", &self.count));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        write!(f, "NormalitemExtrainfo\n {}", fields.join(",\n "))
    }
}

impl Debug for EquipmentitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("location[6, 8]", &format!("{:02X?}", &self.location_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
            .field("is_damaged[10, 11]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[11, 12]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[12, 20]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for EquipmentitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("location(unsigned short as u16)[6, 8]: {}", &self.location));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        fields.push(format!("is_damaged(bool as bool)[10, 11]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[11, 12]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[12, 20]: {}", &self.slot));
        write!(f, "EquipmentitemExtrainfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseItem")
            .field("price[0, 4]", &format!("{:02X?}", &self.price_raw))
            .field("discountprice[4, 8]", &format!("{:02X?}", &self.discountprice_raw))
            .field("atype[8, 9]", &format!("{:02X?}", &self.atype_raw))
            .field("itid[9, 11]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for PurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("price(int as i32)[0, 4]: {}", &self.price));
        fields.push(format!("discountprice(int as i32)[4, 8]: {}", &self.discountprice));
        fields.push(format!("atype(unsigned char as u8)[8, 9]: {}", &self.atype));
        fields.push(format!("itid(unsigned short as u16)[9, 11]: {}", &self.itid));
        write!(f, "PurchaseItem\n {}", fields.join(",\n "))
    }
}

impl Debug for SellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SellItem")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("price[2, 6]", &format!("{:02X?}", &self.price_raw))
            .field("overchargeprice[6, 10]", &format!("{:02X?}", &self.overchargeprice_raw))
        .finish()
    }
}

impl Display for SellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("price(int as i32)[2, 6]: {}", &self.price));
        fields.push(format!("overchargeprice(int as i32)[6, 10]: {}", &self.overchargeprice));
        write!(f, "SellItem\n {}", fields.join(",\n "))
    }
}

impl Debug for CzPurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzPurchaseItem")
            .field("count[0, 2]", &format!("{:02X?}", &self.count_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for CzPurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("count(short as i16)[0, 2]: {}", &self.count));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        write!(f, "CzPurchaseItem\n {}", fields.join(",\n "))
    }
}

impl Debug for CzSellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzSellItem")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("count[2, 4]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for CzSellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("count(short as i16)[2, 4]: {}", &self.count));
        write!(f, "CzSellItem\n {}", fields.join(",\n "))
    }
}

impl Debug for WhisperItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("WhisperItem")
            .field("name[0, 24]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for WhisperItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("name(char[] as char[])[0, 24]: {}", &self.name.pretty_output()));
        write!(f, "WhisperItem\n {}", fields.join(",\n "))
    }
}

impl Debug for RoomMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RoomMember")
            .field("role[0, 4]", &format!("{:02X?}", &self.role_raw))
            .field("name[4, 28]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for RoomMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("role(unsigned long as u32)[0, 4]: {}", &self.role));
        fields.push(format!("name(char[] as char[])[4, 28]: {}", &self.name.pretty_output()));
        write!(f, "RoomMember\n {}", fields.join(",\n "))
    }
}

impl Debug for GroupmemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GroupmemberInfo")
            .field("aid[0, 4]", &format!("{:02X?}", &self.aid_raw))
            .field("character_name[4, 28]", &format!("{:02X?}", &self.character_name_raw))
            .field("map_name[28, 44]", &format!("{:02X?}", &self.map_name_raw))
            .field("role[44, 45]", &format!("{:02X?}", &self.role_raw))
            .field("state[45, 46]", &format!("{:02X?}", &self.state_raw))
        .finish()
    }
}

impl Display for GroupmemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("aid(unsigned long as u32)[0, 4]: {}", &self.aid));
        fields.push(format!("character_name(char[] as char[])[4, 28]: {}", &self.character_name.pretty_output()));
        fields.push(format!("map_name(char[] as char[])[28, 44]: {}", &self.map_name.pretty_output()));
        fields.push(format!("role(unsigned char as u8)[44, 45]: {}", &self.role));
        fields.push(format!("state(unsigned char as u8)[45, 46]: {}", &self.state));
        write!(f, "GroupmemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for SKILLINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SKILLINFO")
            .field("skid[0, 2]", &format!("{:02X?}", &self.skid_raw))
            .field("atype[2, 6]", &format!("{:02X?}", &self.atype_raw))
            .field("level[6, 8]", &format!("{:02X?}", &self.level_raw))
            .field("spcost[8, 10]", &format!("{:02X?}", &self.spcost_raw))
            .field("attack_range[10, 12]", &format!("{:02X?}", &self.attack_range_raw))
            .field("skill_name[12, 36]", &format!("{:02X?}", &self.skill_name_raw))
            .field("upgradable[36, 37]", &format!("{:02X?}", &self.upgradable_raw))
        .finish()
    }
}

impl Display for SKILLINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("skid(short as i16)[0, 2]: {}", &self.skid));
        fields.push(format!("atype(int as i32)[2, 6]: {}", &self.atype));
        fields.push(format!("level(short as i16)[6, 8]: {}", &self.level));
        fields.push(format!("spcost(short as i16)[8, 10]: {}", &self.spcost));
        fields.push(format!("attack_range(short as i16)[10, 12]: {}", &self.attack_range));
        fields.push(format!("skill_name(char[] as char[])[12, 36]: {}", &self.skill_name.pretty_output()));
        fields.push(format!("upgradable(char as i8)[36, 37]: {}", &self.upgradable));
        write!(f, "SKILLINFO\n {}", fields.join(",\n "))
    }
}

impl Debug for StoreItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("StoreItem")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("count[2, 4]", &format!("{:02X?}", &self.count_raw))
            .field("price[4, 8]", &format!("{:02X?}", &self.price_raw))
        .finish()
    }
}

impl Display for StoreItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("count(short as i16)[2, 4]: {}", &self.count));
        fields.push(format!("price(int as i32)[4, 8]: {}", &self.price));
        write!(f, "StoreItem\n {}", fields.join(",\n "))
    }
}

impl Debug for PurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseItemFrommc")
            .field("price[0, 4]", &format!("{:02X?}", &self.price_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("index[6, 8]", &format!("{:02X?}", &self.index_raw))
            .field("atype[8, 9]", &format!("{:02X?}", &self.atype_raw))
            .field("itid[9, 11]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[11, 12]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[12, 13]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[13, 14]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[14, 22]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("price(int as i32)[0, 4]: {}", &self.price));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("index(short as i16)[6, 8]: {}", &self.index));
        fields.push(format!("atype(unsigned char as u8)[8, 9]: {}", &self.atype));
        fields.push(format!("itid(unsigned short as u16)[9, 11]: {}", &self.itid));
        fields.push(format!("is_identified(unsigned char as u8)[11, 12]: {}", &self.is_identified));
        fields.push(format!("is_damaged(unsigned char as u8)[12, 13]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[13, 14]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[14, 22]: {}", &self.slot));
        write!(f, "PurchaseItemFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for CzPurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzPurchaseItemFrommc")
            .field("count[0, 2]", &format!("{:02X?}", &self.count_raw))
            .field("index[2, 4]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for CzPurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("count(short as i16)[0, 2]: {}", &self.count));
        fields.push(format!("index(short as i16)[2, 4]: {}", &self.index));
        write!(f, "CzPurchaseItemFrommc\n {}", fields.join(",\n "))
    }
}

impl Debug for PurchaseMyitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseMyitem")
            .field("price[0, 4]", &format!("{:02X?}", &self.price_raw))
            .field("index[4, 6]", &format!("{:02X?}", &self.index_raw))
            .field("count[6, 8]", &format!("{:02X?}", &self.count_raw))
            .field("atype[8, 9]", &format!("{:02X?}", &self.atype_raw))
            .field("itid[9, 11]", &format!("{:02X?}", &self.itid_raw))
            .field("is_identified[11, 12]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[12, 13]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[13, 14]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[14, 22]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for PurchaseMyitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("price(int as i32)[0, 4]: {}", &self.price));
        fields.push(format!("index(short as i16)[4, 6]: {}", &self.index));
        fields.push(format!("count(short as i16)[6, 8]: {}", &self.count));
        fields.push(format!("atype(unsigned char as u8)[8, 9]: {}", &self.atype));
        fields.push(format!("itid(unsigned short as u16)[9, 11]: {}", &self.itid));
        fields.push(format!("is_identified(unsigned char as u8)[11, 12]: {}", &self.is_identified));
        fields.push(format!("is_damaged(unsigned char as u8)[12, 13]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[13, 14]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[14, 22]: {}", &self.slot));
        write!(f, "PurchaseMyitem\n {}", fields.join(",\n "))
    }
}

impl Debug for RelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RelatedGuild")
            .field("gdid[0, 4]", &format!("{:02X?}", &self.gdid_raw))
            .field("relation[4, 8]", &format!("{:02X?}", &self.relation_raw))
            .field("guild_name[8, 32]", &format!("{:02X?}", &self.guild_name_raw))
        .finish()
    }
}

impl Display for RelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("gdid(int as i32)[0, 4]: {}", &self.gdid));
        fields.push(format!("relation(int as i32)[4, 8]: {}", &self.relation));
        fields.push(format!("guild_name(char[] as char[])[8, 32]: {}", &self.guild_name.pretty_output()));
        write!(f, "RelatedGuild\n {}", fields.join(",\n "))
    }
}

impl Debug for GuildMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMembermgrInfo")
            .field("aid[0, 4]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("head_type[8, 10]", &format!("{:02X?}", &self.head_type_raw))
            .field("head_palette[10, 12]", &format!("{:02X?}", &self.head_palette_raw))
            .field("sex[12, 14]", &format!("{:02X?}", &self.sex_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("level[16, 18]", &format!("{:02X?}", &self.level_raw))
            .field("member_exp[18, 22]", &format!("{:02X?}", &self.member_exp_raw))
            .field("current_state[22, 26]", &format!("{:02X?}", &self.current_state_raw))
            .field("gposition_id[26, 30]", &format!("{:02X?}", &self.gposition_id_raw))
            .field("memo[30, 80]", &format!("{:02X?}", &self.memo_raw))
            .field("char_name[80, 104]", &format!("{:02X?}", &self.char_name_raw))
        .finish()
    }
}

impl Display for GuildMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("aid(unsigned long as u32)[0, 4]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[4, 8]: {}", &self.gid));
        fields.push(format!("head_type(short as i16)[8, 10]: {}", &self.head_type));
        fields.push(format!("head_palette(short as i16)[10, 12]: {}", &self.head_palette));
        fields.push(format!("sex(short as i16)[12, 14]: {}", &self.sex));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("level(short as i16)[16, 18]: {}", &self.level));
        fields.push(format!("member_exp(int as i32)[18, 22]: {}", &self.member_exp));
        fields.push(format!("current_state(int as i32)[22, 26]: {}", &self.current_state));
        fields.push(format!("gposition_id(int as i32)[26, 30]: {}", &self.gposition_id));
        fields.push(format!("memo(char[] as char[])[30, 80]: {}", &self.memo.pretty_output()));
        fields.push(format!("char_name(char[] as char[])[80, 104]: {}", &self.char_name.pretty_output()));
        write!(f, "GuildMembermgrInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for MemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MemberPositionInfo")
            .field("aid[0, 4]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("position_id[8, 12]", &format!("{:02X?}", &self.position_id_raw))
        .finish()
    }
}

impl Display for MemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("aid(int as i32)[0, 4]: {}", &self.aid));
        fields.push(format!("gid(int as i32)[4, 8]: {}", &self.gid));
        fields.push(format!("position_id(int as i32)[8, 12]: {}", &self.position_id));
        write!(f, "MemberPositionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for GuildMemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMemberPositionInfo")
            .field("position_id[0, 4]", &format!("{:02X?}", &self.position_id_raw))
            .field("right[4, 8]", &format!("{:02X?}", &self.right_raw))
            .field("ranking[8, 12]", &format!("{:02X?}", &self.ranking_raw))
            .field("pay_rate[12, 16]", &format!("{:02X?}", &self.pay_rate_raw))
        .finish()
    }
}

impl Display for GuildMemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("position_id(int as i32)[0, 4]: {}", &self.position_id));
        fields.push(format!("right(int as i32)[4, 8]: {}", &self.right));
        fields.push(format!("ranking(int as i32)[8, 12]: {}", &self.ranking));
        fields.push(format!("pay_rate(int as i32)[12, 16]: {}", &self.pay_rate));
        write!(f, "GuildMemberPositionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for GuildRegPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildRegPositionInfo")
            .field("position_id[0, 4]", &format!("{:02X?}", &self.position_id_raw))
            .field("right[4, 8]", &format!("{:02X?}", &self.right_raw))
            .field("ranking[8, 12]", &format!("{:02X?}", &self.ranking_raw))
            .field("pay_rate[12, 16]", &format!("{:02X?}", &self.pay_rate_raw))
            .field("pos_name[16, 40]", &format!("{:02X?}", &self.pos_name_raw))
        .finish()
    }
}

impl Display for GuildRegPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("position_id(int as i32)[0, 4]: {}", &self.position_id));
        fields.push(format!("right(int as i32)[4, 8]: {}", &self.right));
        fields.push(format!("ranking(int as i32)[8, 12]: {}", &self.ranking));
        fields.push(format!("pay_rate(int as i32)[12, 16]: {}", &self.pay_rate));
        fields.push(format!("pos_name(char[] as char[])[16, 40]: {}", &self.pos_name.pretty_output()));
        write!(f, "GuildRegPositionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for GuildBanInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildBanInfo")
            .field("charname[0, 24]", &format!("{:02X?}", &self.charname_raw))
            .field("account[24, 48]", &format!("{:02X?}", &self.account_raw))
            .field("reason[48, 88]", &format!("{:02X?}", &self.reason_raw))
        .finish()
    }
}

impl Display for GuildBanInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("charname(char[] as char[])[0, 24]: {}", &self.charname.pretty_output()));
        fields.push(format!("account(char[] as char[])[24, 48]: {}", &self.account.pretty_output()));
        fields.push(format!("reason(char[] as char[])[48, 88]: {}", &self.reason.pretty_output()));
        write!(f, "GuildBanInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for OtherGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("OtherGuildInfo")
            .field("guildname[0, 24]", &format!("{:02X?}", &self.guildname_raw))
            .field("guild_level[24, 28]", &format!("{:02X?}", &self.guild_level_raw))
            .field("guild_member_size[28, 32]", &format!("{:02X?}", &self.guild_member_size_raw))
            .field("guild_ranking[32, 36]", &format!("{:02X?}", &self.guild_ranking_raw))
        .finish()
    }
}

impl Display for OtherGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("guildname(char[] as char[])[0, 24]: {}", &self.guildname.pretty_output()));
        fields.push(format!("guild_level(int as i32)[24, 28]: {}", &self.guild_level));
        fields.push(format!("guild_member_size(int as i32)[28, 32]: {}", &self.guild_member_size));
        fields.push(format!("guild_ranking(int as i32)[32, 36]: {}", &self.guild_ranking));
        write!(f, "OtherGuildInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for MemberPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MemberPositionIdNameInfo")
            .field("position_id[0, 4]", &format!("{:02X?}", &self.position_id_raw))
            .field("pos_name[4, 28]", &format!("{:02X?}", &self.pos_name_raw))
        .finish()
    }
}

impl Display for MemberPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("position_id(int as i32)[0, 4]: {}", &self.position_id));
        fields.push(format!("pos_name(char[] as char[])[4, 28]: {}", &self.pos_name.pretty_output()));
        write!(f, "MemberPositionIdNameInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for GuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMemberInfo")
            .field("aid[0, 4]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("head[8, 10]", &format!("{:02X?}", &self.head_raw))
            .field("head_palette[10, 12]", &format!("{:02X?}", &self.head_palette_raw))
            .field("sex[12, 14]", &format!("{:02X?}", &self.sex_raw))
            .field("job[14, 16]", &format!("{:02X?}", &self.job_raw))
            .field("level[16, 18]", &format!("{:02X?}", &self.level_raw))
            .field("contribution_exp[18, 22]", &format!("{:02X?}", &self.contribution_exp_raw))
            .field("current_state[22, 26]", &format!("{:02X?}", &self.current_state_raw))
            .field("position_id[26, 30]", &format!("{:02X?}", &self.position_id_raw))
            .field("intro[30, 80]", &format!("{:02X?}", &self.intro_raw))
            .field("charname[80, 104]", &format!("{:02X?}", &self.charname_raw))
        .finish()
    }
}

impl Display for GuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("aid(int as i32)[0, 4]: {}", &self.aid));
        fields.push(format!("gid(int as i32)[4, 8]: {}", &self.gid));
        fields.push(format!("head(short as i16)[8, 10]: {}", &self.head));
        fields.push(format!("head_palette(short as i16)[10, 12]: {}", &self.head_palette));
        fields.push(format!("sex(short as i16)[12, 14]: {}", &self.sex));
        fields.push(format!("job(short as i16)[14, 16]: {}", &self.job));
        fields.push(format!("level(short as i16)[16, 18]: {}", &self.level));
        fields.push(format!("contribution_exp(int as i32)[18, 22]: {}", &self.contribution_exp));
        fields.push(format!("current_state(int as i32)[22, 26]: {}", &self.current_state));
        fields.push(format!("position_id(int as i32)[26, 30]: {}", &self.position_id));
        fields.push(format!("intro(char[] as char[])[30, 80]: {}", &self.intro.pretty_output()));
        fields.push(format!("charname(char[] as char[])[80, 104]: {}", &self.charname.pretty_output()));
        write!(f, "GuildMemberInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for RelatedGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RelatedGuildInfo")
            .field("relation[0, 4]", &format!("{:02X?}", &self.relation_raw))
            .field("gdid[4, 8]", &format!("{:02X?}", &self.gdid_raw))
            .field("guildname[8, 32]", &format!("{:02X?}", &self.guildname_raw))
        .finish()
    }
}

impl Display for RelatedGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("relation(int as i32)[0, 4]: {}", &self.relation));
        fields.push(format!("gdid(int as i32)[4, 8]: {}", &self.gdid));
        fields.push(format!("guildname(char[] as char[])[8, 32]: {}", &self.guildname.pretty_output()));
        write!(f, "RelatedGuildInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for MonsterInfoElement {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MonsterInfoElement")
            .field("water[0, 1]", &format!("{:02X?}", &self.water_raw))
            .field("earth[1, 2]", &format!("{:02X?}", &self.earth_raw))
            .field("fire[2, 3]", &format!("{:02X?}", &self.fire_raw))
            .field("wind[3, 4]", &format!("{:02X?}", &self.wind_raw))
            .field("poison[4, 5]", &format!("{:02X?}", &self.poison_raw))
            .field("saint[5, 6]", &format!("{:02X?}", &self.saint_raw))
            .field("dark[6, 7]", &format!("{:02X?}", &self.dark_raw))
            .field("mental[7, 8]", &format!("{:02X?}", &self.mental_raw))
            .field("undead[8, 9]", &format!("{:02X?}", &self.undead_raw))
        .finish()
    }
}

impl Display for MonsterInfoElement {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("water(unsigned char as u8)[0, 1]: {}", &self.water));
        fields.push(format!("earth(unsigned char as u8)[1, 2]: {}", &self.earth));
        fields.push(format!("fire(unsigned char as u8)[2, 3]: {}", &self.fire));
        fields.push(format!("wind(unsigned char as u8)[3, 4]: {}", &self.wind));
        fields.push(format!("poison(unsigned char as u8)[4, 5]: {}", &self.poison));
        fields.push(format!("saint(unsigned char as u8)[5, 6]: {}", &self.saint));
        fields.push(format!("dark(unsigned char as u8)[6, 7]: {}", &self.dark));
        fields.push(format!("mental(unsigned char as u8)[7, 8]: {}", &self.mental));
        fields.push(format!("undead(unsigned char as u8)[8, 9]: {}", &self.undead));
        write!(f, "MonsterInfoElement\n {}", fields.join(",\n "))
    }
}

impl Debug for MakableitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MakableitemInfo")
            .field("itid[0, 2]", &format!("{:02X?}", &self.itid_raw))
            .field("material_id[2, 5]", &format!("{:02X?}", &self.material_id_raw))
        .finish()
    }
}

impl Display for MakableitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("itid(unsigned short as u16)[0, 2]: {}", &self.itid));
        fields.push(format!("material_id(unsigned short[] as u16[])[2, 5]: {}", &self.material_id.pretty_output()));
        write!(f, "MakableitemInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PeteggitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PeteggitemInfo")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for PeteggitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        write!(f, "PeteggitemInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for ArrowitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ArrowitemInfo")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
        .finish()
    }
}

impl Display for ArrowitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        write!(f, "ArrowitemInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for NormalitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo2")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("count[6, 8]", &format!("{:02X?}", &self.count_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
            .field("slot[10, 18]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for NormalitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("count(short as i16)[6, 8]: {}", &self.count));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        fields.push(format!("slot(struct as Struct)[10, 18]: {}", &self.slot));
        write!(f, "NormalitemExtrainfo2\n {}", fields.join(",\n "))
    }
}

impl Debug for RepairitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RepairitemInfo")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("refining_level[4, 5]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[5, 13]", &format!("{:02X?}", &self.slot_raw))
        .finish()
    }
}

impl Display for RepairitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("refining_level(unsigned char as u8)[4, 5]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[5, 13]: {}", &self.slot));
        write!(f, "RepairitemInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for FRIEND {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("FRIEND")
            .field("aid[0, 4]", &format!("{:02X?}", &self.aid_raw))
            .field("gid[4, 8]", &format!("{:02X?}", &self.gid_raw))
            .field("name[8, 32]", &format!("{:02X?}", &self.name_raw))
        .finish()
    }
}

impl Display for FRIEND {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("aid(unsigned long as u32)[0, 4]: {}", &self.aid));
        fields.push(format!("gid(unsigned long as u32)[4, 8]: {}", &self.gid));
        fields.push(format!("name(char[] as char[])[8, 32]: {}", &self.name.pretty_output()));
        write!(f, "FRIEND\n {}", fields.join(",\n "))
    }
}

impl Debug for TagCharacterBlockInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("TagCharacterBlockInfo")
            .field("gid[0, 4]", &format!("{:02X?}", &self.gid_raw))
            .field("sz_expire_date[4, 24]", &format!("{:02X?}", &self.sz_expire_date_raw))
        .finish()
    }
}

impl Display for TagCharacterBlockInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("gid(unsigned long as u32)[0, 4]: {}", &self.gid));
        fields.push(format!("sz_expire_date(char[] as char[])[4, 24]: {}", &self.sz_expire_date.pretty_output()));
        write!(f, "TagCharacterBlockInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PVPINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PVPINFO")
            .field("win_point[0, 4]", &format!("{:02X?}", &self.win_point_raw))
            .field("lose_point[4, 8]", &format!("{:02X?}", &self.lose_point_raw))
            .field("point[8, 12]", &format!("{:02X?}", &self.point_raw))
        .finish()
    }
}

impl Display for PVPINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("win_point(int as i32)[0, 4]: {}", &self.win_point));
        fields.push(format!("lose_point(int as i32)[4, 8]: {}", &self.lose_point));
        fields.push(format!("point(int as i32)[8, 12]: {}", &self.point));
        write!(f, "PVPINFO\n {}", fields.join(",\n "))
    }
}

impl Debug for Filetime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("Filetime")
            .field("dw_low_date_time[0, 4]", &format!("{:02X?}", &self.dw_low_date_time_raw))
            .field("dw_high_date_time[4, 8]", &format!("{:02X?}", &self.dw_high_date_time_raw))
        .finish()
    }
}

impl Display for Filetime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("dw_low_date_time(unsigned long as u32)[0, 4]: {}", &self.dw_low_date_time));
        fields.push(format!("dw_high_date_time(unsigned long as u32)[4, 8]: {}", &self.dw_high_date_time));
        write!(f, "Filetime\n {}", fields.join(",\n "))
    }
}

impl Debug for MailList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MailList")
            .field("mail_id[0, 4]", &format!("{:02X?}", &self.mail_id_raw))
            .field("header[4, 44]", &format!("{:02X?}", &self.header_raw))
            .field("is_open[44, 45]", &format!("{:02X?}", &self.is_open_raw))
            .field("from_name[45, 69]", &format!("{:02X?}", &self.from_name_raw))
            .field("delete_time[69, 73]", &format!("{:02X?}", &self.delete_time_raw))
        .finish()
    }
}

impl Display for MailList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("mail_id(unsigned long as u32)[0, 4]: {}", &self.mail_id));
        fields.push(format!("header(char[] as char[])[4, 44]: {}", &self.header.pretty_output()));
        fields.push(format!("is_open(char as i8)[44, 45]: {}", &self.is_open));
        fields.push(format!("from_name(char[] as char[])[45, 69]: {}", &self.from_name.pretty_output()));
        fields.push(format!("delete_time(long as i32)[69, 73]: {}", &self.delete_time));
        write!(f, "MailList\n {}", fields.join(",\n "))
    }
}

impl Debug for AuctionItemSearchInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("AuctionItemSearchInfo")
            .field("auction_id[0, 4]", &format!("{:02X?}", &self.auction_id_raw))
            .field("seller_name[4, 28]", &format!("{:02X?}", &self.seller_name_raw))
            .field("itid[28, 30]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[30, 34]", &format!("{:02X?}", &self.atype_raw))
            .field("count[34, 36]", &format!("{:02X?}", &self.count_raw))
            .field("is_identified[36, 37]", &format!("{:02X?}", &self.is_identified_raw))
            .field("is_damaged[37, 38]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[38, 39]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[39, 47]", &format!("{:02X?}", &self.slot_raw))
            .field("now_price[39, 43]", &format!("{:02X?}", &self.now_price_raw))
            .field("max_price[43, 47]", &format!("{:02X?}", &self.max_price_raw))
            .field("buyer_name[47, 71]", &format!("{:02X?}", &self.buyer_name_raw))
            .field("delete_time[71, 75]", &format!("{:02X?}", &self.delete_time_raw))
        .finish()
    }
}

impl Display for AuctionItemSearchInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("auction_id(unsigned long as u32)[0, 4]: {}", &self.auction_id));
        fields.push(format!("seller_name(char[] as char[])[4, 28]: {}", &self.seller_name.pretty_output()));
        fields.push(format!("itid(unsigned short as u16)[28, 30]: {}", &self.itid));
        fields.push(format!("atype(int as i32)[30, 34]: {}", &self.atype));
        fields.push(format!("count(short as i16)[34, 36]: {}", &self.count));
        fields.push(format!("is_identified(bool as bool)[36, 37]: {}", &self.is_identified));
        fields.push(format!("is_damaged(bool as bool)[37, 38]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[38, 39]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[39, 47]: {}", &self.slot));
        fields.push(format!("now_price(int as i32)[39, 43]: {}", &self.now_price));
        fields.push(format!("max_price(int as i32)[43, 47]: {}", &self.max_price));
        fields.push(format!("buyer_name(char[] as char[])[47, 71]: {}", &self.buyer_name.pretty_output()));
        fields.push(format!("delete_time(long as i32)[71, 75]: {}", &self.delete_time));
        write!(f, "AuctionItemSearchInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketMobHunting {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketMobHunting")
            .field("quest_id[0, 4]", &format!("{:02X?}", &self.quest_id_raw))
            .field("mob_gid[4, 8]", &format!("{:02X?}", &self.mob_gid_raw))
            .field("max_count[8, 10]", &format!("{:02X?}", &self.max_count_raw))
            .field("count[10, 12]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for PacketMobHunting {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("quest_id(unsigned long as u32)[0, 4]: {}", &self.quest_id));
        fields.push(format!("mob_gid(unsigned long as u32)[4, 8]: {}", &self.mob_gid));
        fields.push(format!("max_count(short as i16)[8, 10]: {}", &self.max_count));
        fields.push(format!("count(short as i16)[10, 12]: {}", &self.count));
        write!(f, "PacketMobHunting\n {}", fields.join(",\n "))
    }
}

impl Debug for EquipmentitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo2")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("location[6, 8]", &format!("{:02X?}", &self.location_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
            .field("is_damaged[10, 11]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[11, 12]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[12, 20]", &format!("{:02X?}", &self.slot_raw))
            .field("hire_expire_date[12, 16]", &format!("{:02X?}", &self.hire_expire_date_raw))
        .finish()
    }
}

impl Display for EquipmentitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("location(unsigned short as u16)[6, 8]: {}", &self.location));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        fields.push(format!("is_damaged(bool as bool)[10, 11]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[11, 12]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[12, 20]: {}", &self.slot));
        fields.push(format!("hire_expire_date(long as i32)[12, 16]: {}", &self.hire_expire_date));
        write!(f, "EquipmentitemExtrainfo2\n {}", fields.join(",\n "))
    }
}

impl Debug for PggLingoKeyTemp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PggLingoKeyTemp")
            .field("dw_alg_num[0, 4]", &format!("{:02X?}", &self.dw_alg_num_raw))
            .field("dw_alg_key1[4, 8]", &format!("{:02X?}", &self.dw_alg_key1_raw))
            .field("dw_alg_key2[8, 12]", &format!("{:02X?}", &self.dw_alg_key2_raw))
            .field("dw_seed[12, 16]", &format!("{:02X?}", &self.dw_seed_raw))
        .finish()
    }
}

impl Display for PggLingoKeyTemp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("dw_alg_num(unsigned long as u32)[0, 4]: {}", &self.dw_alg_num));
        fields.push(format!("dw_alg_key1(unsigned long as u32)[4, 8]: {}", &self.dw_alg_key1));
        fields.push(format!("dw_alg_key2(unsigned long as u32)[8, 12]: {}", &self.dw_alg_key2));
        fields.push(format!("dw_seed(unsigned long as u32)[12, 16]: {}", &self.dw_seed));
        write!(f, "PggLingoKeyTemp\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcQuestInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestInfo")
            .field("quest_id[0, 4]", &format!("{:02X?}", &self.quest_id_raw))
            .field("active[4, 5]", &format!("{:02X?}", &self.active_raw))
        .finish()
    }
}

impl Display for PacketZcQuestInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("quest_id(unsigned long as u32)[0, 4]: {}", &self.quest_id));
        fields.push(format!("active(bool as bool)[4, 5]: {}", &self.active));
        write!(f, "PacketZcQuestInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMissionHunt")
            .field("mob_gid[0, 4]", &format!("{:02X?}", &self.mob_gid_raw))
            .field("hunt_count[4, 6]", &format!("{:02X?}", &self.hunt_count_raw))
            .field("mob_name[6, 30]", &format!("{:02X?}", &self.mob_name_raw))
        .finish()
    }
}

impl Display for PacketZcMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("mob_gid(unsigned long as u32)[0, 4]: {}", &self.mob_gid));
        fields.push(format!("hunt_count(short as i16)[4, 6]: {}", &self.hunt_count));
        fields.push(format!("mob_name(char[] as char[])[6, 30]: {}", &self.mob_name.pretty_output()));
        write!(f, "PacketZcMissionHunt\n {}", fields.join(",\n "))
    }
}

impl Debug for PacketZcQuestMissionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestMissionInfo")
            .field("quest_id[0, 4]", &format!("{:02X?}", &self.quest_id_raw))
            .field("quest_svr_time[4, 8]", &format!("{:02X?}", &self.quest_svr_time_raw))
            .field("quest_end_time[8, 12]", &format!("{:02X?}", &self.quest_end_time_raw))
            .field("count[12, 14]", &format!("{:02X?}", &self.count_raw))
            .field("hunt[14, 44]", &format!("{:02X?}", &self.hunt_raw))
        .finish()
    }
}

impl Display for PacketZcQuestMissionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("quest_id(unsigned long as u32)[0, 4]: {}", &self.quest_id));
        fields.push(format!("quest_svr_time(long as i32)[4, 8]: {}", &self.quest_svr_time));
        fields.push(format!("quest_end_time(long as i32)[8, 12]: {}", &self.quest_end_time));
        fields.push(format!("count(short as i16)[12, 14]: {}", &self.count));
        fields.push(format!("hunt([] as Vec)[14, 44]: {}", &self.hunt.iter().map(|item| format!("
  >{}", item)).collect::<String>()));
        write!(f, "PacketZcQuestMissionInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for ShortCutKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ShortCutKey")
            .field("is_skill[0, 1]", &format!("{:02X?}", &self.is_skill_raw))
            .field("id[1, 5]", &format!("{:02X?}", &self.id_raw))
            .field("count[5, 7]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for ShortCutKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("is_skill(char as i8)[0, 1]: {}", &self.is_skill));
        fields.push(format!("id(unsigned long as u32)[1, 5]: {}", &self.id));
        fields.push(format!("count(short as i16)[5, 7]: {}", &self.count));
        write!(f, "ShortCutKey\n {}", fields.join(",\n "))
    }
}

impl Debug for EquipmentitemExtrainfo301 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo301")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("location[6, 8]", &format!("{:02X?}", &self.location_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
            .field("is_damaged[10, 11]", &format!("{:02X?}", &self.is_damaged_raw))
            .field("refining_level[11, 12]", &format!("{:02X?}", &self.refining_level_raw))
            .field("slot[12, 20]", &format!("{:02X?}", &self.slot_raw))
            .field("hire_expire_date[12, 16]", &format!("{:02X?}", &self.hire_expire_date_raw))
            .field("bind_on_equip_type[16, 18]", &format!("{:02X?}", &self.bind_on_equip_type_raw))
            .field("w_item_sprite_number[18, 20]", &format!("{:02X?}", &self.w_item_sprite_number_raw))
        .finish()
    }
}

impl Display for EquipmentitemExtrainfo301 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("location(unsigned short as u16)[6, 8]: {}", &self.location));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        fields.push(format!("is_damaged(bool as bool)[10, 11]: {}", &self.is_damaged));
        fields.push(format!("refining_level(unsigned char as u8)[11, 12]: {}", &self.refining_level));
        fields.push(format!("slot(struct as Struct)[12, 20]: {}", &self.slot));
        fields.push(format!("hire_expire_date(long as i32)[12, 16]: {}", &self.hire_expire_date));
        fields.push(format!("bind_on_equip_type(unsigned short as u16)[16, 18]: {}", &self.bind_on_equip_type));
        fields.push(format!("w_item_sprite_number(unsigned short as u16)[18, 20]: {}", &self.w_item_sprite_number));
        write!(f, "EquipmentitemExtrainfo301\n {}", fields.join(",\n "))
    }
}

impl Debug for NormalitemExtrainfo3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo3")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("atype[4, 5]", &format!("{:02X?}", &self.atype_raw))
            .field("is_identified[5, 6]", &format!("{:02X?}", &self.is_identified_raw))
            .field("count[6, 8]", &format!("{:02X?}", &self.count_raw))
            .field("wear_state[8, 10]", &format!("{:02X?}", &self.wear_state_raw))
            .field("slot[10, 18]", &format!("{:02X?}", &self.slot_raw))
            .field("hire_expire_date[10, 14]", &format!("{:02X?}", &self.hire_expire_date_raw))
        .finish()
    }
}

impl Display for NormalitemExtrainfo3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(short as i16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("atype(unsigned char as u8)[4, 5]: {}", &self.atype));
        fields.push(format!("is_identified(bool as bool)[5, 6]: {}", &self.is_identified));
        fields.push(format!("count(short as i16)[6, 8]: {}", &self.count));
        fields.push(format!("wear_state(unsigned short as u16)[8, 10]: {}", &self.wear_state));
        fields.push(format!("slot(struct as Struct)[10, 18]: {}", &self.slot));
        fields.push(format!("hire_expire_date(long as i32)[10, 14]: {}", &self.hire_expire_date));
        write!(f, "NormalitemExtrainfo3\n {}", fields.join(",\n "))
    }
}

impl Debug for SkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SkillPostdelay")
            .field("skid[0, 2]", &format!("{:02X?}", &self.skid_raw))
            .field("delay_tm[2, 6]", &format!("{:02X?}", &self.delay_tm_raw))
        .finish()
    }
}

impl Display for SkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("skid(unsigned short as u16)[0, 2]: {}", &self.skid));
        fields.push(format!("delay_tm(unsigned long as u32)[2, 6]: {}", &self.delay_tm));
        write!(f, "SkillPostdelay\n {}", fields.join(",\n "))
    }
}

impl Debug for CharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CharacterList")
            .field("dw_gid[0, 4]", &format!("{:02X?}", &self.dw_gid_raw))
            .field("slot_idx[4, 5]", &format!("{:02X?}", &self.slot_idx_raw))
        .finish()
    }
}

impl Display for CharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("dw_gid(unsigned long as u32)[0, 4]: {}", &self.dw_gid));
        fields.push(format!("slot_idx(unsigned char as u8)[4, 5]: {}", &self.slot_idx));
        write!(f, "CharacterList\n {}", fields.join(",\n "))
    }
}

impl Debug for BattleFieldInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("BattleFieldInfo")
            .field("bfno[0, 4]", &format!("{:02X?}", &self.bfno_raw))
            .field("battle_field_name[4, 60]", &format!("{:02X?}", &self.battle_field_name_raw))
            .field("join_team[60, 62]", &format!("{:02X?}", &self.join_team_raw))
        .finish()
    }
}

impl Display for BattleFieldInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("bfno(unsigned long as u32)[0, 4]: {}", &self.bfno));
        fields.push(format!("battle_field_name(char[] as char[])[4, 60]: {}", &self.battle_field_name.pretty_output()));
        fields.push(format!("join_team(short as i16)[60, 62]: {}", &self.join_team));
        write!(f, "BattleFieldInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for PartyBookingDetail {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PartyBookingDetail")
            .field("level[0, 2]", &format!("{:02X?}", &self.level_raw))
            .field("map_id[2, 4]", &format!("{:02X?}", &self.map_id_raw))
            .field("job[4, 10]", &format!("{:02X?}", &self.job_raw))
        .finish()
    }
}

impl Display for PartyBookingDetail {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("level(short as i16)[0, 2]: {}", &self.level));
        fields.push(format!("map_id(short as i16)[2, 4]: {}", &self.map_id));
        fields.push(format!("job(short[] as i16[])[4, 10]: {}", &self.job.pretty_output()));
        write!(f, "PartyBookingDetail\n {}", fields.join(",\n "))
    }
}

impl Debug for PartyBookingAdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PartyBookingAdInfo")
            .field("index[0, 4]", &format!("{:02X?}", &self.index_raw))
            .field("char_name[4, 28]", &format!("{:02X?}", &self.char_name_raw))
            .field("expire_time[28, 32]", &format!("{:02X?}", &self.expire_time_raw))
            .field("detail[32, ?]", &format!("{:02X?}", &self.detail_raw))
        .finish()
    }
}

impl Display for PartyBookingAdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(unsigned long as u32)[0, 4]: {}", &self.index));
        fields.push(format!("char_name(char[] as char[])[4, 28]: {}", &self.char_name.pretty_output()));
        fields.push(format!("expire_time(long as i32)[28, 32]: {}", &self.expire_time));
        fields.push(format!("detail(struct as Struct)[32, ?]: {}", &self.detail));
        write!(f, "PartyBookingAdInfo\n {}", fields.join(",\n "))
    }
}

impl Debug for ProductinfoInBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ProductinfoInBuyingStore")
            .field("itid[0, 2]", &format!("{:02X?}", &self.itid_raw))
            .field("count[2, 4]", &format!("{:02X?}", &self.count_raw))
            .field("price[4, 8]", &format!("{:02X?}", &self.price_raw))
        .finish()
    }
}

impl Display for ProductinfoInBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("itid(unsigned short as u16)[0, 2]: {}", &self.itid));
        fields.push(format!("count(short as i16)[2, 4]: {}", &self.count));
        fields.push(format!("price(int as i32)[4, 8]: {}", &self.price));
        write!(f, "ProductinfoInBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for BuyingStoreItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("BuyingStoreItemlist")
            .field("price[0, 4]", &format!("{:02X?}", &self.price_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
            .field("atype[6, 7]", &format!("{:02X?}", &self.atype_raw))
            .field("itid[7, 9]", &format!("{:02X?}", &self.itid_raw))
        .finish()
    }
}

impl Display for BuyingStoreItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("price(int as i32)[0, 4]: {}", &self.price));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        fields.push(format!("atype(unsigned char as u8)[6, 7]: {}", &self.atype));
        fields.push(format!("itid(unsigned short as u16)[7, 9]: {}", &self.itid));
        write!(f, "BuyingStoreItemlist\n {}", fields.join(",\n "))
    }
}

impl Debug for TradeItemBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("TradeItemBuyingStore")
            .field("index[0, 2]", &format!("{:02X?}", &self.index_raw))
            .field("itid[2, 4]", &format!("{:02X?}", &self.itid_raw))
            .field("count[4, 6]", &format!("{:02X?}", &self.count_raw))
        .finish()
    }
}

impl Display for TradeItemBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("index(unsigned short as u16)[0, 2]: {}", &self.index));
        fields.push(format!("itid(unsigned short as u16)[2, 4]: {}", &self.itid));
        fields.push(format!("count(short as i16)[4, 6]: {}", &self.count));
        write!(f, "TradeItemBuyingStore\n {}", fields.join(",\n "))
    }
}

impl Debug for ResultItemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ResultItemInfo")
            .field("ssiid[0, 4]", &format!("{:02X?}", &self.ssiid_raw))
            .field("aid[4, 8]", &format!("{:02X?}", &self.aid_raw))
            .field("store_name[8, 88]", &format!("{:02X?}", &self.store_name_raw))
            .field("itid[88, 90]", &format!("{:02X?}", &self.itid_raw))
            .field("item_type[90, 91]", &format!("{:02X?}", &self.item_type_raw))
            .field("price[91, 95]", &format!("{:02X?}", &self.price_raw))
            .field("count[95, 97]", &format!("{:02X?}", &self.count_raw))
            .field("refining_level[97, 98]", &format!("{:02X?}", &self.refining_level_raw))
            .field("card1[98, 100]", &format!("{:02X?}", &self.card1_raw))
            .field("card2[100, 102]", &format!("{:02X?}", &self.card2_raw))
            .field("card3[102, 104]", &format!("{:02X?}", &self.card3_raw))
            .field("card4[104, 106]", &format!("{:02X?}", &self.card4_raw))
        .finish()
    }
}

impl Display for ResultItemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let mut fields = Vec::new();
        fields.push(format!("ssiid(unsigned int as u32)[0, 4]: {}", &self.ssiid));
        fields.push(format!("aid(unsigned int as u32)[4, 8]: {}", &self.aid));
        fields.push(format!("store_name(char[] as char[])[8, 88]: {}", &self.store_name.pretty_output()));
        fields.push(format!("itid(unsigned short as u16)[88, 90]: {}", &self.itid));
        fields.push(format!("item_type(unsigned char as u8)[90, 91]: {}", &self.item_type));
        fields.push(format!("price(int as i32)[91, 95]: {}", &self.price));
        fields.push(format!("count(unsigned short as u16)[95, 97]: {}", &self.count));
        fields.push(format!("refining_level(unsigned char as u8)[97, 98]: {}", &self.refining_level));
        fields.push(format!("card1(unsigned short as u16)[98, 100]: {}", &self.card1));
        fields.push(format!("card2(unsigned short as u16)[100, 102]: {}", &self.card2));
        fields.push(format!("card3(unsigned short as u16)[102, 104]: {}", &self.card3));
        fields.push(format!("card4(unsigned short as u16)[104, 106]: {}", &self.card4));
        write!(f, "ResultItemInfo\n {}", fields.join(",\n "))
    }
}

